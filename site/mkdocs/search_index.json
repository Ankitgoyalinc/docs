{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the Gluu Server Documentation\n\n\nThe Gluu Server is a free open source access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.\n\n\nThe code is open source, and \navailable on github\n.\n\n\nCommunity support can be enlisted either on the \nGluu website\n or by opening an issue on \nGithub\n. Gluu also offers \nVIP support\n and can refer your organization to one of our world-class \nintegration partners\n for any custom development and integration needs. \n\n\nThe main documentation is organized into the following sections:\n\n\n\n\nAdmin Guide\n\n\nReference\n\n\nArticles\n\n\n\n\nAdmin Guide\n\n\n\n\nIntroduction\n\n\nOur Mission\n\n\nHistory\n\n\nDesign Goals\n\n\nArchitecture\n\n\nLicenses\n\n\n\n\n\n\nGetting Started\n\n\nDeployment\n\n\nCentOS\n\n\nUbuntu\n\n\n\n\n\n\nConfiguration\n\n\nOrganization Configuration\n\n\nManage Authentication\n\n\nManage Custom Scripts\n\n\nManage Registration\n\n\nAttributes\n\n\nCache Refresh (LDAP Synchronization)\n\n\nConfigure Log Viewer\n\n\nView Logs\n\n\n\n\n\n\nOperations\n\n\nDesign Customizations\n\n\nStyle Customizations\n\n\nPage Customizations\n\n\nBuilt-in oxTrust Customization\n\n\n\n\n\n\nLDAP\n\n\nIndexing\n\n\nReplication\n\n\n\n\n\n\nSAML\n\n\nOutbound SAML\n\n\nInbound SAML\n\n\nSAML SP Setup\n\n\n\n\n\n\nOpenID Connect\n\n\nNew Jargon\n\n\nDiscovery\n\n\nScopes\n\n\nClient Registration\n\n\nSession Management\n\n\n\n\n\n\nUMA\n\n\nIntroduction\n\n\nDiscovery\n\n\nResource Registration\n\n\nUMA Policies\n\n\nUMA Scopes\n\n\nRequesting Party Trust Elevation\n\n\n\n\n\n\nUser Management\n \n\n\nCache Refresh\n\n\nSelf Registration\n\n\nLocal User Management\n\n\nSCIM oxAuth Authentication\n\n\nSCIM UMA Authentication\n\n\n\n\n\n\nPersonal\n \n\n\nFAQ\n\n\n\n\nReference\n\n\n\n\nAPI\n \n\n\nID Generation\n\n\nOpenID Connect Authorization\n\n\nOpenID Connect End Session\n\n\nOpenID Connect Register Client\n\n\nOpenID Connect Token\n\n\nOpenID Connect User Info\n\n\nUMA Discovery\n\n\n\n\n\n\nInterception Scripts\n\n\nApplication Session Management\n\n\nAuthentication\n\n\nAuthorization\n\n\nCache Refresh\n \n\n\nClient Registration\n\n\nID Generation\n\n\nUpdate User\n \n\n\nUser Registration\n \n\n\n\n\n\n\nLDAP Namespace\n\n\nLDAP Schema\n\n\nLib\n\n\nOpenID Connect\n\n\nSCIM\n\n\nUMA\n\n\n\n\n\n\noxAuth\n \n\n\noxd\n\n\noxTrust\n\n\n\n\nArticles\n\n\n\n\nApache SAML\n\n\nBenchmarking\n\n\nCustom Attributes\n\n\nGoogle SAML\n\n\nSalesfore SAML\n\n\nIIS SAML\n\n\nJava Connect\n\n\nJS Connect\n\n\nSCIM Client\n\n\nmod_auth_oidc Installation Guide\n\n\nTest Shib2\n\n\nSocial Login With Google", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-the-gluu-server-documentation", 
            "text": "The Gluu Server is a free open source access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.  The code is open source, and  available on github .  Community support can be enlisted either on the  Gluu website  or by opening an issue on  Github . Gluu also offers  VIP support  and can refer your organization to one of our world-class  integration partners  for any custom development and integration needs.   The main documentation is organized into the following sections:   Admin Guide  Reference  Articles", 
            "title": "Welcome to the Gluu Server Documentation"
        }, 
        {
            "location": "/#admin-guide", 
            "text": "Introduction  Our Mission  History  Design Goals  Architecture  Licenses    Getting Started  Deployment  CentOS  Ubuntu    Configuration  Organization Configuration  Manage Authentication  Manage Custom Scripts  Manage Registration  Attributes  Cache Refresh (LDAP Synchronization)  Configure Log Viewer  View Logs    Operations  Design Customizations  Style Customizations  Page Customizations  Built-in oxTrust Customization    LDAP  Indexing  Replication    SAML  Outbound SAML  Inbound SAML  SAML SP Setup    OpenID Connect  New Jargon  Discovery  Scopes  Client Registration  Session Management    UMA  Introduction  Discovery  Resource Registration  UMA Policies  UMA Scopes  Requesting Party Trust Elevation    User Management    Cache Refresh  Self Registration  Local User Management  SCIM oxAuth Authentication  SCIM UMA Authentication    Personal    FAQ", 
            "title": "Admin Guide"
        }, 
        {
            "location": "/#reference", 
            "text": "API    ID Generation  OpenID Connect Authorization  OpenID Connect End Session  OpenID Connect Register Client  OpenID Connect Token  OpenID Connect User Info  UMA Discovery    Interception Scripts  Application Session Management  Authentication  Authorization  Cache Refresh    Client Registration  ID Generation  Update User    User Registration      LDAP Namespace  LDAP Schema  Lib  OpenID Connect  SCIM  UMA    oxAuth    oxd  oxTrust", 
            "title": "Reference"
        }, 
        {
            "location": "/#articles", 
            "text": "Apache SAML  Benchmarking  Custom Attributes  Google SAML  Salesfore SAML  IIS SAML  Java Connect  JS Connect  SCIM Client  mod_auth_oidc Installation Guide  Test Shib2  Social Login With Google", 
            "title": "Articles"
        }, 
        {
            "location": "/admin-guide/introduction/", 
            "text": "Table of Contents\n \n\n\n\n\nIntroduction\n\n\nOur Mission\n\n\nHistory\n\n\nHow we got started\n\n\nVersions 1 and 2\n\n\nVersion 3\n\n\nEnter OAuth2\n\n\nLinux Distribution Packages\n\n\n\n\n\n\nDesign Goals\n\n\nFree Open Source Identity Suite\n\n\nSupport most promising open standards\n\n\nLeverage existing business processes\n\n\nFree license\n\n\nWrite as a last resort\n\n\nNot just comprehensive, but easy to use\n\n\nHorizontal scalability\n\n\nExtreme flexibility\n\n\n\n\n\n\nArchitecture\n\n\nJ2EE Servlet container\n\n\nApache HTTP front end web server\n\n\nLDAP for Persistence\n\n\nmemcached\n\n\nWeb container plugins\n\n\n\n\n\n\nLicenses\n\n\nGluu OX Project Software\n\n\nShibboleth\n\n\nOpenDJ\n\n\nOpenLDAP\n\n\n389DS\n\n\nAsimba\n\n\nJagger\n\n\n\n\n\n\n\n\nIntroduction\n\n\nAuthenticating people online, and controlling access to API's can be challenging, but if you have the right recipe it is an attainable objective. \n\n\nIn the sections listed below you will find some high level information about the who, what, where, when, and why of the Gluu Server.\n\n\nCommunity Support can be found and requested on our \npublic knowledge base\n, while \nVIP Support\n can be purchased for private assistance, priority responses, and help with the code. \n\n\nOur Mission\n\n\nGluu's mission is to help organization's all over the world enforce application security with easy, free, flexible and scalable open source software. \n\n\nHistory\n\n\nHow we got started\n\n\nGluu was founded in 2009 by Mike Schwartz. After selling his ISP to Verio in 1998, Mike\nadvised many large companies on identity and access management, directory services, and\napplication security. In late 2008, Mike had a hunch that Web single sign-on\nwas too complex, too proprietary and too expensive for many organizations. He felt that\na utility approach to SSO using open source software could provide an alternative to\nexpensive enterprise solutions. The Gluu Server was envisioned as an integrated\nidentity platform, based on free open source software, to make application security available\nto significantly greater number of organizations.\n\n\nVersions 1 and 2\n\n\nVersions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European Identity Conference in Munich in May 2009.\nVersion 1 worked a little, but there was no easy way to manage it. Version 2 of the Gluu Server had a better UI, but\nit was just a facade--the UI didn't actually do anything to configure OpenSSO. Version 2 was launched after\nMike Schwartz met with members of the InCommon steering committee in San Antonio in October 2009.\nAt that meeting, Mike expressed concern that OpenSSO might be end-of-life. Oracle had recently purchased\nSun Microsystems, and before ForgeRock was formed, it seemed possible that Oracle would simply\nmigrate OpenSSO customers to Oracle Access Manager. Bob Morgan from the University of Washington convinced Mike that the Shibboleth IDP was a reasonable\nalternative, and arguably had even more features in SAML, including fine grain access release policies, and\na better approach for multi-party federation. As the InCommon federation's efforts to evangelize SAML federation\nwould support Gluu's message, switching had marketing advantages, and would reduce the\nevent risk around OpenSSO. Shortly thereafter, a\nnew project from scratch was launched for Gluu Server v3 with the goal of using templates to simplify the\nmanagement of the Shibboleth IDP.\n\n\nVersion 3\n\n\nThe first live demo of the Gluu Server was at an InCommon event in Atlanta, GA in early November 2010.\nAt that demo, Hakeem Fahm, then IT director at the University of the District of Columbia,\nwas impressed and decided that the Gluu Server was exactly what his campus needed to join InCommon. Delivering\nthe first Gluu Server into production took three months. The order was placed before Thanksgiving, and it was finally\ndelivered in early February 2011. Mike helped write some of the python scripts (few, if any of which are still in\nuse), and establish the operating procedures for delivery of the Gluu Server. In 2011, a few more\ncampuses also adopted the Gluu Server.\n\n\nEnter OAuth2\n\n\nOAuth2 had been on Gluu's roadmap since inception, but work started due to a consulting\nproject Gluu had undertaken for \nIDCubed\n. This is the reason the OX software is MIT license--IDCubed\ninsisted on it. The project was a flop--Gluu couldn't deliver the graph based federated data solution quickly\nenough. But as a result, Gluu was able to accelerate the launch of the OX OAuth2 based features, first with\nOpenID Connect in late 2011. Then in late 2012, Gluu followed by introducing support for the\nUser Managed Access Protocol, which Mike felt provided an Oauth2 based solution for access management that\nwas superior to Computer Associates' proprietary Siteminder access management framework.\n\n\nLinux Distribution Packages\n\n\nAt OSCON 2014, Gluu introduced easier to install packages for the Gluu Server, and support for the Ubuntu Juju\norchestration framework. The goal of these distributions was to promote adoption of OX in the major\ndistributions of linux.\n\n\nDesign Goals\n\n\nFree Open Source Identity Suite\n\n\nOne of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve\neven average requirements.  The Gluu Server provides a recipe to \ndeploy a combination of the best free open source tools, working \ntogether.\n\n\nSupport most promising open standards\n\n\nThe goal of the Gluu Server is to support the minimum number\nof standards necessary to authenticate people, and to authorize them\nto access the resources they need to do business for the domain.\nThe Gluu Server should be practical about supporting older protocols, \nbut always strive to be the first implementer of the most promising \nnew protocols. \n\n\nLeverage existing business processes\n\n\nWhere possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.\n\n\nFree license\n\n\nThe components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.\n\n\nWrite as a last resort\n\n\nUse the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!\n\n\nNot just comprehensive, but easy to use\n\n\nThe Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.\n\n\nHorizontal scalability\n\n\nSystem administrators should be able to add more servers to make the \nGluu Server scale as much as needed.\n\n\nExtreme flexibility\n\n\nAs Kent Beck says, \"Embrace Change\". The key to the Gluu Server's succes\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.\n\n\nArchitecture\n\n\nFollowing is a list of the technical components that comprise the Gluu Server.\n\n\nJ2EE Servlet container\n\n\nMost of the components of the Gluu Server are written in Java, and deployed as\na web application in a J2EE servlet container. Java was chosen because there is\na wide array of high quality libraries, convenient container services,\nand tools for managing high performance applications at run-time. In order to run\nthe Gluu Server, you don't have to be a Java expert. But it does help to have some\nknowledge of how Java applications are deployed and managed in tomcat, or a similar\nservlet container.\n\n\nApache HTTP front end web server\n\n\nAlthough there are pros and cons, we think its best to use the Apache HTTPD\nserver as the Internet facing Web server. There are a number of Apache HTTPD\ndenial of service plugins. Its easier to handle re-directs for things like\ndiscovery. And its convenient to have a non-J2EE way to publish static content.\n\n\n\nLDAP for Persistence\n\n\nLDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.\n\n\nmemcached\n\n\nMemcached is used on both the Gluu Server, and to cache authorization decisions\nfor the OX web container plugins. It is easy to configure and there were tools\nto enable memcached clusters (thanks Twitter!).\n\n\nWeb container plugins\n\n\nToday, Web access management tools like CA Siteminder predominantly use the web\nagent approach. Many large organizations have hundreds or thousands of \"web agents\"\nrunning on Apache and IIS.\n\n\nWeb agents are a great approach. Programmers don't have to know much about the\nprotocols. System administrators can configure the web server to use\nthe central authorization server so we don't have to rely on the programmers to get\nsecurity right. The programmers can obtain the user session information in the\nenvironment variables. In OAuth2 information is serialized using JSON. For example, the\nentire id_token JWT is sent in one environment variable.\n\n\nIf developers want even more control, they can use the Gluu Server's API's directly: SAML, \nOpenID Connect, or UMA.\n\n\nLicenses\n\n\nThe Gluu Server is a suite of free open source software.\n\n\nGluu OX Project Software\n\n\nMIT\n\n\nAny software published by Gluu in the OX Project is MIT license.\n\n\nShibboleth\n\n\nApache2\n\n\nOpenDJ\n\n\nCDDL-1.0\n\n\nOpenLDAP\n\n\nOpenLDAP Public License\n\n\n389DS\n\n\nSee \nhttp://directory.fedoraproject.org/wiki/Licensing\n\n\nAsimba\n\n\nGNU APGL 3.0\n\n\nJagger\n\n\nMIT License", 
            "title": "Introduction"
        }, 
        {
            "location": "/admin-guide/introduction/#introduction", 
            "text": "Authenticating people online, and controlling access to API's can be challenging, but if you have the right recipe it is an attainable objective.   In the sections listed below you will find some high level information about the who, what, where, when, and why of the Gluu Server.  Community Support can be found and requested on our  public knowledge base , while  VIP Support  can be purchased for private assistance, priority responses, and help with the code.", 
            "title": "Introduction"
        }, 
        {
            "location": "/admin-guide/introduction/#our-mission", 
            "text": "Gluu's mission is to help organization's all over the world enforce application security with easy, free, flexible and scalable open source software.", 
            "title": "Our Mission"
        }, 
        {
            "location": "/admin-guide/introduction/#history", 
            "text": "", 
            "title": "History"
        }, 
        {
            "location": "/admin-guide/introduction/#how-we-got-started", 
            "text": "Gluu was founded in 2009 by Mike Schwartz. After selling his ISP to Verio in 1998, Mike\nadvised many large companies on identity and access management, directory services, and\napplication security. In late 2008, Mike had a hunch that Web single sign-on\nwas too complex, too proprietary and too expensive for many organizations. He felt that\na utility approach to SSO using open source software could provide an alternative to\nexpensive enterprise solutions. The Gluu Server was envisioned as an integrated\nidentity platform, based on free open source software, to make application security available\nto significantly greater number of organizations.", 
            "title": "How we got started"
        }, 
        {
            "location": "/admin-guide/introduction/#versions-1-and-2", 
            "text": "Versions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European Identity Conference in Munich in May 2009.\nVersion 1 worked a little, but there was no easy way to manage it. Version 2 of the Gluu Server had a better UI, but\nit was just a facade--the UI didn't actually do anything to configure OpenSSO. Version 2 was launched after\nMike Schwartz met with members of the InCommon steering committee in San Antonio in October 2009.\nAt that meeting, Mike expressed concern that OpenSSO might be end-of-life. Oracle had recently purchased\nSun Microsystems, and before ForgeRock was formed, it seemed possible that Oracle would simply\nmigrate OpenSSO customers to Oracle Access Manager. Bob Morgan from the University of Washington convinced Mike that the Shibboleth IDP was a reasonable\nalternative, and arguably had even more features in SAML, including fine grain access release policies, and\na better approach for multi-party federation. As the InCommon federation's efforts to evangelize SAML federation\nwould support Gluu's message, switching had marketing advantages, and would reduce the\nevent risk around OpenSSO. Shortly thereafter, a\nnew project from scratch was launched for Gluu Server v3 with the goal of using templates to simplify the\nmanagement of the Shibboleth IDP.", 
            "title": "Versions 1 and 2"
        }, 
        {
            "location": "/admin-guide/introduction/#version-3", 
            "text": "The first live demo of the Gluu Server was at an InCommon event in Atlanta, GA in early November 2010.\nAt that demo, Hakeem Fahm, then IT director at the University of the District of Columbia,\nwas impressed and decided that the Gluu Server was exactly what his campus needed to join InCommon. Delivering\nthe first Gluu Server into production took three months. The order was placed before Thanksgiving, and it was finally\ndelivered in early February 2011. Mike helped write some of the python scripts (few, if any of which are still in\nuse), and establish the operating procedures for delivery of the Gluu Server. In 2011, a few more\ncampuses also adopted the Gluu Server.", 
            "title": "Version 3"
        }, 
        {
            "location": "/admin-guide/introduction/#enter-oauth2", 
            "text": "OAuth2 had been on Gluu's roadmap since inception, but work started due to a consulting\nproject Gluu had undertaken for  IDCubed . This is the reason the OX software is MIT license--IDCubed\ninsisted on it. The project was a flop--Gluu couldn't deliver the graph based federated data solution quickly\nenough. But as a result, Gluu was able to accelerate the launch of the OX OAuth2 based features, first with\nOpenID Connect in late 2011. Then in late 2012, Gluu followed by introducing support for the\nUser Managed Access Protocol, which Mike felt provided an Oauth2 based solution for access management that\nwas superior to Computer Associates' proprietary Siteminder access management framework.", 
            "title": "Enter OAuth2"
        }, 
        {
            "location": "/admin-guide/introduction/#linux-distribution-packages", 
            "text": "At OSCON 2014, Gluu introduced easier to install packages for the Gluu Server, and support for the Ubuntu Juju\norchestration framework. The goal of these distributions was to promote adoption of OX in the major\ndistributions of linux.", 
            "title": "Linux Distribution Packages"
        }, 
        {
            "location": "/admin-guide/introduction/#design-goals", 
            "text": "", 
            "title": "Design Goals"
        }, 
        {
            "location": "/admin-guide/introduction/#free-open-source-identity-suite", 
            "text": "One of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve\neven average requirements.  The Gluu Server provides a recipe to \ndeploy a combination of the best free open source tools, working \ntogether.", 
            "title": "Free Open Source Identity Suite"
        }, 
        {
            "location": "/admin-guide/introduction/#support-most-promising-open-standards", 
            "text": "The goal of the Gluu Server is to support the minimum number\nof standards necessary to authenticate people, and to authorize them\nto access the resources they need to do business for the domain.\nThe Gluu Server should be practical about supporting older protocols, \nbut always strive to be the first implementer of the most promising \nnew protocols.", 
            "title": "Support most promising open standards"
        }, 
        {
            "location": "/admin-guide/introduction/#leverage-existing-business-processes", 
            "text": "Where possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.", 
            "title": "Leverage existing business processes"
        }, 
        {
            "location": "/admin-guide/introduction/#free-license", 
            "text": "The components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.", 
            "title": "Free license"
        }, 
        {
            "location": "/admin-guide/introduction/#write-as-a-last-resort", 
            "text": "Use the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!", 
            "title": "Write as a last resort"
        }, 
        {
            "location": "/admin-guide/introduction/#not-just-comprehensive-but-easy-to-use", 
            "text": "The Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.", 
            "title": "Not just comprehensive, but easy to use"
        }, 
        {
            "location": "/admin-guide/introduction/#horizontal-scalability", 
            "text": "System administrators should be able to add more servers to make the \nGluu Server scale as much as needed.", 
            "title": "Horizontal scalability"
        }, 
        {
            "location": "/admin-guide/introduction/#extreme-flexibility", 
            "text": "As Kent Beck says, \"Embrace Change\". The key to the Gluu Server's succes\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.", 
            "title": "Extreme flexibility"
        }, 
        {
            "location": "/admin-guide/introduction/#architecture", 
            "text": "Following is a list of the technical components that comprise the Gluu Server.", 
            "title": "Architecture"
        }, 
        {
            "location": "/admin-guide/introduction/#j2ee-servlet-container", 
            "text": "Most of the components of the Gluu Server are written in Java, and deployed as\na web application in a J2EE servlet container. Java was chosen because there is\na wide array of high quality libraries, convenient container services,\nand tools for managing high performance applications at run-time. In order to run\nthe Gluu Server, you don't have to be a Java expert. But it does help to have some\nknowledge of how Java applications are deployed and managed in tomcat, or a similar\nservlet container.", 
            "title": "J2EE Servlet container"
        }, 
        {
            "location": "/admin-guide/introduction/#apache-http-front-end-web-server", 
            "text": "Although there are pros and cons, we think its best to use the Apache HTTPD\nserver as the Internet facing Web server. There are a number of Apache HTTPD\ndenial of service plugins. Its easier to handle re-directs for things like\ndiscovery. And its convenient to have a non-J2EE way to publish static content.", 
            "title": "Apache HTTP front end web server"
        }, 
        {
            "location": "/admin-guide/introduction/#ldap-for-persistence", 
            "text": "LDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.", 
            "title": "LDAP for Persistence"
        }, 
        {
            "location": "/admin-guide/introduction/#memcached", 
            "text": "Memcached is used on both the Gluu Server, and to cache authorization decisions\nfor the OX web container plugins. It is easy to configure and there were tools\nto enable memcached clusters (thanks Twitter!).", 
            "title": "memcached"
        }, 
        {
            "location": "/admin-guide/introduction/#web-container-plugins", 
            "text": "Today, Web access management tools like CA Siteminder predominantly use the web\nagent approach. Many large organizations have hundreds or thousands of \"web agents\"\nrunning on Apache and IIS.  Web agents are a great approach. Programmers don't have to know much about the\nprotocols. System administrators can configure the web server to use\nthe central authorization server so we don't have to rely on the programmers to get\nsecurity right. The programmers can obtain the user session information in the\nenvironment variables. In OAuth2 information is serialized using JSON. For example, the\nentire id_token JWT is sent in one environment variable.  If developers want even more control, they can use the Gluu Server's API's directly: SAML, \nOpenID Connect, or UMA.", 
            "title": "Web container plugins"
        }, 
        {
            "location": "/admin-guide/introduction/#licenses", 
            "text": "The Gluu Server is a suite of free open source software.", 
            "title": "Licenses"
        }, 
        {
            "location": "/admin-guide/introduction/#gluu-ox-project-software", 
            "text": "MIT  Any software published by Gluu in the OX Project is MIT license.", 
            "title": "Gluu OX Project Software"
        }, 
        {
            "location": "/admin-guide/introduction/#shibboleth", 
            "text": "Apache2", 
            "title": "Shibboleth"
        }, 
        {
            "location": "/admin-guide/introduction/#opendj", 
            "text": "CDDL-1.0", 
            "title": "OpenDJ"
        }, 
        {
            "location": "/admin-guide/introduction/#openldap", 
            "text": "OpenLDAP Public License", 
            "title": "OpenLDAP"
        }, 
        {
            "location": "/admin-guide/introduction/#389ds", 
            "text": "See  http://directory.fedoraproject.org/wiki/Licensing", 
            "title": "389DS"
        }, 
        {
            "location": "/admin-guide/introduction/#asimba", 
            "text": "GNU APGL 3.0", 
            "title": "Asimba"
        }, 
        {
            "location": "/admin-guide/introduction/#jagger", 
            "text": "MIT License", 
            "title": "Jagger"
        }, 
        {
            "location": "/admin-guide/getting-started/", 
            "text": "Getting Started\n\n\nThis document will show you how to get up and running with the Gluu Server. It is broken down into the following sections:\n\n\n\n\nOverview\n    \n\n\nDeployment\n    \n\n\nMinimum Server Requirements:\n  \n\n\nOS Support\n  \n\n\nAvailable Components\n  \n\n\nDeployment Models\n  \n\n\n\n\n\n\nDashboard\n  \n\n\nPerson Authentication\n  \n\n\nBasic Authentication\n  \n\n\nCustom Authentication\n  \n\n\n\n\n\n\nIdentity Management\n  \n\n\nSingle Sign-On (SSO)\n  \n\n\nWeb \n API Access Management\n  \n\n\n\n\nOverview\n\n\nThe Gluu Server is an identity and access management suite comprised of free open source software (FOSS) components. Some of the software was written by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and some of the software we forked from existing open source projects like the Shibboleth SAML identity provider, Forgerock community release of OpenDJ, the Asimba SAML proxy, the CAS authentication server and many more components that are part of the linux distributions. Learn more about each of the open source licenses in use \nhere\n.\n\n\nThe full suite of software is distributed as linux packages that support either single server or clustered deployments. In order to deploy the clustered package to multiple locations, you'll need a commercial license. More about that topic below in \nDeployment Models\n.\n\n\nDeployment\n\n\nThe Gluu Server can be deployed on any physical or virtual server. Both distributions of the Gluu Server--Community Edition and Cluster--are distributed as containers. Community edition uses \nchroot\n containers, while the Cluster Edition uses \ndocker\n containers. Container distribution enables Gluu to make sure that all the pieces are working together. If you actually had to integrate all the components of the Gluu Server together, it would take you a long time. \n\n\nMinimum Server Requirements:\n\n\nDepending on the size of your data and the number of concurrent authentications you want to be able to support, you may need more or less memory or CPU capacity. For Gluu Server Community Edition, we recommend at least 2 CPU units, 4 GB of RAM, and around 20GB of disk space. Monitor your system performance, and make sure its not swapping, in which case you should add more RAM, and increase the JVM size of tomcat.\n\n\nOS Support:\n\n\nWe currently support and maintain package repositories for \nUbuntu\n, \nCentOS\n. Red Hat packages are in beta and will be available soon. Fedora and Debian packages are on the roadmap.\n\n\nAvailable Components\n\n\nWhen you deploy the Gluu Server, you will have the opportunity to specify which of the following softwares you want deployed on your server: \n\n\noxAuth:*\n oxAuth provides endpoints for an OpenID Connect Identity Provider (IDP) and an UMA Authorization Server (AS). Both OpenID Connect and UMA are standard profiles of OAuth 2.0, used for single sign-on (SSO) and web and API access management, respectively.  \n\n\noxTrust:*\n oxTrust is the graphical user interface that is used for server management. \n\n\nLDAP:*\n The Gluu Server ships with a fork of the OpenDJ LDAP server. It is used to store attributes and server configurations locally. \n\n\nApache 2 web server:*\n Apache 2 serves the web server for the Gluu Server. Without Apache 2, it's not possible to see the hostname from a browser. \n\n\nShibboleth 2 SAML IDP:\n The Shibboleth server provides endpoints for a SAML Identity Provider (IDP). If you want to create single sign-on (SSO) to a SAML SP, you'll need a SAML IDP. \n\n\nAsimba SAML Proxy:\n The Asimba SAML proxy should be deployed on if your organization needs to consolidate inbound SAML authentication from the IDPs of partners to a single website or app. \n\n\nCAS:\n CAS is legacy at this point and should only be deployed if your organization has existing apps that can only support CAS for single sign-on.   \n\n\nNote: * implies that the software should \nalways\n be deployed.\n\n\nDeployment Models:\n\n\nSingle Server:\n You can find deployment instructions for a single instance of the Gluu Server by following one of the links above for your preferred operating system. All single server deployments of the Gluu Server can be deployed in production with an unlimited number of users for free. Community support is available on our \npublic forum\n, or you can purchase \nBasic Support\n to open private tickets and enlist security and support consultations with Gluu engineers.   \n\n\nClusters:\n  To get started, you should try the Single Server deployment first. The Gluu Server Cluster packages require a a commercial license when you deploy a cluster in more than one location. There are three licenses:\n\n\n\n\nEcommerce:\n This license enables you to run a cluster consisting of two locations--for example, let's say you have one server on Amazon, and one server on Rackspace. For the first location, you'd use the \"master\" package, which is free. For the second location, you'd need to purchase the ecommerce license. This license does not include support. The \nCluster  Support\n package is highly recommended and includes one license for clusters of up to two locations.\n\n\nPremium:\n The premium cluster license includes three licenses for clusters of up to five locations. The premium license is included with \nPremium Support\n.\n\n\nEnterprise:\n The enterprise cluster license includes a site license for unlimited cluster deployments. It makes license management really easy because you can use the same license for all your environments, like development, QA and production.\n\n\n\n\nDashboard\n\n\nThe Gluu Server dashboard shows you metrics on the health and activity of your server(s). It also enables you to view logs, and to manage other common Gluu Server administration tasks. \n\n\nPerson Authentication\n\n\nCorrectly identifying people--authentication--is fundamental to Web and mobile security. Using the oxTrust web UI, you can configure built-in or custom business logic for authentication. \n\n\nBasic Authentication\n\n\nPasswords do not mitigate a lot of risk, but for many organizations, its still the place to start. With the Gluu Server you can use either an existing LDAP V3 respository like Active Directory,  or you can use the embedded Gluu Server OpenDJ server to store passwords. \nBasic\n is the \ndefault\n authentication mechanism shipped with every Gluu Server. \n\n\nCustom Authentication\n\n\nCustom Authentication\n enables an organization to utilize \ninterception scripts\n to achieve advanced levels of authentication. Using authentication interception scripts, your organization can call third-party APIs to enable multi-factor authentication (MFA), intrusion detection systems, or make use of multiple backend servers for authentication. \n\n\nThe Gluu Server currently ships with support for the FIDO U2F standard. Instructions for adding additional strong authentication mechanisms can be found \nhere\n. \n\n\nIdentity Management\n\n\nTo keep the Gluu Server up-to-date with the latest user information (a.k.a. attributes or claims), your organization can either \"push\" or \"pull\" identity data. In the \"pull\" mode, otherwise known as \nLDAP Syncronization or Cache Refresh\n, the Gluu Server can use an existing LDAP identity source like Microsoft Active Directory as the authoritative source of identity information. If you \"push\" identities to the Gluu Server, you can use the JSON/REST SCIM 1.1 or 2.0 API. \n\n\nLocal user management\n can also be performed inside the Gluu Server management interface.\n\n\nSingle Sign-On (SSO)\n\n\nNow it's time to connect your endpoints, portals or websites with your Gluu Server. The Gluu Server stack includes both a \nSAML\n and \nOpenID Connect Identity Provider\n which can be configured for single sign-on to any SAML 2.0 or OpenID Connect protected application.\n\n\nHere are a couple how-to's for creating SSO to popular apps:\n\n\n\n\nUsing SAML to get SSO with Google Apps\n  \n\n\nUsing SAML to get SSO with Salesforce.com\n  \n\n\n\n\nWeb \n API Access Management\n\n\nThe Gluu Server includes an \nUMA Authorization Server (AS)\n that can be used to enforce policies for access to any API or web resource. UMA is a profile of OAuth2 that is complimentary to OpenID Connect. UMA defines RESTful, JSON-based, standardized flows and constructs for access management.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/admin-guide/getting-started/#getting-started", 
            "text": "This document will show you how to get up and running with the Gluu Server. It is broken down into the following sections:   Overview       Deployment       Minimum Server Requirements:     OS Support     Available Components     Deployment Models       Dashboard     Person Authentication     Basic Authentication     Custom Authentication       Identity Management     Single Sign-On (SSO)     Web   API Access Management", 
            "title": "Getting Started"
        }, 
        {
            "location": "/admin-guide/getting-started/#overview", 
            "text": "The Gluu Server is an identity and access management suite comprised of free open source software (FOSS) components. Some of the software was written by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and some of the software we forked from existing open source projects like the Shibboleth SAML identity provider, Forgerock community release of OpenDJ, the Asimba SAML proxy, the CAS authentication server and many more components that are part of the linux distributions. Learn more about each of the open source licenses in use  here .  The full suite of software is distributed as linux packages that support either single server or clustered deployments. In order to deploy the clustered package to multiple locations, you'll need a commercial license. More about that topic below in  Deployment Models .", 
            "title": "Overview"
        }, 
        {
            "location": "/admin-guide/getting-started/#deployment", 
            "text": "The Gluu Server can be deployed on any physical or virtual server. Both distributions of the Gluu Server--Community Edition and Cluster--are distributed as containers. Community edition uses  chroot  containers, while the Cluster Edition uses  docker  containers. Container distribution enables Gluu to make sure that all the pieces are working together. If you actually had to integrate all the components of the Gluu Server together, it would take you a long time.   Minimum Server Requirements:  Depending on the size of your data and the number of concurrent authentications you want to be able to support, you may need more or less memory or CPU capacity. For Gluu Server Community Edition, we recommend at least 2 CPU units, 4 GB of RAM, and around 20GB of disk space. Monitor your system performance, and make sure its not swapping, in which case you should add more RAM, and increase the JVM size of tomcat.  OS Support:  We currently support and maintain package repositories for  Ubuntu ,  CentOS . Red Hat packages are in beta and will be available soon. Fedora and Debian packages are on the roadmap.  Available Components  When you deploy the Gluu Server, you will have the opportunity to specify which of the following softwares you want deployed on your server:   oxAuth:*  oxAuth provides endpoints for an OpenID Connect Identity Provider (IDP) and an UMA Authorization Server (AS). Both OpenID Connect and UMA are standard profiles of OAuth 2.0, used for single sign-on (SSO) and web and API access management, respectively.    oxTrust:*  oxTrust is the graphical user interface that is used for server management.   LDAP:*  The Gluu Server ships with a fork of the OpenDJ LDAP server. It is used to store attributes and server configurations locally.   Apache 2 web server:*  Apache 2 serves the web server for the Gluu Server. Without Apache 2, it's not possible to see the hostname from a browser.   Shibboleth 2 SAML IDP:  The Shibboleth server provides endpoints for a SAML Identity Provider (IDP). If you want to create single sign-on (SSO) to a SAML SP, you'll need a SAML IDP.   Asimba SAML Proxy:  The Asimba SAML proxy should be deployed on if your organization needs to consolidate inbound SAML authentication from the IDPs of partners to a single website or app.   CAS:  CAS is legacy at this point and should only be deployed if your organization has existing apps that can only support CAS for single sign-on.     Note: * implies that the software should  always  be deployed.  Deployment Models:  Single Server:  You can find deployment instructions for a single instance of the Gluu Server by following one of the links above for your preferred operating system. All single server deployments of the Gluu Server can be deployed in production with an unlimited number of users for free. Community support is available on our  public forum , or you can purchase  Basic Support  to open private tickets and enlist security and support consultations with Gluu engineers.     Clusters:   To get started, you should try the Single Server deployment first. The Gluu Server Cluster packages require a a commercial license when you deploy a cluster in more than one location. There are three licenses:   Ecommerce:  This license enables you to run a cluster consisting of two locations--for example, let's say you have one server on Amazon, and one server on Rackspace. For the first location, you'd use the \"master\" package, which is free. For the second location, you'd need to purchase the ecommerce license. This license does not include support. The  Cluster  Support  package is highly recommended and includes one license for clusters of up to two locations.  Premium:  The premium cluster license includes three licenses for clusters of up to five locations. The premium license is included with  Premium Support .  Enterprise:  The enterprise cluster license includes a site license for unlimited cluster deployments. It makes license management really easy because you can use the same license for all your environments, like development, QA and production.", 
            "title": "Deployment"
        }, 
        {
            "location": "/admin-guide/getting-started/#dashboard", 
            "text": "The Gluu Server dashboard shows you metrics on the health and activity of your server(s). It also enables you to view logs, and to manage other common Gluu Server administration tasks.", 
            "title": "Dashboard"
        }, 
        {
            "location": "/admin-guide/getting-started/#person-authentication", 
            "text": "Correctly identifying people--authentication--is fundamental to Web and mobile security. Using the oxTrust web UI, you can configure built-in or custom business logic for authentication.   Basic Authentication  Passwords do not mitigate a lot of risk, but for many organizations, its still the place to start. With the Gluu Server you can use either an existing LDAP V3 respository like Active Directory,  or you can use the embedded Gluu Server OpenDJ server to store passwords.  Basic  is the  default  authentication mechanism shipped with every Gluu Server.   Custom Authentication  Custom Authentication  enables an organization to utilize  interception scripts  to achieve advanced levels of authentication. Using authentication interception scripts, your organization can call third-party APIs to enable multi-factor authentication (MFA), intrusion detection systems, or make use of multiple backend servers for authentication.   The Gluu Server currently ships with support for the FIDO U2F standard. Instructions for adding additional strong authentication mechanisms can be found  here .", 
            "title": "Person Authentication"
        }, 
        {
            "location": "/admin-guide/getting-started/#identity-management", 
            "text": "To keep the Gluu Server up-to-date with the latest user information (a.k.a. attributes or claims), your organization can either \"push\" or \"pull\" identity data. In the \"pull\" mode, otherwise known as  LDAP Syncronization or Cache Refresh , the Gluu Server can use an existing LDAP identity source like Microsoft Active Directory as the authoritative source of identity information. If you \"push\" identities to the Gluu Server, you can use the JSON/REST SCIM 1.1 or 2.0 API.   Local user management  can also be performed inside the Gluu Server management interface.", 
            "title": "Identity Management"
        }, 
        {
            "location": "/admin-guide/getting-started/#single-sign-on-sso", 
            "text": "Now it's time to connect your endpoints, portals or websites with your Gluu Server. The Gluu Server stack includes both a  SAML  and  OpenID Connect Identity Provider  which can be configured for single sign-on to any SAML 2.0 or OpenID Connect protected application.  Here are a couple how-to's for creating SSO to popular apps:   Using SAML to get SSO with Google Apps     Using SAML to get SSO with Salesforce.com", 
            "title": "Single Sign-On (SSO)"
        }, 
        {
            "location": "/admin-guide/getting-started/#web-api-access-management", 
            "text": "The Gluu Server includes an  UMA Authorization Server (AS)  that can be used to enforce policies for access to any API or web resource. UMA is a profile of OAuth2 that is complimentary to OpenID Connect. UMA defines RESTful, JSON-based, standardized flows and constructs for access management.", 
            "title": "Web &amp; API Access Management"
        }, 
        {
            "location": "/admin-guide/deployment/", 
            "text": "Table of Contents\n \n\n\n\n\nGluu Server Installation\n \n\n\nAvailable Components\n\n\nHardware Guidance\n \n\n\nJava\n \n\n\nLDAP\n \n\n\nLicenses\n \n\n\n\n\nGluu Server Installation\n\n\nNote:\n Before deploying the Gluu Server, it may be helpful to review our \ngetting started\n document. \n\n\nSingle Server Deployments\n\n\nFor a one server deployment, the easiest way to install the Gluu Server is via one of our \nCentos\n or \nUbuntu\n packages.\n\n\nWe have currently tested deployment on Digital Ocean, Amazon Web Services, and Rackspace servers. We plan on testing deployment on Google Cloud and Azure next. \n\n\nCluster Deployments\n\n\nCommercial Gluu Server Cluster Packages are currently under development and not quite ready yet for primetime. You can learn more about the clustering project \nhere\n. \n\n\nAvailable Components\n\n\nWhen you deploy the Gluu Server, you will have the opportunity to specify which of the following softwares you want deployed on your server: \n\n\noxAuth:*\n oxAuth provides endpoints for an OpenID Connect Identity Provider (IDP) and an UMA Authorization Server (AS). Both OpenID Connect and UMA are standard profiles of OAuth 2.0, used for single sign-on (SSO) and web and API access management, respectively.  \n\n\noxTrust:*\n oxTrust is the graphical user interface that is used for server management. \n\n\nLDAP:*\n The Gluu Server ships with a fork of the OpenDJ LDAP server. It is used to store attributes and server configurations locally. \n\n\nApache 2 web server:*\n Apache 2 serves the web server for the Gluu Server. Without Apache 2, it's not possible to see the hostname from a browser. \n\n\nShibboleth 2 SAML IDP:\n The Shibboleth server provides endpoints for a SAML Identity Provider (IDP). If you want to create single sign-on (SSO) to a SAML SP, you'll need a SAML IDP. \n\n\nAsimba SAML Proxy:\n The Asimba SAML proxy should be deployed on if your organization needs to consolidate inbound SAML authentication from the IDPs of partners to a single website or app. \n\n\nCAS:\n CAS is legacy at this point and should only be deployed if your organization has existing apps that can only support CAS for single sign-on.   \n\n\nNote: * implies that the software should \nalways\n be deployed.\n\n\nSupport\n\n\nGluu offers both community and VIP support. Anyone can browse and open tickets on our \nsupport portal\n. For private support, expedited assistance, and strategic consultations, please \nschedule a meeting with us\n to discuss VIP support options.  \n\n\nHardware Guidance\n\n\nThe Gluu Server is very flexible, and can be used for a wide array of access management requirements. Depending on the size of your data, and the number of concurrent transactions you want to support, you may need more or less memory or CPU capacity. \n\n\nWith that said, if you are running all the Gluu Server services on one server (i.e. SAML, OAuth2, LDAP), we would recommend at least 2 CPU units, 4 GB of RAM and around 30GB of disk space. Not enough memory may produce some really weird bugs. \n\n\nFrom there, you may need to adjust the resources based on the requirements.  For an overview of Gluu performance considerations, see this \nGluu blog\n.  \n\n\nJava\n\n\nThe Gluu Server components have been tested with OpenJDK version 1.7 or later.\n\n\nLDAP\n\n\nThe Gluu Server uses LDAP for persistence to store oxTrust and oxAuth data, and to cache user entries.  The Gluu Server packages include \"Gluu OpenDJ\", which is our \nfork\n of OpenDJ 2.6.0, the last open source release by Forgerock.  It is possible to use any LDAP server, as long as you have the schema and security under control. \n\n\nWe publish the \nlatest schema\n in our community-edition-setup project. The schema that we publish for Gluu OpenDJ should also work for Forgerock OpenDJ, UnboundID LDAP server, and Oracle Directory Server Enterprise Edition (ODSEE). \n\n\nLicenses\n\n\nAll software used in the Gluu Server is free to use in production. All software developed by Gluu, including oxTrust and oxAuth, are held under an MIT License. Visit \nlicenses\n to learn more about the various licenses in use.", 
            "title": "Deployment"
        }, 
        {
            "location": "/admin-guide/deployment/#gluu-server-installation", 
            "text": "Note:  Before deploying the Gluu Server, it may be helpful to review our  getting started  document.   Single Server Deployments  For a one server deployment, the easiest way to install the Gluu Server is via one of our  Centos  or  Ubuntu  packages.  We have currently tested deployment on Digital Ocean, Amazon Web Services, and Rackspace servers. We plan on testing deployment on Google Cloud and Azure next.   Cluster Deployments  Commercial Gluu Server Cluster Packages are currently under development and not quite ready yet for primetime. You can learn more about the clustering project  here .", 
            "title": "Gluu Server Installation"
        }, 
        {
            "location": "/admin-guide/deployment/#available-components", 
            "text": "When you deploy the Gluu Server, you will have the opportunity to specify which of the following softwares you want deployed on your server:   oxAuth:*  oxAuth provides endpoints for an OpenID Connect Identity Provider (IDP) and an UMA Authorization Server (AS). Both OpenID Connect and UMA are standard profiles of OAuth 2.0, used for single sign-on (SSO) and web and API access management, respectively.    oxTrust:*  oxTrust is the graphical user interface that is used for server management.   LDAP:*  The Gluu Server ships with a fork of the OpenDJ LDAP server. It is used to store attributes and server configurations locally.   Apache 2 web server:*  Apache 2 serves the web server for the Gluu Server. Without Apache 2, it's not possible to see the hostname from a browser.   Shibboleth 2 SAML IDP:  The Shibboleth server provides endpoints for a SAML Identity Provider (IDP). If you want to create single sign-on (SSO) to a SAML SP, you'll need a SAML IDP.   Asimba SAML Proxy:  The Asimba SAML proxy should be deployed on if your organization needs to consolidate inbound SAML authentication from the IDPs of partners to a single website or app.   CAS:  CAS is legacy at this point and should only be deployed if your organization has existing apps that can only support CAS for single sign-on.     Note: * implies that the software should  always  be deployed.", 
            "title": "Available Components"
        }, 
        {
            "location": "/admin-guide/deployment/#support", 
            "text": "Gluu offers both community and VIP support. Anyone can browse and open tickets on our  support portal . For private support, expedited assistance, and strategic consultations, please  schedule a meeting with us  to discuss VIP support options.", 
            "title": "Support"
        }, 
        {
            "location": "/admin-guide/deployment/#hardware-guidance", 
            "text": "The Gluu Server is very flexible, and can be used for a wide array of access management requirements. Depending on the size of your data, and the number of concurrent transactions you want to support, you may need more or less memory or CPU capacity.   With that said, if you are running all the Gluu Server services on one server (i.e. SAML, OAuth2, LDAP), we would recommend at least 2 CPU units, 4 GB of RAM and around 30GB of disk space. Not enough memory may produce some really weird bugs.   From there, you may need to adjust the resources based on the requirements.  For an overview of Gluu performance considerations, see this  Gluu blog .", 
            "title": "Hardware Guidance"
        }, 
        {
            "location": "/admin-guide/deployment/#java", 
            "text": "The Gluu Server components have been tested with OpenJDK version 1.7 or later.", 
            "title": "Java"
        }, 
        {
            "location": "/admin-guide/deployment/#ldap", 
            "text": "The Gluu Server uses LDAP for persistence to store oxTrust and oxAuth data, and to cache user entries.  The Gluu Server packages include \"Gluu OpenDJ\", which is our  fork  of OpenDJ 2.6.0, the last open source release by Forgerock.  It is possible to use any LDAP server, as long as you have the schema and security under control.   We publish the  latest schema  in our community-edition-setup project. The schema that we publish for Gluu OpenDJ should also work for Forgerock OpenDJ, UnboundID LDAP server, and Oracle Directory Server Enterprise Edition (ODSEE).", 
            "title": "LDAP"
        }, 
        {
            "location": "/admin-guide/deployment/#licenses", 
            "text": "All software used in the Gluu Server is free to use in production. All software developed by Gluu, including oxTrust and oxAuth, are held under an MIT License. Visit  licenses  to learn more about the various licenses in use.", 
            "title": "Licenses"
        }, 
        {
            "location": "/admin-guide/certificates/", 
            "text": "Certificates\n\n\nMany of the components of the Gluu Server have cyrpto keys and X.509 certificates. There are many key formats, and keystore formats. Navigate to the sections below to find what you need for each of the Gluu Server components.\n\n\n\n\nAsimba\n   \n\n\nApache\n   \n\n\nOpenDJ\n     \n\n\noxAuth\n   \n\n\nShibboleth IDP\n   \n\n\n\n\nAsimba\n\n\nasimba.crt\n, \nasimba.csr\n, \nasimba.key\n, \nasimba.key.orig\n, \nasimba.pkcs12 and asimbaIDP.jks\n are associated with the Asimba SAML Proxy Server. If you install SAML Proxy Server ( Asimba ) in your Gluu Server, you have to deal with these cert and key. \n\n\nApache\n\n\nhttpd.crt\n, \nhttpd.csr\n, \nhttpd.key\n, \nhttpd.key.orig\n are SSL Apache related certs and keys. If you want to update your Apache SSL cert don't worry about the \n.csr\n and \n.key.orig\n.  \n\n\nOpenDJ\n\n\nopendj.crt\n is the public cert being used by oxAuth to make a connection to the internal Gluu-LDAP.\n\n\noxAuth\n\n\noxauth-web-keys.json\n is being used by Gluu's OpenID Connect \n UMA server. \n\n\nShibboleth IDP\n\n\nshibIDP.crt\n, \nshibIDP.csr\n, \nshibIDP.jks\n, \nshibIDP.key\n, \nshibIDP.key.orig\n, \nshibIDP.pkcs12\n are required if you use the Gluu Server's Shibboleth SAML server for SAML transactions. \n\n\nUpdating Certs\n\n\nIf you're using the Gluu Server CE binaries or latest Gluu Servers, you need to\nmanually update certificates and keys from \n/etc/certs/\n. Please note that your\nprivate key \ncan not be password protected\n and public key should be base64\nX.509. For example, in order to update Apache SSL cert:\n\n\n\n\nPush latest SSL httpd key and cert in \n/etc/certs\n.   \n\n\nRename them to \nhttpd.key\n and \nhttpd.crt\n respectively.    \n\n\nImport the DER format of your cert in \"cacert\" ( location in RHEL/CentOS CE: \n/etc/pki/java/\n, location in Ubuntu CE: \n/etc/ssl/certs/java\n ).    \n\n\nRestart your Gluu-server from outside the chroot container.   \n\n\n\n\nInstalling Intermediate Certificates\n\n\n\n\nLog into your Gluu Server container\n\n\nKeep your intermediate cert in \n/etc/certs/\n\n\nhttps_gluu.conf\n modification ( location: \n/etc/httpd/conf.d\n )\n    3.1 Add \nSSLCertificateChainFile /etc/certs/name_of_your_interm_root_cert.crt\n\n\nRestart \nhttpd\n\n\n\n\nOlder Gluu Server Versions\n\n\nIf you are using a previous version of the Gluu Server,\n you may have interfaces inside your server admin application to configure the followig certs:\n\n\n\n\nHTTPS\n   \n\n\nSAML\n   \n\n\nOpenID Connect", 
            "title": "Certificates"
        }, 
        {
            "location": "/admin-guide/certificates/#certificates", 
            "text": "Many of the components of the Gluu Server have cyrpto keys and X.509 certificates. There are many key formats, and keystore formats. Navigate to the sections below to find what you need for each of the Gluu Server components.   Asimba      Apache      OpenDJ        oxAuth      Shibboleth IDP", 
            "title": "Certificates"
        }, 
        {
            "location": "/admin-guide/certificates/#asimba", 
            "text": "asimba.crt ,  asimba.csr ,  asimba.key ,  asimba.key.orig ,  asimba.pkcs12 and asimbaIDP.jks  are associated with the Asimba SAML Proxy Server. If you install SAML Proxy Server ( Asimba ) in your Gluu Server, you have to deal with these cert and key.", 
            "title": "Asimba"
        }, 
        {
            "location": "/admin-guide/certificates/#apache", 
            "text": "httpd.crt ,  httpd.csr ,  httpd.key ,  httpd.key.orig  are SSL Apache related certs and keys. If you want to update your Apache SSL cert don't worry about the  .csr  and  .key.orig .", 
            "title": "Apache"
        }, 
        {
            "location": "/admin-guide/certificates/#opendj", 
            "text": "opendj.crt  is the public cert being used by oxAuth to make a connection to the internal Gluu-LDAP.", 
            "title": "OpenDJ"
        }, 
        {
            "location": "/admin-guide/certificates/#oxauth", 
            "text": "oxauth-web-keys.json  is being used by Gluu's OpenID Connect   UMA server.", 
            "title": "oxAuth"
        }, 
        {
            "location": "/admin-guide/certificates/#shibboleth-idp", 
            "text": "shibIDP.crt ,  shibIDP.csr ,  shibIDP.jks ,  shibIDP.key ,  shibIDP.key.orig ,  shibIDP.pkcs12  are required if you use the Gluu Server's Shibboleth SAML server for SAML transactions.", 
            "title": "Shibboleth IDP"
        }, 
        {
            "location": "/admin-guide/certificates/#updating-certs", 
            "text": "If you're using the Gluu Server CE binaries or latest Gluu Servers, you need to\nmanually update certificates and keys from  /etc/certs/ . Please note that your\nprivate key  can not be password protected  and public key should be base64\nX.509. For example, in order to update Apache SSL cert:   Push latest SSL httpd key and cert in  /etc/certs .     Rename them to  httpd.key  and  httpd.crt  respectively.      Import the DER format of your cert in \"cacert\" ( location in RHEL/CentOS CE:  /etc/pki/java/ , location in Ubuntu CE:  /etc/ssl/certs/java  ).      Restart your Gluu-server from outside the chroot container.", 
            "title": "Updating Certs"
        }, 
        {
            "location": "/admin-guide/certificates/#installing-intermediate-certificates", 
            "text": "Log into your Gluu Server container  Keep your intermediate cert in  /etc/certs/  https_gluu.conf  modification ( location:  /etc/httpd/conf.d  )\n    3.1 Add  SSLCertificateChainFile /etc/certs/name_of_your_interm_root_cert.crt  Restart  httpd", 
            "title": "Installing Intermediate Certificates"
        }, 
        {
            "location": "/admin-guide/certificates/#older-gluu-server-versions", 
            "text": "If you are using a previous version of the Gluu Server,  you may have interfaces inside your server admin application to configure the followig certs:   HTTPS      SAML      OpenID Connect", 
            "title": "Older Gluu Server Versions"
        }, 
        {
            "location": "/admin-guide/configuration/", 
            "text": "Table of Contents\n \n\n\n\n\nConfiguration\n   \n\n\nOrganization Configuration\n \n\n\nSystem Configuration\n \n\n\nManage Email Addresses\n \n\n\nSMTP Server Configuration\n   \n\n\noxTrust Configuration\n   \n\n\n\n\n\n\nManage Authentication\n   \n\n\nDefault Authentication Method\n   \n\n\n\n\n\n\nManage Custom Scripts\n   \n\n\nManage Registration\n   \n\n\nActivate Invitation Link\n \n\n\nDisable Captcha for Registration Form\n   \n\n\nConfigure Registration Form Attributes\n     \n\n\n\n\n\n\nAttributes\n \n\n\nCache Refresh Directory Integration\n \n\n\nCustomer Backend Key/Attributes\n   \n\n\nSource Backend LDAP Servers\n   \n\n\nInum LDAP Server\n \n\n\nAttributes Mapping\n \n\n\nCustomizing Behavior\n \n\n\n\n\n\n\nConfigure Log Viewer\n \n\n\nView Log File\n       \n\n\nStatus\n \n\n\n\n\nConfiguration\n\n\nThis section of the documentation includes instructions for configuring a number of the components of the Gluu Server in order to make the server fit for your organizational needs. \n\n\n\n\nOrganization Configuration\n\n\nThe organization configuration section contains the following options:  \n\n- \nSystem Configuration\n   \n\n- \nManage Email Addresses\n   \n\n- \nSMTP Server Configuration\n     \n\n- \noxTrust Configuration\n       \n\n\nSystem Configuration\n\n\nThis feature allows the Gluu system administrator to customize and implement various options such as \nCache Refresh\n, \nFederation Hosting\n, \nSCIM Support\n etc. \n\n\n\n\n\n\n\n\nWhite Pages:\n If the user intends to use the built-in White Pages of the Gluu Server, it can be enabled from the menu.\n\n\n\n\n\n\nFederation Hosting:\n The Federation hosting is enabled by default. However, the creation and management of federations can be complicated. Gluu offers an additional service called \nFederation Registry\n that makes the creation and management of identity federations simple and easy. \n\n\n\n\n\n\nSelf-Service Password Reset:\n The Self-Service Password Reset is disabled by default. For Self-Service Password Reset to work SMTP Server(see below) should be configured as well. Password reset link for your Gluu server should be something like: \"https://your.idp.link/identity/person/passwordReminder.htm\"\n\n\n\n\n\n\nCache Refresh:\n This is the mechanism which pulls and synchonises user information from a remote LDAP/Active Directory with the local LDAP of Gluu server. The Gluu server administrator needs to provide sufficient information including username and password before enabling this option. Before configuring Cache Refresh, you should read the \noverview here\n. After reading the overview, you c an learn about the Cache Refresh GUI tools \nhere\n.\n\n\n\n\n\n\nSCIM Support:\n If the organization already has an identity management or provisioning system in place, the SCIM protocol can be used to push and synchronise the existing identity data into the Gluu Server.\n\n\n\n\n\n\nDNS Server:\n The address to the DNS Server goes in this field.\n\n\n\n\n\n\nMaximum Log Size:\n This option can be used to mitigate the space issues within the Gluu Server. The Gluu Server automatically zips any log file which is bigger than the defined value in this field. \n\n\n\n\n\n\nManage Email Addresses\n\n\nThis feature allows the Gluu Server Administrator to manage notifications for the IdP.\n\n\n\n\n\n\n\n\nEmail for Centreon:\n Centreon is the server monitoring system used by Gluu. The email address in this field shall recieve various notifications from Centreon.\n\n\n\n\n\n\nEmail for Jira:\n The customers are not provided the jira access, and it will be removed from oxTrust soon. Please visit \nGluu Support\n for customer support.\n\n\n\n\n\n\nEmail for Billing:\n The email address in this field will receive the billing invoices from Gluu.\n\n\n\n\n\n\nEmail for Privacy:\n This email address will receive news and updates about the privacy related matters of Gluu.\n\n\n\n\n\n\nEmail for SVN:\n The IdP related configuration files are are saved in the \nGluu SVN\n. Configuration files are generally saved under \n/opt/\n and \n/etc/httpd/\n. The email address will get access to the checked-in files section of the corresponding IdP.\n\n\n\n\n\n\nSMTP Server Configuration\n\n\nThe Gluu server can communicate to any SMTP server specified in these fields. All Gluu Server related informats \n(cron daemon/logwatch/crash reports etc.)\n can be pushed to the desired Gluu Server Administrator using this feature.\n\n\n\n\n\n\n\n\nSMTP Host:\n Name of the SMTP Host server.\n\n\n\n\n\n\nFrom Name:\n Name of the Gluu Server Administrator.\n\n\n\n\n\n\nFrom Email Address:\n Email Address of the Gluu Server Administrator.\n\n\n\n\n\n\nRequired Authentication:\n If the SMTP server requires authentication every access, then please enable this option by ticking the checkbox.\n\n\n\n\n\n\nSMTP User Name:\n The username for the SMTP server goes in this field.\n\n\n\n\n\n\nSMTP Password:\n The password for the username above goes here. The username and password are used to access the SMTP server.\n\n\n\n\n\n\nRequires SSL:\n If the SMTP Server has SSL availability, then enable this option by ticking the checkbox.\n\n\n\n\n\n\nSMTP Port:\n The SMTP Host server port number must be listed here.\n\n\n\n\n\n\noxTrust Configuration\n\n\nThis feature provides options to add various changes in the Gluu Server User Interface. Gluu Server Administrator can add Title, Display Name or evern modify the Web User Interface color and logo from this section.\n\n\n\n\n\n\nTitle:\n The Web User Interface title can be modified with this link.\n\n\n\n\n\n\n\n\n\n\nDisplay Name:\n This is the display name for the Gluu Server User Interface. However, this option is yet to be tested properly.\n\n\n\n\n\n\nShort Name:\n This feature has not been tested yet.\n\n\n\n\n\n\nDescription:\n This feature is yet to be tested for any change in the IdP.\n\n\n\n\n\n\nLogin Page Message:\n The login page now uses oxAuth Web UI and the changes made in this field will not affect the IdP.\n\n\n\n\n\n\nWelcome Title Text:\n The Gluu Server Administrator can add custom welcome text tile with this feature.\n\n\n\n\n\n\n\n\n\n\nWelcome Page Message:\n This feature can be used to add various messages and shortcuts in the welcome message.\n\n\n\n\n\n\n\n\n\n\nManager Group:\n Gluu server has a single manager group. The users under the manager group can use the Web User Interface to operate the Gluu Server. There is no limit to the users that can be added to the manager group.\n\n\n\n\n\n\nOrganization Logo:\n The orgaziation logo can be uploaded and activated from the configuration menu.\n\n\n\n\n\n\nOrganization Favicon:\n This feature can be used to change the organization favicon, if necessary.\n\n\n\n\n\n\nMenu Color:\n This is the menu color picker for the Gluu Server User Interface. The color used in the demo screenshots is Green.\n\n\n\n\n\n\nManage Authentication\n\n\nThis section allows the Gluu Server Administrator to define how and where the server should connect to authenticate users. If it is a remote LDAP/Active Directory server, the values are required. The values can also be used if the organization is using the local LDAP for authentication. \n\n\n\n\n\n\n\n\nDeactivate:\n This button \nDeactivates/Activates\n the Gluu Server accessibility for authentication.\n\n\n\n\n\n\nName:\n This field contains the name of the authentication server.\n\n\n\n\n\n\nBind DN:\n The \nUsername\n for the authentication server (local LDAP/remote LDAP/remote Active Directory) goes here.\n\n\n\n\n\n\nUse SSL:\n If the authentication server requires a secured port (i.e. 636) then this option should be activated using the checkbox.\n\n\n\n\n\n\nMax Connections:\n This option can be used to define the total number of simultaneous connections allowed for reading local LDAP/remote Active Directory/remote LDAP.\n\n\n\n\n\n\nServer:\n The unique name of the authentication server and port number (i.e. auth.company.org:636) goes here.\n\n\n\n\n\n\nBase DN:\n Add base DNs in this field to allow the Gluu Server to connect and search the LDAP server. Every directory tree should be added separately using the \nAdd Base DN\n option.\n\n\n\n\n\n\nPrimary Key:\n This field contains the primary key to connect to the authentication server (i.e. SAMAccountName/uid/mail etc).\n\n\n\n\n\n\nLocal Primary Key:\n This field contains the internal LDAP primary key of the Gluu Server. Gererally the key is either the \nuid\n or the \nmail\n.\n\n\n\n\n\n\nEnabled:\n This checkbos is used to enable the keys that are inserted in their respective fields.\n\n\n\n\n\n\nChange Bind Password:\n This button can be used to assign a password to authenticate the \nAuthentication Server\n.\n\n\n\n\n\n\nTest LDAP Connection:\n This button checks whether the provided information can connect to the authentication server. The scan is real time and it is advised to use it for the Gluu Server Administrators.\n\n\n\n\n\n\nDefault Authentication Method\n\n\nThis allows the Gluu Server Administrator to select the default authentication mode and level for person authentication. Both are set to \"Default\" until additional authentication mechanisms are enabled via \ncustom scripts\n. \n\n\n\n\nManage Custom Scripts\n\n\nThe latest edition of the Gluu Server introduced a new Configuration section called \nManage Custom Scripts\n. This is a single place where the server administrator can manage and implement interception scripts to customize the behavior of the Gluu Server. \n\n\n\n\nCurrently, there are interception scripts to customize the following functionalities:      \n\n\n\n\nApplication Session Management\n        \n\n\nAuthentication\n     \n\n\nAuthorization\n  \n\n\nCache Refresh\n  \n\n\nClient Registration\n  \n\n\nID Generation\n  \n\n\nUpdate User\n  \n\n\nUser Registration\n  \n\n\n\n\nDue to the significance of custom interception scripts in the Gluu Server, we have dedicated a separate folder within the docs to more comprehensivley go over \nhow to use them\n. \n\n\nManage Registration\n\n\n\n\nFrom the Manage Registration interface, the Gluu Server admin can customize the self-registration workflow. Each option will be covered individually below.\n\n\nThere are other ways of creating accounts within the Gluu Server, including: SCIM, Cache Refresh, Manual User Management, and Automatic Enrollment as part of custom authentication (Inbound SAML). Except Cache Refresh, which is covered \nhere\n, those additonal methods are covered within the \nUser Management\n portion of the documentation.\n\n\nActivate Invitation Link\n\n\nWhen active, the Invitation Links feature allows the server admin to control who can register an account by issuing a unique registration link and sending it to the desired new users.\n\n\nAny person who knows the link will be able to register an account (as long as the link is not expired). Expired Links are deleted according to \"invite codes expiration process\" policy, together with any unconfirmed accounts if said link is moderated.\n\n\nInvitation Links can be optionally made \"moderated\" and a number of moderators can be assigned to the link from among registered users. In this case any newly registered users who used this link will not be immediately able to use their account until their registration is approved by the moderator of their link.\n\n\nUpon activating Invitation Links Management within the interface, you will be presented with the following option:    \n\n\n\n\nRun invite codes expiration process every\n: This feature allows you to configure how often oxTrust will purge expired invitation links from the system. \n\n\nEnable registration without invitation\n: Allows public registration even when Invitation Links are used.\n\n\nEnable account expiration\n: Allows the admin to configure an expiration policy for registered accounts. \n\n\nAccounts expire after\n: Provides interface to set account expiration period and how often to run the expiration process. After this period registered accounts will be subject to invalidation during the next account expiration process run.\n\n\n\n\n\n\n\n\nDisable Captcha for registration form\n\n\nUpon activating this feature, the default Captcha will be removed from the registration form. \n\n\nConfigure Registration Form Attributes\n\n\nBy default, there are a limited number of fields present in the self-registration form. If more attributes are needed they can be added in this section of Registration Management. Once you activate this feature, just start typing the attribute name in the Attributes Filter and then add desired attributes to the right column and click \"Update\". \n\n\nAttributes\n\n\nAn \nActive\n attribute list can be seen from the Configuration \n Attributes section.\n\n\n\n\nThe Gluu Server has a large LDAP tree which includes all standard attributes. It is not necessary for all of them to be \nActive\n. The active LDAP trees can be sorted using the \nShow only Active Attributes\n link.\n\n\n\n\nThe Gluu Server Administrator can make changes, such as changing the status to active/inactive, to an attribute after clicking on it.\n\n\n\n\nAdditional attributes can be added from the Gluu Server GUI, oxTrust, by clicking the \nAdd Attribute\n button. On clicking the \nAdd Attribute\n button, the following screen shall appear.\n\n\n\n\n\n\n\n\nName:\n This field defines the name of the custom attribute which must be unique in the Gluu Server LDAP tree.\n\n\n\n\n\n\nSAML1 URI:\n This field contains the SAML1 URI for the custom attribute.\n\n\n\n\n\n\nSAML2 URI:\n This field contains the SAML2 URI for the custom attribute.\n\n\n\n\n\n\nDisplay Name:\n Thi display name can be anything that is human readable.\n\n\n\n\n\n\nType:\n The attribute type should be selected from the drop-down meny. There are four attribute types supported by Gluu:    \n\n\n\n\nText   \n\n\nNumeric    \n\n\nPhoto  \n\n\n\n\nDate   \n\n\n\n\n\n\nEdit Type:\n This field defines the user who has access to edit the specific attribute.\n\n\n\n\n\n\nView Type:\n This field defines the user who can view thie attribute.\n\n\n\n\n\n\nPrivacy Level:\n Please select the desired privacy level from the drop-down menu. The privacy level has a specific range of 1 to 5.\n\n\n\n\n\n\nMultivalued:\n Please select miltivalue in this field if the attribute contains more than one value.\n\n\n\n\n\n\nSCIM Attributes:\n If the attribute is a part of SCIM architecture select true.\n\n\n\n\n\n\nDescription:\n This contains a few words to describe the attribute.\n\n\n\n\n\n\nStatus:\n The status, when selected active, will release and publish the attribute in IdPThe status, when selected active, will release and publish the attribute in IdP.\n\n\n\n\n\n\nCache Refresh\n\n\nCache Refresh\n was built by Gluu to pull user information from a backend customer Active Directory/LDAP Server. Cache refresh dynamically synchronises user information from the backend data source of the customer to the Gluu Server in order to maximize performance. This feature is sensitive in nature and any incorrect action may result in loss of data within the Gluu Server. Before configuring Cache Refresh, you should read the \noverview here\n. For any questions relating to Cache Refresh functionality, you can seek assistance from \nGluu Support\n. \n\n\n\n\n\n\n\n\nLast Run:\n The date and time of the latest cache refresh cycle completion is shown in the last run.\n\n\n\n\n\n\nUpdates at the Last Run:\n This shows the total number of users who have been updated in the last Cache Refresh cycle. For example an user who has any of his attribute updated will show up here.\n\n\n\n\n\n\nProblem at the Last Run:\n This shows the number of users who have been rejected by the Gluu Server during the update. If there are any rejections, please contact Gluu Support for clarification and help.\n\n\n\n\n\n\n\n\nCustomer Backend Key and Attributes\n\n\n\n\n\n\n\n\nKey Attribute:\n This is the unique key attribute of backend Active Directory/LDAP Server such as sAMAccountname for any Active Directory.\n\n\n\n\n\n\nObject Class:\n This contains the Object Classes of the backend Active Directory/LDAP which has permission to talk to Gluu Server Cache Refresh such as person, organizationalPerson, user etc.\n\n\n\n\n\n\nSource Attribute:\n This contains the list of attributes which will be pulled and read by the Gluu Server.\n\n\n\n\n\n\nCustom LDAP Filter:\n If there is any custom search required, this filtering mechanism can be used such as \"sn=*\" where the value of this field ensures that every user must contain an attribute named SN.\n\n\n\n\n\n\nSource Backend LDAP Servers\n\n\n\n\nThis section allows the Gluu Server to connect to the backend Active Directory/LDAP server of the organization.\n\n\n\n\n\n\nName:\n Please input \nsource\n as the value.\n\n\n\n\n\n\nUse Anonymous Bind:\n Some customers do now allow username/password connections to their backend server. Enable this option if this applies to your organization.\n\n\n\n\n\n\nBind DN:\n This contains the username to connect to the backend server. You need to use full DN here. As for example, \ncn=gluu,dc=company,dc=org\n\n\n\n\n\n\nUse SSL:\n Use this feature if the backend server allows SSL connectivity.\n\n\n\n\n\n\nMax Connections:\n This value defines the maximum number of connection that are allowed to read the backend Active Directory/LDAP server. It is recommended to keep the value 2 or three.\n\n\n\n\n\n\nServer:\n This contains the backend Active Directory/LDAP server hostname with port i.e. backend.organization.com:389. If organization has a failover server, click \nAdd Server\n and more hostnames with port.\n\n\n\n\n\n\nBase DN:\n This contains the location of the Active Directory/LDAP tree from where the Gluu Server shall read the user informaiton.\n\n\n\n\n\n\nEnabled:\n This checkbox is to save and push the changes and only to be used when the server administrator has entered all the required values.\n\n\n\n\n\n\nChange Bind Password:\n This can be used for a new password or to change any existing password.\n\n\n\n\n\n\nIf any organization has multiple Active Directory/LDAP server, click on \nAdd source LDAP server\n and add the additional server information. Please remember that a \nfailover server\n is not a new server.\n\n\nInum LDAP Server\n\n\n\n\nThis section of the application allows the server administrator to connect to the internal LDAP of the Gluu Server. Please contact Gluu Support for the values for this section.\n\n\n\n\n\n\nName:\n This contains the name of the Gluu LDAP server.\n\n\n\n\n\n\nBind DN:\n This field contains the username to connect to the internal server.\n\n\n\n\n\n\nUse SSL:\n Please tick the ckeckbox because the SSL must be activated.\n\n\n\n\n\n\nMax Connections:\n The recommended number of connections is 2.\n\n\n\n\n\n\nServer:\n The hostname of the server with IP should be put here.\n\n\n\n\n\n\nBase DN:\n This contains the Gluu Server LDAP tree which is allowed to access the user information.\n\n\n\n\n\n\nEnabled:\n Enabling this feature saves the values inside the gluu server.\n\n\n\n\n\n\nChange Bind Password:\n This option can be used to bind/change the password to connect to the internal LDAP of the Gluu Server.\n\n\n\n\n\n\nRefresh Method:\n The Gluu Server allows the Server Administrator to apply two types of Cache Refresh mechanism (i) VDS Method and (ii) Copy Method.\n\n\n\n\n\n\nVDS Method:\n Any organization with a database like \nmysql\n can use the VDS method. This option can be enabled via the dropdown menu in Refresh Method option.\n\n\n\n\n\n\n\n\n\n\nCopy Method:\n If the organization has any kind of Active Directory/LDAP server, they are strongly recommened to use the \nCopy Method\n from the dropdown menu.\n\n\n\n\n\n\nAttributes Mapping\n\n\nWhen the Copy method is selected, a section for Attribute mapping will be exposed. In this section, the Gluu Server Administrator can map any attribute from the backend Active Directory/LDAP to the LDAP cache of the Gluu Server.\n\n\n\n\nIn the source attribute to destination attribute mapping field, you can enter the source attribute value on the left, and the destination attribute on the right. In other words, you can specify what the attribute is on the backend in the left field, and what it should be rendered as when it comes through the Gluu Server in the right field. \n\n\nThe Administrator can select any Cache Refresh Method according to the backend Active Directory/LDAP server, but there are some essential values for both types of cache refresh method. The values are given below.\n\n\n\n\n\n\nPooling Interval (Minutes):\n This is the vnterval value for running the Cache Refresh mechanism in the Gluu Server. It is recommended to be kept higher than 15 Minutes.\n\n\n\n\n\n\nScript File Name:\n Gluu Server cache refresh can accept any kind of Jython Script which might help calculate any custom/complex attribute i.e. eduPersonScopedAffiliation calculation is highly targeted field where such scripts can be used. For more information please contact Gluu Support.\n\n\n\n\n\n\nSnapshot Folder:\n Every cycle of of Gluu Server Cache Refresh cycle save an overall snapshot and problem-list record on a specified location. This is where the Gluu Server Administrator can specigy the location. A Gluu Server administrator can easily decide whether cache refresh has synchronised all users or not. Generally the rejected users are enclosed in the problem-list file. An overall report is displayed at the top of the cache refresh page with headings \nUpdated at the last run\n and \nProblems at the last run.\n\n\n\n\n\n\nSnapshot Count:\n This defines the total number of snapshots that are allowed to be saved in the hard drive of the VM. It is recommended to be kept to 20 shapshots.\n\n\n\n\n\n\nLatest Gluu Servers ( including Community Edition ) introduced two updgraded sections here. \n\n\n\n\n\n\nServer IP Address:\n Include the IP of your Gluu Server here. This feature basically added to run Cache Refresh mechanism perfectly in clustered environment.\n\n\n\n\n\n\nRemoved Script File Name location:\n New version of Gluu Server allows Gluu Server Administrator to manage your custom scripts with more interctive section under configuration named \"\nManage Custom Scripts\n\"\n\n\n\n\n\n\nUpdate:\n This button is to push the changes in the Gluu Server and it should be hit only when the values have been entered.\n\n\n\n\n\n\nUpdate and Validate Script:\n This button is used to test the operation and integrity of any custom script such as a Jython Script.\n\n\n\n\n\n\nCustomizing Behavior\n\n\nSpecifics about the behavior of Cache Refresh can be customized within the custom scripts section. Please see more information \nhere\n\n\nConfigure Log Viewer\n\n\nGluu Server has the facility to read log files using the GUI. The log file can be displayed from the Web UI with a few clicks of the mouse. This feature can be enabled from the configuration menu clicking \nConfiguration --\n Configure Log Viewer.\n\n\n\n\nClicking on \nAdd log template\n will bring two boxes. The boxes on the left contains the name/description of the log file, and the right boxes contain the path of the log file such as \n/opt/tomcat/logs/demo.log.\n\n\nView Log File\n\n\nThe log files configured in the earlier section can be viewed using the \nView log file\n feature. This feature can be accessed through the configuration menu using \nConfiguration --\n View Log File.\n\n\n\n\nThe \nDisplay last lines count\n field contains the lines that will be displayed in the Web GUI. If the field contains the value \n400\n, then the Gluu Server will show the last 400 lines of the log in the GUI. The screenshot below shows an example.\n\n\n\n\nStatus\n\n\n\nThe Status section provides a high level overview of server metrics. The included values are straightforward and shouldn't require any further explanation.", 
            "title": "Configuration"
        }, 
        {
            "location": "/admin-guide/configuration/#configuration", 
            "text": "This section of the documentation includes instructions for configuring a number of the components of the Gluu Server in order to make the server fit for your organizational needs.", 
            "title": "Configuration"
        }, 
        {
            "location": "/admin-guide/configuration/#organization-configuration", 
            "text": "The organization configuration section contains the following options:   \n-  System Configuration     \n-  Manage Email Addresses     \n-  SMTP Server Configuration       \n-  oxTrust Configuration", 
            "title": "Organization Configuration"
        }, 
        {
            "location": "/admin-guide/configuration/#system-configuration", 
            "text": "This feature allows the Gluu system administrator to customize and implement various options such as  Cache Refresh ,  Federation Hosting ,  SCIM Support  etc.      White Pages:  If the user intends to use the built-in White Pages of the Gluu Server, it can be enabled from the menu.    Federation Hosting:  The Federation hosting is enabled by default. However, the creation and management of federations can be complicated. Gluu offers an additional service called  Federation Registry  that makes the creation and management of identity federations simple and easy.     Self-Service Password Reset:  The Self-Service Password Reset is disabled by default. For Self-Service Password Reset to work SMTP Server(see below) should be configured as well. Password reset link for your Gluu server should be something like: \"https://your.idp.link/identity/person/passwordReminder.htm\"    Cache Refresh:  This is the mechanism which pulls and synchonises user information from a remote LDAP/Active Directory with the local LDAP of Gluu server. The Gluu server administrator needs to provide sufficient information including username and password before enabling this option. Before configuring Cache Refresh, you should read the  overview here . After reading the overview, you c an learn about the Cache Refresh GUI tools  here .    SCIM Support:  If the organization already has an identity management or provisioning system in place, the SCIM protocol can be used to push and synchronise the existing identity data into the Gluu Server.    DNS Server:  The address to the DNS Server goes in this field.    Maximum Log Size:  This option can be used to mitigate the space issues within the Gluu Server. The Gluu Server automatically zips any log file which is bigger than the defined value in this field.", 
            "title": "System Configuration"
        }, 
        {
            "location": "/admin-guide/configuration/#manage-email-addresses", 
            "text": "This feature allows the Gluu Server Administrator to manage notifications for the IdP.     Email for Centreon:  Centreon is the server monitoring system used by Gluu. The email address in this field shall recieve various notifications from Centreon.    Email for Jira:  The customers are not provided the jira access, and it will be removed from oxTrust soon. Please visit  Gluu Support  for customer support.    Email for Billing:  The email address in this field will receive the billing invoices from Gluu.    Email for Privacy:  This email address will receive news and updates about the privacy related matters of Gluu.    Email for SVN:  The IdP related configuration files are are saved in the  Gluu SVN . Configuration files are generally saved under  /opt/  and  /etc/httpd/ . The email address will get access to the checked-in files section of the corresponding IdP.", 
            "title": "Manage Email Addresses"
        }, 
        {
            "location": "/admin-guide/configuration/#smtp-server-configuration", 
            "text": "The Gluu server can communicate to any SMTP server specified in these fields. All Gluu Server related informats  (cron daemon/logwatch/crash reports etc.)  can be pushed to the desired Gluu Server Administrator using this feature.     SMTP Host:  Name of the SMTP Host server.    From Name:  Name of the Gluu Server Administrator.    From Email Address:  Email Address of the Gluu Server Administrator.    Required Authentication:  If the SMTP server requires authentication every access, then please enable this option by ticking the checkbox.    SMTP User Name:  The username for the SMTP server goes in this field.    SMTP Password:  The password for the username above goes here. The username and password are used to access the SMTP server.    Requires SSL:  If the SMTP Server has SSL availability, then enable this option by ticking the checkbox.    SMTP Port:  The SMTP Host server port number must be listed here.", 
            "title": "SMTP Server Configuration"
        }, 
        {
            "location": "/admin-guide/configuration/#oxtrust-configuration", 
            "text": "This feature provides options to add various changes in the Gluu Server User Interface. Gluu Server Administrator can add Title, Display Name or evern modify the Web User Interface color and logo from this section.    Title:  The Web User Interface title can be modified with this link.      Display Name:  This is the display name for the Gluu Server User Interface. However, this option is yet to be tested properly.    Short Name:  This feature has not been tested yet.    Description:  This feature is yet to be tested for any change in the IdP.    Login Page Message:  The login page now uses oxAuth Web UI and the changes made in this field will not affect the IdP.    Welcome Title Text:  The Gluu Server Administrator can add custom welcome text tile with this feature.      Welcome Page Message:  This feature can be used to add various messages and shortcuts in the welcome message.      Manager Group:  Gluu server has a single manager group. The users under the manager group can use the Web User Interface to operate the Gluu Server. There is no limit to the users that can be added to the manager group.    Organization Logo:  The orgaziation logo can be uploaded and activated from the configuration menu.    Organization Favicon:  This feature can be used to change the organization favicon, if necessary.    Menu Color:  This is the menu color picker for the Gluu Server User Interface. The color used in the demo screenshots is Green.", 
            "title": "oxTrust Configuration"
        }, 
        {
            "location": "/admin-guide/configuration/#manage-authentication", 
            "text": "This section allows the Gluu Server Administrator to define how and where the server should connect to authenticate users. If it is a remote LDAP/Active Directory server, the values are required. The values can also be used if the organization is using the local LDAP for authentication.      Deactivate:  This button  Deactivates/Activates  the Gluu Server accessibility for authentication.    Name:  This field contains the name of the authentication server.    Bind DN:  The  Username  for the authentication server (local LDAP/remote LDAP/remote Active Directory) goes here.    Use SSL:  If the authentication server requires a secured port (i.e. 636) then this option should be activated using the checkbox.    Max Connections:  This option can be used to define the total number of simultaneous connections allowed for reading local LDAP/remote Active Directory/remote LDAP.    Server:  The unique name of the authentication server and port number (i.e. auth.company.org:636) goes here.    Base DN:  Add base DNs in this field to allow the Gluu Server to connect and search the LDAP server. Every directory tree should be added separately using the  Add Base DN  option.    Primary Key:  This field contains the primary key to connect to the authentication server (i.e. SAMAccountName/uid/mail etc).    Local Primary Key:  This field contains the internal LDAP primary key of the Gluu Server. Gererally the key is either the  uid  or the  mail .    Enabled:  This checkbos is used to enable the keys that are inserted in their respective fields.    Change Bind Password:  This button can be used to assign a password to authenticate the  Authentication Server .    Test LDAP Connection:  This button checks whether the provided information can connect to the authentication server. The scan is real time and it is advised to use it for the Gluu Server Administrators.", 
            "title": "Manage Authentication"
        }, 
        {
            "location": "/admin-guide/configuration/#default-authentication-method", 
            "text": "This allows the Gluu Server Administrator to select the default authentication mode and level for person authentication. Both are set to \"Default\" until additional authentication mechanisms are enabled via  custom scripts .", 
            "title": "Default Authentication Method"
        }, 
        {
            "location": "/admin-guide/configuration/#manage-custom-scripts", 
            "text": "The latest edition of the Gluu Server introduced a new Configuration section called  Manage Custom Scripts . This is a single place where the server administrator can manage and implement interception scripts to customize the behavior of the Gluu Server.    Currently, there are interception scripts to customize the following functionalities:         Application Session Management           Authentication        Authorization     Cache Refresh     Client Registration     ID Generation     Update User     User Registration      Due to the significance of custom interception scripts in the Gluu Server, we have dedicated a separate folder within the docs to more comprehensivley go over  how to use them .", 
            "title": "Manage Custom Scripts"
        }, 
        {
            "location": "/admin-guide/configuration/#manage-registration", 
            "text": "From the Manage Registration interface, the Gluu Server admin can customize the self-registration workflow. Each option will be covered individually below.  There are other ways of creating accounts within the Gluu Server, including: SCIM, Cache Refresh, Manual User Management, and Automatic Enrollment as part of custom authentication (Inbound SAML). Except Cache Refresh, which is covered  here , those additonal methods are covered within the  User Management  portion of the documentation.", 
            "title": "Manage Registration"
        }, 
        {
            "location": "/admin-guide/configuration/#activate-invitation-link", 
            "text": "When active, the Invitation Links feature allows the server admin to control who can register an account by issuing a unique registration link and sending it to the desired new users.  Any person who knows the link will be able to register an account (as long as the link is not expired). Expired Links are deleted according to \"invite codes expiration process\" policy, together with any unconfirmed accounts if said link is moderated.  Invitation Links can be optionally made \"moderated\" and a number of moderators can be assigned to the link from among registered users. In this case any newly registered users who used this link will not be immediately able to use their account until their registration is approved by the moderator of their link.  Upon activating Invitation Links Management within the interface, you will be presented with the following option:       Run invite codes expiration process every : This feature allows you to configure how often oxTrust will purge expired invitation links from the system.   Enable registration without invitation : Allows public registration even when Invitation Links are used.  Enable account expiration : Allows the admin to configure an expiration policy for registered accounts.   Accounts expire after : Provides interface to set account expiration period and how often to run the expiration process. After this period registered accounts will be subject to invalidation during the next account expiration process run.", 
            "title": "Activate Invitation Link"
        }, 
        {
            "location": "/admin-guide/configuration/#disable-captcha-for-registration-form", 
            "text": "Upon activating this feature, the default Captcha will be removed from the registration form.", 
            "title": "Disable Captcha for registration form"
        }, 
        {
            "location": "/admin-guide/configuration/#configure-registration-form-attributes", 
            "text": "By default, there are a limited number of fields present in the self-registration form. If more attributes are needed they can be added in this section of Registration Management. Once you activate this feature, just start typing the attribute name in the Attributes Filter and then add desired attributes to the right column and click \"Update\".", 
            "title": "Configure Registration Form Attributes"
        }, 
        {
            "location": "/admin-guide/configuration/#attributes", 
            "text": "An  Active  attribute list can be seen from the Configuration   Attributes section.   The Gluu Server has a large LDAP tree which includes all standard attributes. It is not necessary for all of them to be  Active . The active LDAP trees can be sorted using the  Show only Active Attributes  link.   The Gluu Server Administrator can make changes, such as changing the status to active/inactive, to an attribute after clicking on it.   Additional attributes can be added from the Gluu Server GUI, oxTrust, by clicking the  Add Attribute  button. On clicking the  Add Attribute  button, the following screen shall appear.     Name:  This field defines the name of the custom attribute which must be unique in the Gluu Server LDAP tree.    SAML1 URI:  This field contains the SAML1 URI for the custom attribute.    SAML2 URI:  This field contains the SAML2 URI for the custom attribute.    Display Name:  Thi display name can be anything that is human readable.    Type:  The attribute type should be selected from the drop-down meny. There are four attribute types supported by Gluu:       Text     Numeric      Photo     Date       Edit Type:  This field defines the user who has access to edit the specific attribute.    View Type:  This field defines the user who can view thie attribute.    Privacy Level:  Please select the desired privacy level from the drop-down menu. The privacy level has a specific range of 1 to 5.    Multivalued:  Please select miltivalue in this field if the attribute contains more than one value.    SCIM Attributes:  If the attribute is a part of SCIM architecture select true.    Description:  This contains a few words to describe the attribute.    Status:  The status, when selected active, will release and publish the attribute in IdPThe status, when selected active, will release and publish the attribute in IdP.", 
            "title": "Attributes"
        }, 
        {
            "location": "/admin-guide/configuration/#cache-refresh", 
            "text": "Cache Refresh  was built by Gluu to pull user information from a backend customer Active Directory/LDAP Server. Cache refresh dynamically synchronises user information from the backend data source of the customer to the Gluu Server in order to maximize performance. This feature is sensitive in nature and any incorrect action may result in loss of data within the Gluu Server. Before configuring Cache Refresh, you should read the  overview here . For any questions relating to Cache Refresh functionality, you can seek assistance from  Gluu Support .      Last Run:  The date and time of the latest cache refresh cycle completion is shown in the last run.    Updates at the Last Run:  This shows the total number of users who have been updated in the last Cache Refresh cycle. For example an user who has any of his attribute updated will show up here.    Problem at the Last Run:  This shows the number of users who have been rejected by the Gluu Server during the update. If there are any rejections, please contact Gluu Support for clarification and help.", 
            "title": "Cache Refresh"
        }, 
        {
            "location": "/admin-guide/configuration/#customer-backend-key-and-attributes", 
            "text": "Key Attribute:  This is the unique key attribute of backend Active Directory/LDAP Server such as sAMAccountname for any Active Directory.    Object Class:  This contains the Object Classes of the backend Active Directory/LDAP which has permission to talk to Gluu Server Cache Refresh such as person, organizationalPerson, user etc.    Source Attribute:  This contains the list of attributes which will be pulled and read by the Gluu Server.    Custom LDAP Filter:  If there is any custom search required, this filtering mechanism can be used such as \"sn=*\" where the value of this field ensures that every user must contain an attribute named SN.", 
            "title": "Customer Backend Key and Attributes"
        }, 
        {
            "location": "/admin-guide/configuration/#source-backend-ldap-servers", 
            "text": "This section allows the Gluu Server to connect to the backend Active Directory/LDAP server of the organization.    Name:  Please input  source  as the value.    Use Anonymous Bind:  Some customers do now allow username/password connections to their backend server. Enable this option if this applies to your organization.    Bind DN:  This contains the username to connect to the backend server. You need to use full DN here. As for example,  cn=gluu,dc=company,dc=org    Use SSL:  Use this feature if the backend server allows SSL connectivity.    Max Connections:  This value defines the maximum number of connection that are allowed to read the backend Active Directory/LDAP server. It is recommended to keep the value 2 or three.    Server:  This contains the backend Active Directory/LDAP server hostname with port i.e. backend.organization.com:389. If organization has a failover server, click  Add Server  and more hostnames with port.    Base DN:  This contains the location of the Active Directory/LDAP tree from where the Gluu Server shall read the user informaiton.    Enabled:  This checkbox is to save and push the changes and only to be used when the server administrator has entered all the required values.    Change Bind Password:  This can be used for a new password or to change any existing password.    If any organization has multiple Active Directory/LDAP server, click on  Add source LDAP server  and add the additional server information. Please remember that a  failover server  is not a new server.", 
            "title": "Source Backend LDAP Servers"
        }, 
        {
            "location": "/admin-guide/configuration/#inum-ldap-server", 
            "text": "This section of the application allows the server administrator to connect to the internal LDAP of the Gluu Server. Please contact Gluu Support for the values for this section.    Name:  This contains the name of the Gluu LDAP server.    Bind DN:  This field contains the username to connect to the internal server.    Use SSL:  Please tick the ckeckbox because the SSL must be activated.    Max Connections:  The recommended number of connections is 2.    Server:  The hostname of the server with IP should be put here.    Base DN:  This contains the Gluu Server LDAP tree which is allowed to access the user information.    Enabled:  Enabling this feature saves the values inside the gluu server.    Change Bind Password:  This option can be used to bind/change the password to connect to the internal LDAP of the Gluu Server.    Refresh Method:  The Gluu Server allows the Server Administrator to apply two types of Cache Refresh mechanism (i) VDS Method and (ii) Copy Method.    VDS Method:  Any organization with a database like  mysql  can use the VDS method. This option can be enabled via the dropdown menu in Refresh Method option.      Copy Method:  If the organization has any kind of Active Directory/LDAP server, they are strongly recommened to use the  Copy Method  from the dropdown menu.", 
            "title": "Inum LDAP Server"
        }, 
        {
            "location": "/admin-guide/configuration/#attributes-mapping", 
            "text": "When the Copy method is selected, a section for Attribute mapping will be exposed. In this section, the Gluu Server Administrator can map any attribute from the backend Active Directory/LDAP to the LDAP cache of the Gluu Server.   In the source attribute to destination attribute mapping field, you can enter the source attribute value on the left, and the destination attribute on the right. In other words, you can specify what the attribute is on the backend in the left field, and what it should be rendered as when it comes through the Gluu Server in the right field.   The Administrator can select any Cache Refresh Method according to the backend Active Directory/LDAP server, but there are some essential values for both types of cache refresh method. The values are given below.    Pooling Interval (Minutes):  This is the vnterval value for running the Cache Refresh mechanism in the Gluu Server. It is recommended to be kept higher than 15 Minutes.    Script File Name:  Gluu Server cache refresh can accept any kind of Jython Script which might help calculate any custom/complex attribute i.e. eduPersonScopedAffiliation calculation is highly targeted field where such scripts can be used. For more information please contact Gluu Support.    Snapshot Folder:  Every cycle of of Gluu Server Cache Refresh cycle save an overall snapshot and problem-list record on a specified location. This is where the Gluu Server Administrator can specigy the location. A Gluu Server administrator can easily decide whether cache refresh has synchronised all users or not. Generally the rejected users are enclosed in the problem-list file. An overall report is displayed at the top of the cache refresh page with headings  Updated at the last run  and  Problems at the last run.    Snapshot Count:  This defines the total number of snapshots that are allowed to be saved in the hard drive of the VM. It is recommended to be kept to 20 shapshots.    Latest Gluu Servers ( including Community Edition ) introduced two updgraded sections here.     Server IP Address:  Include the IP of your Gluu Server here. This feature basically added to run Cache Refresh mechanism perfectly in clustered environment.    Removed Script File Name location:  New version of Gluu Server allows Gluu Server Administrator to manage your custom scripts with more interctive section under configuration named \" Manage Custom Scripts \"    Update:  This button is to push the changes in the Gluu Server and it should be hit only when the values have been entered.    Update and Validate Script:  This button is used to test the operation and integrity of any custom script such as a Jython Script.", 
            "title": "Attributes Mapping"
        }, 
        {
            "location": "/admin-guide/configuration/#customizing-behavior", 
            "text": "Specifics about the behavior of Cache Refresh can be customized within the custom scripts section. Please see more information  here", 
            "title": "Customizing Behavior"
        }, 
        {
            "location": "/admin-guide/configuration/#configure-log-viewer", 
            "text": "Gluu Server has the facility to read log files using the GUI. The log file can be displayed from the Web UI with a few clicks of the mouse. This feature can be enabled from the configuration menu clicking  Configuration --  Configure Log Viewer.   Clicking on  Add log template  will bring two boxes. The boxes on the left contains the name/description of the log file, and the right boxes contain the path of the log file such as  /opt/tomcat/logs/demo.log.", 
            "title": "Configure Log Viewer"
        }, 
        {
            "location": "/admin-guide/configuration/#view-log-file", 
            "text": "The log files configured in the earlier section can be viewed using the  View log file  feature. This feature can be accessed through the configuration menu using  Configuration --  View Log File.   The  Display last lines count  field contains the lines that will be displayed in the Web GUI. If the field contains the value  400 , then the Gluu Server will show the last 400 lines of the log in the GUI. The screenshot below shows an example.", 
            "title": "View Log File"
        }, 
        {
            "location": "/admin-guide/configuration/#status", 
            "text": "The Status section provides a high level overview of server metrics. The included values are straightforward and shouldn't require any further explanation.", 
            "title": "Status"
        }, 
        {
            "location": "/admin-guide/design-customizations/", 
            "text": "Table of Contents\n \n\n\n\n\nDesign Customizations\n\n\nStyle customizations\n\n\nPage customizations\n\n\nBuilt-in oxTrust customization\n\n\n\n\nDesign Customizations\n\n\nThe look and feel of the Gluu Server can be edited to match your organizations branding and custom requirements.\n\n\nStyle customizations\n\n\nStatic style elements like css, js and images are packaged into separate jar named\n\n\\\nProjectName>\n Static- \n\\\nversion>\n .jar (e.g. oxTrustStatic-1.3.0.Final.jar and oxAuthStatic-1.4.0x.Final.jar) and is added to the deployable war during the build time.\n\n\nPost deployment, the structure of the jar allows its context to be accessible from the Web contextroot.\nFor example, the default values of the css and js locations are \n\\\ncontextPath>/stylesheet\n and\n\n\\\ncontextPath>/js\n in the configuration file.\n\n\nIt is possible to unpack the contents of the said jar into a folder hosted by a web server\nand change the default cssLocation, jsLocation and imgLocation attributes in \noxTrust.properties\n and/or in \noxauth-config.xml\n\n\n\n\n\n\nCSS: The location is specified using the property \ncssLocation\n   \n\n\n\n\n\n\nJavascript: The location is specified using the property \njsLocation\n \n\n\n\n\n\n\nImages: The location is specified using the property \nimgLocation\n    \n\n\n\n\n\n\nFor example, in \noxTrust.properties\n\n\ncssLocation=https://idp.gluu.org/static/stylesheet\njsLocation=https://idp.gluu.org/static/js\nimgLocation=https://idp.gluu.org/static/img\n\n\n\n\nin \noxauth-config.xml\n\n(as a children of \\\nconfiguration> node)\n\n\ncssLocation\nhttps://idp.gluu.org/static/stylesheet\n/cssLocation\n\n\njsLocation\n=https://idp.gluu.org/static/js\njsLocation\n\n\nimgLocation\n=https://idp.gluu.org/static/img\nimgLocation\n\n\n\n\n\nPage customizations\n\n\nTo change the content of the pages, you will need to edit the xhtml files. Be careful\nnot to remove any of the important form elements. But you can add additional html\nelements to meet your needs. (.xhtml files inside \n/opt/tomcat/webapps/identity\n and\n\n/opt/tomcat/webapps/oxauth\n)\n\n\nStandard forms in oxAuth:  \n\n- Default login page: \n/opt/tomcat/webapps/oxauth/login.xhtml\n    \n\n- Error page: \n/opt/tomcat/webapps/oxauth/error.xhtml\n    \n\n- Authorization page: \n/opt/tomcat/webapps/oxauth/authorize.xhtml\n    \n\n- Custom authentication scripts: xhtml files in \n/opt/tomcat/webapps/oxauth/auth\n       \n\n\nStandard forms in oxTrust:    \n\n- Default registration page: \n/opt/tomcat/webapps/identity/register.xhtml\n      \n\n\nTo remove the Gluu Copyright icon from your login page, navigate to:  \n\n\ntemplate.xhtml\n under \n/opt/tomcat/webapps/identity/WEB-INF/incl/layout\n   \n\n\nAnd simply remove this snippet:    \n\n\ns:fragment rendered=\"#{not isLogin}\"\n\n        \ndiv class=\"footer\"\n\n            \np\nCopyright \na href=\"http://www.gluu.org\"\nGluu\n/a\n All rights reserved.\n/p\n\n        \n/div\n\n\n/s:fragment\n\n\n\n\nBuilt-in oxTrust customization\n\n\nUsing the oxTrust Web UI, an administrator can quickly style the Gluu Server Administration interface\nby customizing the messages, logo, favicon and colors.\n\n\nIn oxTrust, this is under Configuration \n Organization Configuration, and is the last section, titled Configuration. \n\n\n\n\n\n\nTitle\n: Web User Interface title can be modified with this link. \n\n\nDisplay name\n: Display Name of IDP in ldap. [ This change is not suggested to be done by Gluu Server Administrator. As it will change configuration in our central server. ]\n\n\nShort name\n: Short Name of Org in ldap. [ This change is not suggested to be done by Gluu Server Administrator. As it will change configuration in our central server. ]\n\n\nDescription\n: A little description about Gluu Server.\n\n\nLogin page message\n: Login page is now using oxAuth, we will more features to support Login page modification through oxAuth. \n\n\nWelcome Title Text\n: Gluu Server Administrator can add custom Welcome Title Text with feature.\n\n\nWelcome Page Message\n: Various message can be included here. Out of the box, Gluu Server includes these 1. Upload SSL Certificate, 2. Active attribute \u2026 etc. messages.\n\n\nOrganization Logo\n: Organization logo can be uploaded and activated from here.\nYou can upload your logo here, which will be shown in Gluu Server Administrative Control page. \n\n\nOrganization Favicon\n: Organization favicon can be changed with this feature. \n\n\nMenu Color\n: It\u2019s a color picker for Gluu Server. Gluu Server\u2019s Web UI color can be changed with this option.", 
            "title": "Design and Customizations"
        }, 
        {
            "location": "/admin-guide/design-customizations/#design-customizations", 
            "text": "The look and feel of the Gluu Server can be edited to match your organizations branding and custom requirements.", 
            "title": "Design Customizations"
        }, 
        {
            "location": "/admin-guide/design-customizations/#style-customizations", 
            "text": "Static style elements like css, js and images are packaged into separate jar named \\ ProjectName>  Static-  \\ version>  .jar (e.g. oxTrustStatic-1.3.0.Final.jar and oxAuthStatic-1.4.0x.Final.jar) and is added to the deployable war during the build time.  Post deployment, the structure of the jar allows its context to be accessible from the Web contextroot.\nFor example, the default values of the css and js locations are  \\ contextPath>/stylesheet  and \\ contextPath>/js  in the configuration file.  It is possible to unpack the contents of the said jar into a folder hosted by a web server\nand change the default cssLocation, jsLocation and imgLocation attributes in  oxTrust.properties  and/or in  oxauth-config.xml    CSS: The location is specified using the property  cssLocation        Javascript: The location is specified using the property  jsLocation      Images: The location is specified using the property  imgLocation         For example, in  oxTrust.properties  cssLocation=https://idp.gluu.org/static/stylesheet\njsLocation=https://idp.gluu.org/static/js\nimgLocation=https://idp.gluu.org/static/img  in  oxauth-config.xml \n(as a children of \\ configuration> node)  cssLocation https://idp.gluu.org/static/stylesheet /cssLocation  jsLocation =https://idp.gluu.org/static/js jsLocation  imgLocation =https://idp.gluu.org/static/img imgLocation", 
            "title": "Style customizations"
        }, 
        {
            "location": "/admin-guide/design-customizations/#page-customizations", 
            "text": "To change the content of the pages, you will need to edit the xhtml files. Be careful\nnot to remove any of the important form elements. But you can add additional html\nelements to meet your needs. (.xhtml files inside  /opt/tomcat/webapps/identity  and /opt/tomcat/webapps/oxauth )  Standard forms in oxAuth:   \n- Default login page:  /opt/tomcat/webapps/oxauth/login.xhtml      \n- Error page:  /opt/tomcat/webapps/oxauth/error.xhtml      \n- Authorization page:  /opt/tomcat/webapps/oxauth/authorize.xhtml      \n- Custom authentication scripts: xhtml files in  /opt/tomcat/webapps/oxauth/auth          Standard forms in oxTrust:     \n- Default registration page:  /opt/tomcat/webapps/identity/register.xhtml         To remove the Gluu Copyright icon from your login page, navigate to:    template.xhtml  under  /opt/tomcat/webapps/identity/WEB-INF/incl/layout      And simply remove this snippet:      s:fragment rendered=\"#{not isLogin}\" \n         div class=\"footer\" \n             p Copyright  a href=\"http://www.gluu.org\" Gluu /a  All rights reserved. /p \n         /div  /s:fragment", 
            "title": "Page customizations"
        }, 
        {
            "location": "/admin-guide/design-customizations/#built-in-oxtrust-customization", 
            "text": "Using the oxTrust Web UI, an administrator can quickly style the Gluu Server Administration interface\nby customizing the messages, logo, favicon and colors.  In oxTrust, this is under Configuration   Organization Configuration, and is the last section, titled Configuration.     Title : Web User Interface title can be modified with this link.   Display name : Display Name of IDP in ldap. [ This change is not suggested to be done by Gluu Server Administrator. As it will change configuration in our central server. ]  Short name : Short Name of Org in ldap. [ This change is not suggested to be done by Gluu Server Administrator. As it will change configuration in our central server. ]  Description : A little description about Gluu Server.  Login page message : Login page is now using oxAuth, we will more features to support Login page modification through oxAuth.   Welcome Title Text : Gluu Server Administrator can add custom Welcome Title Text with feature.  Welcome Page Message : Various message can be included here. Out of the box, Gluu Server includes these 1. Upload SSL Certificate, 2. Active attribute \u2026 etc. messages.  Organization Logo : Organization logo can be uploaded and activated from here.\nYou can upload your logo here, which will be shown in Gluu Server Administrative Control page.   Organization Favicon : Organization favicon can be changed with this feature.   Menu Color : It\u2019s a color picker for Gluu Server. Gluu Server\u2019s Web UI color can be changed with this option.", 
            "title": "Built-in oxTrust customization"
        }, 
        {
            "location": "/admin-guide/ldap/", 
            "text": "Table of Contents\n  \n\n\n\n\nLDAP Configuration\n\n\nIndexing\n\n\nOpenDJ Indexing\n\n\n389DS Indexing\n\n\nOpenLDAP Indexing\n\n\nConfiguring LDAP indexing to improve OX applications performance\n\n\noxAuth filters\n\n\nDetermining what needs indexing\n\n\nSample commands to add indexes\n\n\n\n\n\n\nReplication\n\n\nOpenDJ\n\n\nOpenLDAP\n\n\n389DS\n\n\n\n\n\n\n\n\nLDAP Configuration\n\n\nThis section has information about how the Gluu Server uses LDAP, and other LDAP recommendations.\n\n\nThe Gluu Server uses LDAP for persistence to store information about things like configuration, user claims, and client claims. Currently Gluu ships with a forked version of OpenDJ. However, we hope to bolster support for OpenLDAP and 389DS. If you are an LDAP guru please help us by contributing documentation details!\n\n\nIndexing\n\n\nAll databases need proper indexing to function. This is particularly true for LDAP servers. \nThere should never be any \nsub\n or \none\n scoped searches to the LDAP server that are not\nproperly indexed. Because indexing is implemenation specific, the following guidelines \nshould provide a good starting point. The LDAP server logs should be periodically analyzed to\nidentify un-indexed searches. The exact indexing requirements may vary based on custom attributes,\nand custom authentication and authorization requirements.\n\n\nOpenDJ Indexing\n\n\nIndexing Attribute Values\n\n\n389DS Indexing\n\n\nIndexing Architecture\n\n\nOpenLDAP Indexing\n\n\nOpenLDAP Tuning\n\n\nRecommended Indexes for OX\n\n\nIndexed attributes in OpenDS on seed.gluu.org server:\n\n\n| cn               | equality, substring | default | \n| --               | ------------------- | ------- | \n| entryUUID        | equality            | default | \n| givenName        | equality, substring | default | \n| mail             | equality, substring | default | \n| member           | equality            | default | \n| sn               | equality, substring | default | \n| telephoneNumber  | equality, substring | default | \n| uid              | equality            | default | \n| uniqueMember     | equality            | default | \n| uniqueIdentifier | equality            | Gluu    | \n| inum             | equality            | Gluu    | \n| oxid             | equality            | Gluu    | \n| lastModifiedTime | ordering            | Gluu    | \n| oxAuthExpiration | ordering            | Gluu    |\n\n\n\nFor o=site cache refresh will search on the 'Primary Key'. So it will not be possible for us to know which attributes need to be indexed until configuration time.\n\n\nConfiguring LDAP indexing to improve OX applications performance\n\n\nIn order to keep optimal server load it's necessary to configure indexing for OpenDJ LDAP server. OpenDJ support these index types: approximate, equality, ordering, presence, substring, virtual list view, extensible matching rule. There is more information about index types in \nOpenDJ Admin Guide\n. It's possible to add them for any LDAP attribute. OpenDJ will use them during searching result entries.\n\n\nDefault OpenDJ installation has few preconfigured indexes for these attributes: aci, cn, dn2id, ds-sync-conflict, ds-sync-hist, entryUUID, givenName, id2children, id2subtree, mail, member, objectClass, sn, telephone\u00adNumber, uid, unique\u00adMember. This table contains definition of these indexes: \ndefault Indexes\n.\n\n\noxAuth filters\n\n\noxAuth has a few parts which allows custom LDAP filters:\n\n\n`\nauth-filters-enabled\n`true`\n/auth-filters-enabled\n`\n`\nauth-filters\n`\n    `\nauth-filter\n`\n        `\n!--filter\n`(\namp;(associatedClient=*{0}*)(myPinCode={1}))`\n/filter--\n`\n        `\nfilter\n`(\namp;(mail=*{0}*)(inum={1}))`\n/filter\n`\n        `\n!-- If bind=true oxAuth should try to bind to entry which it found by filter specified above --\n`\n        `\nbind\n`false`\n/bind\n`\n        `\nbase-dn\n`o=gluu`\n/base-dn\n`\n    `\n/auth-filter\n`\n\n    `\nauth-filter\n`\n        `\nfilter\n`uid={0}`\n/filter\n`\n        `\nbind\n`true`\n/bind\n`\n        `\nbind-password-attribute\n`pwd`\n/bind-password-attribute\n`\n        `\nbase-dn\n`o=gluu`\n/base-dn\n`\n    `\n/auth-filter\n`\n`\n/auth-filters\n`\n\n`\n!-- Custom client filters to be able identify client by custom id. --\n`\n`\nclient-auth-filters-enabled\n`true`\n/client-auth-filters-enabled\n`\n`\nclient-auth-filters\n`\n    `\nclient-auth-filter\n`\n        `\nfilter\n`myCustomAttr1={0}`\n/filter\n`\n        `\nbase-dn\n`ou=clients,o=@!1111,o=gluu`\n/base-dn\n`\n    `\n/client-auth-filter\n`\n    `\n!--client-auth-filter\n`\n        `\nfilter\n`(\namp;(myCustomAttr1={0})(myCustomAttr2={0}))`\n/filter\n`\n        `\nbase-dn\n`ou=clients,o=@!1111,o=gluu`\n/base-dn\n`\n    `\n/client-auth-filter--\n`\n`\n/client-auth-filters\n`\n\n\n\noxAuth uses them to find clients. Hence it's necessary to configure indexing for these filters. If there are no indexes for the filter attributes OpenDJ might use an unindexed search.\n\n\nDetermining what needs indexing\n\n\nOpenDJ has built in functionality to help the admin find unindexed searches. More information about this is available in the OpenDJ Admin Guide \nDetermining What Needs Indexing\n.\n\n\nSample commands to add indexes\n\n\nAdd index for inum attribute.\n\n\n./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name inum --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index inum\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n./dsconfig create-local-db-index --backend-name inumDB --type generic --index-name inum --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name inumDB --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=site --index inum\n./dsconfig set-backend-prop --backend-name inumDB --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n\n\nAdd index for uniqueIdentifier attribute.\n\n\n./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name uniqueIdentifier --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index uniqueIdentifier\n./rebuild-index --baseDN o=site --index uniqueIdentifier\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n\n\nAdd index for oxId attribute.\n\n\n./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name oxId --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index oxId\n./rebuild-index --baseDN o=site --index oxId\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n\n\nAdd index for lastModifiedTime attribute.\n\n\n./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name lastModifiedTime --set index-type:ordering --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index lastModifiedTime\n./rebuild-index --baseDN o=site --index lastModifiedTime\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n\n\nAdd index for oxAuthExpiration attribute.\n\n\n./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name oxAuthExpiration --set index-type:ordering --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index oxAuthExpiration\n./rebuild-index --baseDN o=site --index oxAuthExpiration\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n\n\nDetermine current status of indexes.\n\n\n./dbtest list-index-status --backendID userRoot -b o=gluu\n\n\n\nReplication\n\n\nThe Gluu Server was designed to take advantage of LDAP replication. Each server has its \nown special configuration for replication. Below are some pointers to the respective platform's \ndocumentation on how to manage replication.\n\n\nOpenDJ\n\n\nManaging Replication - OpenDJ Admin Guide\n\n\nOpenLDAP\n\n\nReplication\n\n\n389DS\n\n\nManaging Replication", 
            "title": "LDAP"
        }, 
        {
            "location": "/admin-guide/ldap/#ldap-configuration", 
            "text": "This section has information about how the Gluu Server uses LDAP, and other LDAP recommendations.  The Gluu Server uses LDAP for persistence to store information about things like configuration, user claims, and client claims. Currently Gluu ships with a forked version of OpenDJ. However, we hope to bolster support for OpenLDAP and 389DS. If you are an LDAP guru please help us by contributing documentation details!", 
            "title": "LDAP Configuration"
        }, 
        {
            "location": "/admin-guide/ldap/#indexing", 
            "text": "All databases need proper indexing to function. This is particularly true for LDAP servers. \nThere should never be any  sub  or  one  scoped searches to the LDAP server that are not\nproperly indexed. Because indexing is implemenation specific, the following guidelines \nshould provide a good starting point. The LDAP server logs should be periodically analyzed to\nidentify un-indexed searches. The exact indexing requirements may vary based on custom attributes,\nand custom authentication and authorization requirements.", 
            "title": "Indexing"
        }, 
        {
            "location": "/admin-guide/ldap/#opendj-indexing", 
            "text": "Indexing Attribute Values", 
            "title": "OpenDJ Indexing"
        }, 
        {
            "location": "/admin-guide/ldap/#389ds-indexing", 
            "text": "Indexing Architecture", 
            "title": "389DS Indexing"
        }, 
        {
            "location": "/admin-guide/ldap/#openldap-indexing", 
            "text": "OpenLDAP Tuning  Recommended Indexes for OX  Indexed attributes in OpenDS on seed.gluu.org server:  | cn               | equality, substring | default | \n| --               | ------------------- | ------- | \n| entryUUID        | equality            | default | \n| givenName        | equality, substring | default | \n| mail             | equality, substring | default | \n| member           | equality            | default | \n| sn               | equality, substring | default | \n| telephoneNumber  | equality, substring | default | \n| uid              | equality            | default | \n| uniqueMember     | equality            | default | \n| uniqueIdentifier | equality            | Gluu    | \n| inum             | equality            | Gluu    | \n| oxid             | equality            | Gluu    | \n| lastModifiedTime | ordering            | Gluu    | \n| oxAuthExpiration | ordering            | Gluu    |  For o=site cache refresh will search on the 'Primary Key'. So it will not be possible for us to know which attributes need to be indexed until configuration time.", 
            "title": "OpenLDAP Indexing"
        }, 
        {
            "location": "/admin-guide/ldap/#configuring-ldap-indexing-to-improve-ox-applications-performance", 
            "text": "In order to keep optimal server load it's necessary to configure indexing for OpenDJ LDAP server. OpenDJ support these index types: approximate, equality, ordering, presence, substring, virtual list view, extensible matching rule. There is more information about index types in  OpenDJ Admin Guide . It's possible to add them for any LDAP attribute. OpenDJ will use them during searching result entries.  Default OpenDJ installation has few preconfigured indexes for these attributes: aci, cn, dn2id, ds-sync-conflict, ds-sync-hist, entryUUID, givenName, id2children, id2subtree, mail, member, objectClass, sn, telephone\u00adNumber, uid, unique\u00adMember. This table contains definition of these indexes:  default Indexes .", 
            "title": "Configuring LDAP indexing to improve OX applications performance"
        }, 
        {
            "location": "/admin-guide/ldap/#oxauth-filters", 
            "text": "oxAuth has a few parts which allows custom LDAP filters:  ` auth-filters-enabled `true` /auth-filters-enabled `\n` auth-filters `\n    ` auth-filter `\n        ` !--filter `( amp;(associatedClient=*{0}*)(myPinCode={1}))` /filter-- `\n        ` filter `( amp;(mail=*{0}*)(inum={1}))` /filter `\n        ` !-- If bind=true oxAuth should try to bind to entry which it found by filter specified above -- `\n        ` bind `false` /bind `\n        ` base-dn `o=gluu` /base-dn `\n    ` /auth-filter `\n\n    ` auth-filter `\n        ` filter `uid={0}` /filter `\n        ` bind `true` /bind `\n        ` bind-password-attribute `pwd` /bind-password-attribute `\n        ` base-dn `o=gluu` /base-dn `\n    ` /auth-filter `\n` /auth-filters `\n\n` !-- Custom client filters to be able identify client by custom id. -- `\n` client-auth-filters-enabled `true` /client-auth-filters-enabled `\n` client-auth-filters `\n    ` client-auth-filter `\n        ` filter `myCustomAttr1={0}` /filter `\n        ` base-dn `ou=clients,o=@!1111,o=gluu` /base-dn `\n    ` /client-auth-filter `\n    ` !--client-auth-filter `\n        ` filter `( amp;(myCustomAttr1={0})(myCustomAttr2={0}))` /filter `\n        ` base-dn `ou=clients,o=@!1111,o=gluu` /base-dn `\n    ` /client-auth-filter-- `\n` /client-auth-filters `  oxAuth uses them to find clients. Hence it's necessary to configure indexing for these filters. If there are no indexes for the filter attributes OpenDJ might use an unindexed search.", 
            "title": "oxAuth filters"
        }, 
        {
            "location": "/admin-guide/ldap/#determining-what-needs-indexing", 
            "text": "OpenDJ has built in functionality to help the admin find unindexed searches. More information about this is available in the OpenDJ Admin Guide  Determining What Needs Indexing .", 
            "title": "Determining what needs indexing"
        }, 
        {
            "location": "/admin-guide/ldap/#sample-commands-to-add-indexes", 
            "text": "Add index for inum attribute.  ./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name inum --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index inum\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n\n./dsconfig create-local-db-index --backend-name inumDB --type generic --index-name inum --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name inumDB --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=site --index inum\n./dsconfig set-backend-prop --backend-name inumDB --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt  Add index for uniqueIdentifier attribute.  ./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name uniqueIdentifier --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index uniqueIdentifier\n./rebuild-index --baseDN o=site --index uniqueIdentifier\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt  Add index for oxId attribute.  ./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name oxId --set index-type:equality --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index oxId\n./rebuild-index --baseDN o=site --index oxId\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt  Add index for lastModifiedTime attribute.  ./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name lastModifiedTime --set index-type:ordering --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index lastModifiedTime\n./rebuild-index --baseDN o=site --index lastModifiedTime\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt  Add index for oxAuthExpiration attribute.  ./dsconfig create-local-db-index --backend-name userRoot --type generic --index-name oxAuthExpiration --set index-type:ordering --set index-entry-limit:4000 --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:false --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt\n./rebuild-index --baseDN o=gluu --index oxAuthExpiration\n./rebuild-index --baseDN o=site --index oxAuthExpiration\n./dsconfig set-backend-prop --backend-name userRoot --set enabled:true --hostName host --port 4444 --bindDN cn=Directory\\ Manager -j /tmp/.pw --trustAll --noPropertiesFile --no-prompt  Determine current status of indexes.  ./dbtest list-index-status --backendID userRoot -b o=gluu", 
            "title": "Sample commands to add indexes"
        }, 
        {
            "location": "/admin-guide/ldap/#replication", 
            "text": "The Gluu Server was designed to take advantage of LDAP replication. Each server has its \nown special configuration for replication. Below are some pointers to the respective platform's \ndocumentation on how to manage replication.", 
            "title": "Replication"
        }, 
        {
            "location": "/admin-guide/ldap/#opendj", 
            "text": "Managing Replication - OpenDJ Admin Guide", 
            "title": "OpenDJ"
        }, 
        {
            "location": "/admin-guide/ldap/#openldap", 
            "text": "Replication", 
            "title": "OpenLDAP"
        }, 
        {
            "location": "/admin-guide/ldap/#389ds", 
            "text": "Managing Replication", 
            "title": "389DS"
        }, 
        {
            "location": "/admin-guide/saml/", 
            "text": "SAML\n\n\nDuring deployment of the Gluu Server, you can choose to install up to two SAML IDPs. The two options are Shibboleth and Asimba.  Whether or not you want one or both of these SAML IDPs is dependant upon your SAML requirements.\n\n\nOutbound vs. Inbound SAML\n\n\n\n\n\n\nOutbound SAML\n: Shibboleth is a thoroughly tested and stable SAML IDP. The main use case for Shibboleth is outbound SAML, which is the most typical flow for single sign-on (SSO). For example, if you wanted to create SSO to an app like Google Mail or Salesforce, you would use outbound SAML. \n\n\n\n\n\n\nInbound SAML\n: Asimba is a well tested and stable SAML Proxy that can be used to support inbound SAML requirements. The main use case for Asimba is to enable websites to use a single IDP for SSO, even when the organization may have a number of IDPs that are trusted. \n\n\n\n\n\n\nNote:\n The Gluu Server GUI has interfaces for managing outbound SAML (Shibboleth). To manage Inbound SAML (Asimba), you will need to manually edit XML files as needed.   \n\n\nSP Configuration\n\n\nThe Shibboleth Service Provider (SP) software is used to protect applications and is configured via an apache module. Use \nthis guide\n to install the SP software.", 
            "title": "SAML"
        }, 
        {
            "location": "/admin-guide/saml/#saml", 
            "text": "During deployment of the Gluu Server, you can choose to install up to two SAML IDPs. The two options are Shibboleth and Asimba.  Whether or not you want one or both of these SAML IDPs is dependant upon your SAML requirements.", 
            "title": "SAML"
        }, 
        {
            "location": "/admin-guide/saml/#outbound-vs-inbound-saml", 
            "text": "Outbound SAML : Shibboleth is a thoroughly tested and stable SAML IDP. The main use case for Shibboleth is outbound SAML, which is the most typical flow for single sign-on (SSO). For example, if you wanted to create SSO to an app like Google Mail or Salesforce, you would use outbound SAML.     Inbound SAML : Asimba is a well tested and stable SAML Proxy that can be used to support inbound SAML requirements. The main use case for Asimba is to enable websites to use a single IDP for SSO, even when the organization may have a number of IDPs that are trusted.     Note:  The Gluu Server GUI has interfaces for managing outbound SAML (Shibboleth). To manage Inbound SAML (Asimba), you will need to manually edit XML files as needed.", 
            "title": "Outbound vs. Inbound SAML"
        }, 
        {
            "location": "/admin-guide/saml/#sp-configuration", 
            "text": "The Shibboleth Service Provider (SP) software is used to protect applications and is configured via an apache module. Use  this guide  to install the SP software.", 
            "title": "SP Configuration"
        }, 
        {
            "location": "/admin-guide/openid-connect/", 
            "text": "Table of Contents\n \n\n\n\n\nOverview\n\n\nNew Jargon (taxonomy)\n\n\nDiscovery\n\n\nScopes\n\n\nClient Registration\n\n\nCustom Client Registration\n\n\nSearch clients\n\n\nView client\n\n\n\n\n\n\nSession management\n\n\n\n\nOverview\n\n\nSince \nInterop 4\n the Gluu Server has one of the most comprehensive\nimplementations of OpenID Connect. The current results from \nIntereOp 5\n,\nwhile not final, also put the Gluu Server at the top of the list.\n\n\nOpenID Connect\n (\"Connect\") is a standard profile of OAuth2 which defines a protocol to enable a website or mobile application to send a person to a domain for authentication and required attributes (e.g. email address, first name, last name, etc.). Connect also provides some of the plumbing around authentication to automate how this happens. If a person is visiting a website for the  first time, the process that OpenID Connect defines is 100% bootstrapable by the website.  This is really critical for Interet scalability. To visit someone's website, or to send someone email, you don't need to get the system administrators involved. Connect provides the same type of scalable infrastructure, and promises to define a base level domain identification.\n\n\nNew Jargon (taxonomy)\n\n\nIf you are familiar with SAML, there are many parallels in OpenID Connect, but the jargon (or \"taxonomy\") is different. For example, instead of attributes, we have \"user claims\". Instead of Service Provider (SP), we have \"client\". Instead of Identity Provider (IDP), its OpenID Provider (OP).  \n\n\nDiscovery\n\n\nThe first thing you want to know about any OAuth2 API is where are the endpoints (i.e. \nwhat are the URLs where you call the APIs). OpenID Connect provides a very simple\nmechanism to accomlish this: make a GET request to \nhttps://\ndomain\n/.well-known/openid-configuration\n\n\nOpenID Connect Discovery\n is based on \na previous standard called \nWebFinger\n. \n\n\nIf you want to try a sample discovery request, you can make a GET request to \nGluu's OpenID Connect Discovery Page\n\n\nScopes\n\n\nIn SAML, the IDP releases attributes to the SP. OpenID Connect provides similar functionality, \nwith more flexibility in case the person needs to self-approve the release of information from the IDP \nto the website (or mobile application). In OAuth2, scopes can be used for various purposes. \nOpenID Connect uses OAuth2 scopes to \"group\" attributes. For example, we could have a scope called \"address\"\nthat includes the street, city, state, and country user claims. The Gluu Server defines six scopes by default.\n\n\n\n\nThe Gluu Server Administrator can easily add more scopes in the GUI. Click \nAdd Scope\n and you'll be presented with the following screen: \n\n\n\n\nYou'll have the ability to provide a Display Name, Description, whether or not the scope is provided by default, and the claims that are included in the scope. \n\n\nDefault Scope needs some further explanation. When a client uses dynamic client registration, the OpenID Connect specification says that the \nopenid\n scope should always be released, which contains an identifier for that person, normally the username. If you want to release another scope automatically, set the Default Scope to \ntrue\n for that scope. You can always explicitly release a scope to a certain client later on, but this will require some manual intervention by the domain administrator. \n\n\nTo add more claims, simply click \"Add Claim\" and you'll be presented with the following screen:\n\n\n\n\nClient Registration\n\n\nA client in OAuth2 could be either a website or mobile application. OpenID Connect has an API \nfor \nDynamic Client Registration\n\nwhich efficiently pushes the task to the application developer. If you do not want to write an\napplication to register your client, there are a few web pages around that can do the job for \nyou. Gluu publishes the \noxAuth-RP\n and there is also another in\n\nPHP RP\n\n\nIf you can't get the developer to help themselves, or if your domain doesn't want to allow\ndynamic client registration, you can use the oxTrust admin GUI to manually add trusted clients.\n\n\nAvailable \nClients\n can be seen by hitting the \nSearch\n button leaving the search box empty.\n\n\n\n\nA new client can be added by clicking the \nAdd Client\n link.\n\n\n\n\nClicking on the \nAdd Client\n link allows the Gluu Server Administrator to add new client. The search box can be used to look up previously added clients as well. The screenshot below shows the interface to add a new client.\n\n\n\n\n\n\n\n\nDisplay Name:\n This contains the recognizable and unique display name of the client.\n\n\n\n\n\n\nClient Secret:\n This is the Data Encryption Standard scheme used by Confidential Clients to authenticate the token endpoints. The value for the secret can be inserted manually, but it is highly recommened to use the Dynamic Client Registration Endpoint. The Gluu oxAuth provides a random, generated Client Secret in the Dynamic Client Registration procedure.\n\n\n\n\n\n\nApplication Type:\n There are two types of applications, Web and Native. The different configuration for the different application types are given below.\n\n\n\n\n\n\nWeb:\n The Dynamic Client Registration is the default for web. In this type the redirect_uri for implicit grant type must be a real hostname with HTTPS. This type is not approved any localhost or HTTP. The Web Application uses the Authorization code flow for Clients which can maintain a Client Secret between the URIs and Authorization server.\n\n\n\n\n\n\nNative:\n Custom URI for Native type application must follow HTTP with localhost. This is suitable for mobile app which cannot maintain the Client Secret between itself and the Authorization Server.\n\n\n\n\n\n\n\n\n\n\nAlgorithm:\n oxAuth supports various types of Signature and Encryption Algorithms for authorizing request parameter passing, ID token signature and encryption, Signing return responses, Encrypt User Info Endpoints etc.\n\n\n\n\n\n\nIt is a good practice to implement ID Token Signatures with the RSA SHA-256 Algorithm (algorithm value RS256). Additionally oxAuth also supports other algorithms that are listed below.\n\n\nSignature Algorithms:\n HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.\n\n\nEncryption, Key Encryption Algorithms:\n RSA1_5, RSA-OAEP, A128KW, A256KW.\n\n\nBlock Encryption Algorithms:\n A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,\n\n\n\n\n\n\nPre Authorization:\n Gluu server disables this option by default, but it is possible to allow the users to access any URL according to the Organization Policy by the Gluu Server Administrator.\n\n\n\n\n\n\nRedirect URI:\n The URI for native or web app can be added using this feature.\n\n\n\n\n\n\n\nClicking on \nAdd URI\n will open a new box to put the hostname in and it is done.\n\n\n\n\nAdd Group:\n This feature can be used to affiliate specific groups.\n\n\n\n\n\nThe existing groups can be listed by hitting the \nSearch\n button keeping the search phrease blank.\n\n\n\n\nAdd Scopes:\n This option can be used to add the required scopes in the Gluu Server.\n\n\n\n\n\nThe available scopes can be listed by hitting the \nSearch\n button keeping the search phrase black and from this the Gluu Server Administrator can select the required scopes.\n\n\n\n\nAdd Response Type:\n There are three types of responses in the Gluu Server and they are Code, Token and ID Token. The Gluu Server Administrator can select all of them for testing purposes.\n\n\n\n\n\nCustom Client Registration\n\n\nUsing interception scripts you can customize client registration behavior. For example, by default oxAuth allows new clients access to default scopes only. With a custom client registration interception script it iss possible to allow access to more scopes. For instance, we can use redirect_uri to determine if we need to allow access to additional scopes or not. \n\n\nTo access the interface for custom scripts in oxTrust, navigate to Configuration \n Custom Scripts \n Custom Client Registration. \n\n\nTake a look at our \nexample client registration script\n for a reference. \n\n\nSearch clients\n\n\n\n\nView client\n\n\n\n\nSession management\n\n\nLogout is a catch-22. There is no perfect answer to logout that satisfies all the requirements\nof all the domains on the Internet. For example, large OpenID Providers, like Google, need\na totally stateless implementation--Google cannot track sessions on the server side for every\nbrowser on the Internet. But in smaller domains, server side logout functionality can be \na convenient solution to cleaning up resources.\n\n\nThe OpenID Connect \nSession Management\n is\nstill marked as draft, and new mechanisms for logout are in the works. The current specification \nrequires Javascript to detect that the session has been ended in the browswer. It works... unless\nthe tab with the Javascript happens to be closed when the logout event happens on another tab. Also,\ninserting Javascript into every page is not feasible for some applications. A new proposal is under\ndiscussion where the OpenID Connect logout API would return \nIMG\n HTML tags to the browser\nwith the logout callbacks of the clients. This way, the browser could call the logout URIs (not\nthe server). \n\n\nThe Gluu Server is very flexible, and supports both server side session management, and stateless\nsession management. For server side business logout, the domain admin can use Custom Logout scripts. \nThis can be useful to clean up sessions in a legacy SSO system (i.e. SiteMinder), or perhaps\nin a portal.\n\n\nThe key for logout is to understand the limitations of logout, and to test the use cases that\nare important to you, so you will not be surprised by the behavior when you put your application\ninto production.", 
            "title": "OpenID Connect"
        }, 
        {
            "location": "/admin-guide/openid-connect/#overview", 
            "text": "Since  Interop 4  the Gluu Server has one of the most comprehensive\nimplementations of OpenID Connect. The current results from  IntereOp 5 ,\nwhile not final, also put the Gluu Server at the top of the list.  OpenID Connect  (\"Connect\") is a standard profile of OAuth2 which defines a protocol to enable a website or mobile application to send a person to a domain for authentication and required attributes (e.g. email address, first name, last name, etc.). Connect also provides some of the plumbing around authentication to automate how this happens. If a person is visiting a website for the  first time, the process that OpenID Connect defines is 100% bootstrapable by the website.  This is really critical for Interet scalability. To visit someone's website, or to send someone email, you don't need to get the system administrators involved. Connect provides the same type of scalable infrastructure, and promises to define a base level domain identification.", 
            "title": "Overview"
        }, 
        {
            "location": "/admin-guide/openid-connect/#new-jargon-taxonomy", 
            "text": "If you are familiar with SAML, there are many parallels in OpenID Connect, but the jargon (or \"taxonomy\") is different. For example, instead of attributes, we have \"user claims\". Instead of Service Provider (SP), we have \"client\". Instead of Identity Provider (IDP), its OpenID Provider (OP).", 
            "title": "New Jargon (taxonomy)"
        }, 
        {
            "location": "/admin-guide/openid-connect/#discovery", 
            "text": "The first thing you want to know about any OAuth2 API is where are the endpoints (i.e. \nwhat are the URLs where you call the APIs). OpenID Connect provides a very simple\nmechanism to accomlish this: make a GET request to  https:// domain /.well-known/openid-configuration  OpenID Connect Discovery  is based on \na previous standard called  WebFinger .   If you want to try a sample discovery request, you can make a GET request to  Gluu's OpenID Connect Discovery Page", 
            "title": "Discovery"
        }, 
        {
            "location": "/admin-guide/openid-connect/#scopes", 
            "text": "In SAML, the IDP releases attributes to the SP. OpenID Connect provides similar functionality, \nwith more flexibility in case the person needs to self-approve the release of information from the IDP \nto the website (or mobile application). In OAuth2, scopes can be used for various purposes. \nOpenID Connect uses OAuth2 scopes to \"group\" attributes. For example, we could have a scope called \"address\"\nthat includes the street, city, state, and country user claims. The Gluu Server defines six scopes by default.   The Gluu Server Administrator can easily add more scopes in the GUI. Click  Add Scope  and you'll be presented with the following screen:    You'll have the ability to provide a Display Name, Description, whether or not the scope is provided by default, and the claims that are included in the scope.   Default Scope needs some further explanation. When a client uses dynamic client registration, the OpenID Connect specification says that the  openid  scope should always be released, which contains an identifier for that person, normally the username. If you want to release another scope automatically, set the Default Scope to  true  for that scope. You can always explicitly release a scope to a certain client later on, but this will require some manual intervention by the domain administrator.   To add more claims, simply click \"Add Claim\" and you'll be presented with the following screen:", 
            "title": "Scopes"
        }, 
        {
            "location": "/admin-guide/openid-connect/#client-registration", 
            "text": "A client in OAuth2 could be either a website or mobile application. OpenID Connect has an API \nfor  Dynamic Client Registration \nwhich efficiently pushes the task to the application developer. If you do not want to write an\napplication to register your client, there are a few web pages around that can do the job for \nyou. Gluu publishes the  oxAuth-RP  and there is also another in PHP RP  If you can't get the developer to help themselves, or if your domain doesn't want to allow\ndynamic client registration, you can use the oxTrust admin GUI to manually add trusted clients.  Available  Clients  can be seen by hitting the  Search  button leaving the search box empty.   A new client can be added by clicking the  Add Client  link.   Clicking on the  Add Client  link allows the Gluu Server Administrator to add new client. The search box can be used to look up previously added clients as well. The screenshot below shows the interface to add a new client.     Display Name:  This contains the recognizable and unique display name of the client.    Client Secret:  This is the Data Encryption Standard scheme used by Confidential Clients to authenticate the token endpoints. The value for the secret can be inserted manually, but it is highly recommened to use the Dynamic Client Registration Endpoint. The Gluu oxAuth provides a random, generated Client Secret in the Dynamic Client Registration procedure.    Application Type:  There are two types of applications, Web and Native. The different configuration for the different application types are given below.    Web:  The Dynamic Client Registration is the default for web. In this type the redirect_uri for implicit grant type must be a real hostname with HTTPS. This type is not approved any localhost or HTTP. The Web Application uses the Authorization code flow for Clients which can maintain a Client Secret between the URIs and Authorization server.    Native:  Custom URI for Native type application must follow HTTP with localhost. This is suitable for mobile app which cannot maintain the Client Secret between itself and the Authorization Server.      Algorithm:  oxAuth supports various types of Signature and Encryption Algorithms for authorizing request parameter passing, ID token signature and encryption, Signing return responses, Encrypt User Info Endpoints etc.    It is a good practice to implement ID Token Signatures with the RSA SHA-256 Algorithm (algorithm value RS256). Additionally oxAuth also supports other algorithms that are listed below.  Signature Algorithms:  HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.  Encryption, Key Encryption Algorithms:  RSA1_5, RSA-OAEP, A128KW, A256KW.  Block Encryption Algorithms:  A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,    Pre Authorization:  Gluu server disables this option by default, but it is possible to allow the users to access any URL according to the Organization Policy by the Gluu Server Administrator.    Redirect URI:  The URI for native or web app can be added using this feature.    Clicking on  Add URI  will open a new box to put the hostname in and it is done.   Add Group:  This feature can be used to affiliate specific groups.   The existing groups can be listed by hitting the  Search  button keeping the search phrease blank.   Add Scopes:  This option can be used to add the required scopes in the Gluu Server.   The available scopes can be listed by hitting the  Search  button keeping the search phrase black and from this the Gluu Server Administrator can select the required scopes.   Add Response Type:  There are three types of responses in the Gluu Server and they are Code, Token and ID Token. The Gluu Server Administrator can select all of them for testing purposes.", 
            "title": "Client Registration"
        }, 
        {
            "location": "/admin-guide/openid-connect/#custom-client-registration", 
            "text": "Using interception scripts you can customize client registration behavior. For example, by default oxAuth allows new clients access to default scopes only. With a custom client registration interception script it iss possible to allow access to more scopes. For instance, we can use redirect_uri to determine if we need to allow access to additional scopes or not.   To access the interface for custom scripts in oxTrust, navigate to Configuration   Custom Scripts   Custom Client Registration.   Take a look at our  example client registration script  for a reference.", 
            "title": "Custom Client Registration"
        }, 
        {
            "location": "/admin-guide/openid-connect/#search-clients", 
            "text": "", 
            "title": "Search clients"
        }, 
        {
            "location": "/admin-guide/openid-connect/#view-client", 
            "text": "", 
            "title": "View client"
        }, 
        {
            "location": "/admin-guide/openid-connect/#session-management", 
            "text": "Logout is a catch-22. There is no perfect answer to logout that satisfies all the requirements\nof all the domains on the Internet. For example, large OpenID Providers, like Google, need\na totally stateless implementation--Google cannot track sessions on the server side for every\nbrowser on the Internet. But in smaller domains, server side logout functionality can be \na convenient solution to cleaning up resources.  The OpenID Connect  Session Management  is\nstill marked as draft, and new mechanisms for logout are in the works. The current specification \nrequires Javascript to detect that the session has been ended in the browswer. It works... unless\nthe tab with the Javascript happens to be closed when the logout event happens on another tab. Also,\ninserting Javascript into every page is not feasible for some applications. A new proposal is under\ndiscussion where the OpenID Connect logout API would return  IMG  HTML tags to the browser\nwith the logout callbacks of the clients. This way, the browser could call the logout URIs (not\nthe server).   The Gluu Server is very flexible, and supports both server side session management, and stateless\nsession management. For server side business logout, the domain admin can use Custom Logout scripts. \nThis can be useful to clean up sessions in a legacy SSO system (i.e. SiteMinder), or perhaps\nin a portal.  The key for logout is to understand the limitations of logout, and to test the use cases that\nare important to you, so you will not be surprised by the behavior when you put your application\ninto production.", 
            "title": "Session management"
        }, 
        {
            "location": "/admin-guide/uma/", 
            "text": "Table of Contents\n  \n\n\n\n\nIntroduction\n\n\nEnterprise UMA\n\n\nUMA in Action\n\n\n\n\n\n\nDiscovery\n\n\nDiscovery References\n\n\n\n\n\n\nResource Registration\n\n\nUMA Scopes\n\n\nDefine UMA Scopes via oxTrust\n\n\nImplementation specificity\n\n        - \nExternal sample ldif\n\n        - \nInternal sample ldif\n  \n\n\nRegister resource via oxTrust\n\n\n\n\n\n\nUMA Policies\n\n\nDefine policy in oxTrust\n\n\nAlgorithm\n\n\n\n\n\n\nRequesting party trust elevation\n  \n\n\nReferences\n  \n\n\n\n\nIntroduction\n\n\nUser-Managed Access (UMA) is an OAuth-based web-based access management protocol. The protocol is defined in a \ndraft version 1.0 specification\n. A corresponding specification defines obligations of legally responsible parties that engage in UMA-conforming interactions. Although the primary use cases of UMA have centered on individual people (that is, the \"users\" who manage access to their own online resources), the UMA notion of authorization as a service also has relevance to modern enterprises that must secure APIs and other web resources in a developer-friendly way.\n\n\nEnterprise UMA\n\n\nThe Gluu Server implements UMA in a way that enables the protectection of any web resource. Through the oxTrust interface, the server admin can write custom \nauthorization interception scripts\n which may contain logic to grant (or forbid) access. All terminology used by this page is borrowed from UMA and Connect specs.\n\n\nUMA in Action\n\n\nThe diagrams below detail how the various UMA actors interact. \n\n\nSome helpul definitions:\n- \nResource Owner (RO)\n: An OAuth resource owner that is the \"user\" in User-Managed Access. This is typically an end-user (a natural person) but it can also be a corporation or other legal person.\n- \nResource Server (RS)\n: Where the resources are held. \n- \nAuthorization Server (AS)\n: A server that governs access based on resource owner policies.\n- \nRequesting Party (RP)\n: An end-user, or a corporation or other legal person, that uses a client to seek access to a protected resource. The requesting party may or may not be the same party as the resource owner.\n- \nClient\n: A web or native app that is used to access a digital resource. \n- \nProtection API Token (PAT)\n: An entity seeking protection API access MUST have the scope \"uma_protection\". An access token with at least this scope is called a protection API token (PAT) and an entity that can acquire an access token with this scope is by definition a resource server.\n- \nRequesting Party Token (RPT)\n: the token that a client presents to a resource server when trying to access a protected resource.\n- \nAuthorization API Token (AAT)\n: An entity seeking authorization API access MUST have the scope \"uma_authorization\". An access token with at least this scope is called an authorization API token (AAT) and an entity that can acquire an access token with this scope is by definition a client.  \n\n\nUMA Authorization Workflow\n\n\n\n\nDetailed Authorization Overview\n\n\n\n\nUMA Authorization Token Workflow\n\n\n\n\nUMA Authorization Complete Sequence\n\n\n\n\nDiscovery\n\n\nThe Gluu Server exposes an endpoint for discovering information about UMA Provider configuration. A resource server or client can perform an HTTP GET on \nhttps://domain.com/.well-known/uma-configuration\n to retrieve a JSON object indicating the UMA Provider configuration. \n\n\nGluu Server response for UMA configuration MAY contain standard properties (defined by UMA specification) as well as custom properties (extension that is out of scope of this document). Gluu Server guarantees property name uniqueness within response.\n\n\nThe following is an example of a GET request to the UMA configuration discovery endpoint: \n\n\n{\n  \nversion\n: \n1.0\n,\n  \nissuer\n: \nhttps://gluuserver.org\n,\n  \npat_profiles_supported\n: [\n    \nbearer\n\n  ],\n  \naat_profiles_supported\n: [\n    \nbearer\n\n  ],\n  \nrpt_profiles_supported\n: [\n    \nbearer\n\n  ],\n  \npat_grant_types_supported\n: [\n    \nauthorization_code\n\n  ],\n  \naat_grant_types_supported\n: [\n    \nauthorization_code\n\n  ],\n  \nclaim_profiles_supported\n: [\n    \nopenid\n\n  ],\n  \ndynamic_client_endpoint\n: \nhttps://gluuserver.org/oxauth/seam/resource/restv1/oxauth/register\n,\n  \ntoken_endpoint\n: \nhttps://gluuserver.org/oxauth/seam/resource/restv1/oxauth/token\n,\n  \nuser_endpoint\n: \nhttps://gluuserver.org/oxauth/seam/resource/restv1/oxauth/authorize\n,\n  \nintrospection_endpoint\n: \nhttps://gluuserver.org/oxauth/seam/resource/restv1/host/status\n,\n  \nresource_set_registration_endpoint\n: \nhttps://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc\n,\n  \npermission_registration_endpoint\n: \nhttps://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc_pr\n,\n  \nrpt_endpoint\n: \nhttps://gluuserver.org/oxauth/seam/resource/restv1/requester/rpt\n,\n  \nauthorization_request_endpoint\n: \nhttps://gluuserver.org/oxauth/seam/resource/restv1/requester/perm\n,\n  \nscope_endpoint\n: \nhttps://gluuserver.org/oxauth/seam/resource/restv1/uma/scopes\n\n}\n\n\n\n\nThe JSON object returned includes the following configuration information:\n\n\nversion\n: The supported UMA core protocol version.\n\n\nissuer\n: The URI of the issuing authorization server.\n\n\npat_profiles_supported\n: The supported OAuth token types used for issuing Protection API Tokens (PATs).\n\n\naat_profiles_supported\n: The supported OAuth token types used for issuing Authorization API Tokens (AATs).\n\n\nrpt_profiles_supported\n: The supported Requesting Party Token (RPT) profiles.\n\n\npat_grant_types_supported\n: The supported OAuth grant types used for issuing PATs.\n\n\naat_grant_types_supported\n: The supported OAuth grant types used for issuing AATs.\n\n\ntoken_endpoint\n: The URI to request a PAT or AAT.\n\n\nauthorization_endpoint\n: The URI to request authorization for issuing a PAT or AAT.\n\n\nintrospection_endpoint\n: The URI to introspect an RPT.\n\n\nresource_set_registration_endpoint\n: The URI for a resource server to register a resource set.\n\n\npermission_registration_endpoint\n: The URI for a resource server to register a requested permission.\n\n\nrpt_endpoint\n: The URI for the client to request authorization data.\n\n\ndynamic_client_endpoint\n: The URI for registering a dynamic client.\n\n\nResource Registration\n\n\nTo let the Gluu Server know which resources are protected by UMA they must be registered. Resources are described by following properties:\n\n\n\n\nname: name of resource\n\n\nscopes: scopes that are available for this resource\n\n\ntype:  type of resource (it can be string, uri or what ever, basically it is up to Resource Server what type it should be).\n\n\nicon_uri: uri to the icon.\n\n\n\n\nThese are standard properties however a resource description MAY contain custom properties.\n\n\nRegister resource via oxTrust\n\n\n\n\n\n\nUMA Scopes\n\n\nUMA Scopes are bound to resource sets and are used by policies to check whether user the specified user has access to the resource.\n\n\nAn UMA Scope is described in JSON and has following properties:\n\n\n\n\nname: name of scope (e.g. View photo, Edit photo)\n\n\nicon_uri: optional property to specify icon for photo\n\n\n\n\nExample of typical JSON document of scope:\n\n\n{\n  \nname\n: \nAdd photo\n,\n  \nicon_uri\n: \nhttp://www.gluu.org/icons/add_photo_scope.png\n\n}\n\n\n\n\nThe Scope JSON MAY contain custom properties which is out of scope of this document.\n\n\nDefine UMA Scopes via oxTrust\n\n\n\n\n\n\nImplementation specificity\n\n\nScopes types:\n\n\n\n\ninternal: hosted on oxAuth (must provide scope description);\n\n\nexternal: hosted on other servers;\n\n\nexternal_auto: scope hosted on other server but which is automatically added during resource set registration or update.\n\n\n\n\nNote:\n there is no url for internal scope because it is configurable and depends on oxAuth hosting.\n\n\nUMA url = uma_scopes_endpoint + \"/\" + oxId;\n\n\nhttp://gluu.org/uma/scopes/view = http://gluu.org/uma/scopes + \"/\" + view\n\n\nUnder http://gluu.org/uma/scopes/view server must provide scope description as json document:\n\n\nNote:\n The Scope endpoint must be present in UMA configuration to make it discoverable.\n\n\nExternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view\n\n\n\n\nInternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png\n\n\n\n\nUMA Policies\n\n\nUMA Policies protect UMA Resources. Protection of resources are made via scopes. Gluu server evaluates all policies (identified by scopes) in order to grant access.\n\n\nUMA Policy main properties:\n\n\n\n\nscopes: policy protects resources by scopes.\n\n\nauthorization script: script that is evaluated in order to grant or deny access (script basically returns true of false to server).\n\n\nname: it is best to provide an easily understandable name to the policy so that it is clear what the policy protects.  \n\n\n\n\nDefine Policies\n\n\nWithin the oxTrust interface the Gluu Server admin can define UMA policies (pictured below). To achieve this, navigate to Configuration \n Manage Custom Scripts \n UMA Authorization policies. \n\n\nYou can find more information on crafting UMA policies as well as an example script \nhere\n\n\n\n\nAlgorithm\n\n\nRules:\n\n\n\n\nPolicy protects resources based on scopes. If scope is protected by policy then during RPT authorization such policy script must return true in order to authorize access to resource, otherwise authorization is denied.\n\n\nScope can be protected by multiple policies. If one scope is protected by multiple policies then all policies must return true to authorize access. If at least one policy returned false then authorization is denied.\n\n \n\n\n\n\nRequesting party trust elevation\n\n\nThis section defines the OX claim profile for UMA. Following is a summary:\n\n\n\n\nIdentifying URI: http://gluu.org/uma/profiles/uma-claim-gluu-1.0\n\n\nProfile author and contact information: Michael Schwartz and Yuriy Zabrovarnyy (info@gluu.org)\n\n\nUpdates or obsoletes: None; this profile is new.\n\n\nSyntax and semantics of claim data: As defined below.\n\n\nClaims gathering method: As defined below.\n\n\nError states: \"need_reauthentication\" in case AAT is not \"strong\" enough.\n\n\nSecurity and privacy considerations: None additional.\n\n\nBinding obligations: None additional.\n\n\n\n\nIf an authorization server supports the OX claim profile, it MUST supply the \"ox\" value for one of its \"claim_profiles_supported\" values in its configuration data.\n\n\nTo conform to this option, the authorization server MUST do the following:\n\n\n\n\nsend \"need_reauthentication\" error in case AAT does not correspond to authentication level and (or) mode of authorization policy. Together with error authorization server MUST provide:\n\n\ndomain_auth_level - REQUIRED. authentication level required to satisfy authorization policy\n\n\ndomain_auth_mode - REQUIRED. authentication mode required to satisfy authorization policy\n\n\nauthentication_uri - OPTIONAL. authorization server authentication uri for re-authentication with required authentication level and mode\n\n\n\n\n\n\n\n\nFor example:\n\n\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n{\n  \nstatus\n: \nerror\n,\n  \nerror\n: \nneed_reauthentication\n,\n  \ndomain_auth_level\n:20,\n  \ndomain_auth_mode\n:\nduo\n,\n  \nrequired_acr_level\n:2,\n  \nrequired_acr_uri\n:\nhttp://example.com/global_acr\n,\n  \nauthentication_uri\n:\nhttp://seed.gluu.org/oxauth?auth_level=20\nauth_mode=duo\nclient_id=...\n\n}\n\n\n\n\nReferences\n\n\n\n\nKantara Enterprise UMA Case Study\n \n\n\nUMA 1.0 Specifications\n\n\nUMA Requestion Party Sample implementation\n\n\nUMA Resource Server Sample implementation\n\n\nGluu Server\n\n\nJuju Application Security Framework (JASF) Overview", 
            "title": "UMA"
        }, 
        {
            "location": "/admin-guide/uma/#introduction", 
            "text": "User-Managed Access (UMA) is an OAuth-based web-based access management protocol. The protocol is defined in a  draft version 1.0 specification . A corresponding specification defines obligations of legally responsible parties that engage in UMA-conforming interactions. Although the primary use cases of UMA have centered on individual people (that is, the \"users\" who manage access to their own online resources), the UMA notion of authorization as a service also has relevance to modern enterprises that must secure APIs and other web resources in a developer-friendly way.", 
            "title": "Introduction"
        }, 
        {
            "location": "/admin-guide/uma/#enterprise-uma", 
            "text": "The Gluu Server implements UMA in a way that enables the protectection of any web resource. Through the oxTrust interface, the server admin can write custom  authorization interception scripts  which may contain logic to grant (or forbid) access. All terminology used by this page is borrowed from UMA and Connect specs.", 
            "title": "Enterprise UMA"
        }, 
        {
            "location": "/admin-guide/uma/#uma-in-action", 
            "text": "The diagrams below detail how the various UMA actors interact.   Some helpul definitions:\n-  Resource Owner (RO) : An OAuth resource owner that is the \"user\" in User-Managed Access. This is typically an end-user (a natural person) but it can also be a corporation or other legal person.\n-  Resource Server (RS) : Where the resources are held. \n-  Authorization Server (AS) : A server that governs access based on resource owner policies.\n-  Requesting Party (RP) : An end-user, or a corporation or other legal person, that uses a client to seek access to a protected resource. The requesting party may or may not be the same party as the resource owner.\n-  Client : A web or native app that is used to access a digital resource. \n-  Protection API Token (PAT) : An entity seeking protection API access MUST have the scope \"uma_protection\". An access token with at least this scope is called a protection API token (PAT) and an entity that can acquire an access token with this scope is by definition a resource server.\n-  Requesting Party Token (RPT) : the token that a client presents to a resource server when trying to access a protected resource.\n-  Authorization API Token (AAT) : An entity seeking authorization API access MUST have the scope \"uma_authorization\". An access token with at least this scope is called an authorization API token (AAT) and an entity that can acquire an access token with this scope is by definition a client.    UMA Authorization Workflow   Detailed Authorization Overview   UMA Authorization Token Workflow   UMA Authorization Complete Sequence", 
            "title": "UMA in Action"
        }, 
        {
            "location": "/admin-guide/uma/#discovery", 
            "text": "The Gluu Server exposes an endpoint for discovering information about UMA Provider configuration. A resource server or client can perform an HTTP GET on  https://domain.com/.well-known/uma-configuration  to retrieve a JSON object indicating the UMA Provider configuration.   Gluu Server response for UMA configuration MAY contain standard properties (defined by UMA specification) as well as custom properties (extension that is out of scope of this document). Gluu Server guarantees property name uniqueness within response.  The following is an example of a GET request to the UMA configuration discovery endpoint:   {\n   version :  1.0 ,\n   issuer :  https://gluuserver.org ,\n   pat_profiles_supported : [\n     bearer \n  ],\n   aat_profiles_supported : [\n     bearer \n  ],\n   rpt_profiles_supported : [\n     bearer \n  ],\n   pat_grant_types_supported : [\n     authorization_code \n  ],\n   aat_grant_types_supported : [\n     authorization_code \n  ],\n   claim_profiles_supported : [\n     openid \n  ],\n   dynamic_client_endpoint :  https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/register ,\n   token_endpoint :  https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/token ,\n   user_endpoint :  https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/authorize ,\n   introspection_endpoint :  https://gluuserver.org/oxauth/seam/resource/restv1/host/status ,\n   resource_set_registration_endpoint :  https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc ,\n   permission_registration_endpoint :  https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc_pr ,\n   rpt_endpoint :  https://gluuserver.org/oxauth/seam/resource/restv1/requester/rpt ,\n   authorization_request_endpoint :  https://gluuserver.org/oxauth/seam/resource/restv1/requester/perm ,\n   scope_endpoint :  https://gluuserver.org/oxauth/seam/resource/restv1/uma/scopes \n}  The JSON object returned includes the following configuration information:  version : The supported UMA core protocol version.  issuer : The URI of the issuing authorization server.  pat_profiles_supported : The supported OAuth token types used for issuing Protection API Tokens (PATs).  aat_profiles_supported : The supported OAuth token types used for issuing Authorization API Tokens (AATs).  rpt_profiles_supported : The supported Requesting Party Token (RPT) profiles.  pat_grant_types_supported : The supported OAuth grant types used for issuing PATs.  aat_grant_types_supported : The supported OAuth grant types used for issuing AATs.  token_endpoint : The URI to request a PAT or AAT.  authorization_endpoint : The URI to request authorization for issuing a PAT or AAT.  introspection_endpoint : The URI to introspect an RPT.  resource_set_registration_endpoint : The URI for a resource server to register a resource set.  permission_registration_endpoint : The URI for a resource server to register a requested permission.  rpt_endpoint : The URI for the client to request authorization data.  dynamic_client_endpoint : The URI for registering a dynamic client.", 
            "title": "Discovery"
        }, 
        {
            "location": "/admin-guide/uma/#resource-registration", 
            "text": "To let the Gluu Server know which resources are protected by UMA they must be registered. Resources are described by following properties:   name: name of resource  scopes: scopes that are available for this resource  type:  type of resource (it can be string, uri or what ever, basically it is up to Resource Server what type it should be).  icon_uri: uri to the icon.   These are standard properties however a resource description MAY contain custom properties.", 
            "title": "Resource Registration"
        }, 
        {
            "location": "/admin-guide/uma/#register-resource-via-oxtrust", 
            "text": "", 
            "title": "Register resource via oxTrust"
        }, 
        {
            "location": "/admin-guide/uma/#uma-scopes", 
            "text": "UMA Scopes are bound to resource sets and are used by policies to check whether user the specified user has access to the resource.  An UMA Scope is described in JSON and has following properties:   name: name of scope (e.g. View photo, Edit photo)  icon_uri: optional property to specify icon for photo   Example of typical JSON document of scope:  {\n   name :  Add photo ,\n   icon_uri :  http://www.gluu.org/icons/add_photo_scope.png \n}  The Scope JSON MAY contain custom properties which is out of scope of this document.", 
            "title": "UMA Scopes"
        }, 
        {
            "location": "/admin-guide/uma/#define-uma-scopes-via-oxtrust", 
            "text": "", 
            "title": "Define UMA Scopes via oxTrust"
        }, 
        {
            "location": "/admin-guide/uma/#implementation-specificity", 
            "text": "Scopes types:   internal: hosted on oxAuth (must provide scope description);  external: hosted on other servers;  external_auto: scope hosted on other server but which is automatically added during resource set registration or update.   Note:  there is no url for internal scope because it is configurable and depends on oxAuth hosting.  UMA url = uma_scopes_endpoint + \"/\" + oxId;  http://gluu.org/uma/scopes/view = http://gluu.org/uma/scopes + \"/\" + view  Under http://gluu.org/uma/scopes/view server must provide scope description as json document:  Note:  The Scope endpoint must be present in UMA configuration to make it discoverable.  External sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view  Internal sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png", 
            "title": "Implementation specificity"
        }, 
        {
            "location": "/admin-guide/uma/#uma-policies", 
            "text": "UMA Policies protect UMA Resources. Protection of resources are made via scopes. Gluu server evaluates all policies (identified by scopes) in order to grant access.  UMA Policy main properties:   scopes: policy protects resources by scopes.  authorization script: script that is evaluated in order to grant or deny access (script basically returns true of false to server).  name: it is best to provide an easily understandable name to the policy so that it is clear what the policy protects.", 
            "title": "UMA Policies"
        }, 
        {
            "location": "/admin-guide/uma/#define-policies", 
            "text": "Within the oxTrust interface the Gluu Server admin can define UMA policies (pictured below). To achieve this, navigate to Configuration   Manage Custom Scripts   UMA Authorization policies.   You can find more information on crafting UMA policies as well as an example script  here", 
            "title": "Define Policies"
        }, 
        {
            "location": "/admin-guide/uma/#algorithm", 
            "text": "Rules:   Policy protects resources based on scopes. If scope is protected by policy then during RPT authorization such policy script must return true in order to authorize access to resource, otherwise authorization is denied.  Scope can be protected by multiple policies. If one scope is protected by multiple policies then all policies must return true to authorize access. If at least one policy returned false then authorization is denied.", 
            "title": "Algorithm"
        }, 
        {
            "location": "/admin-guide/uma/#requesting-party-trust-elevation", 
            "text": "This section defines the OX claim profile for UMA. Following is a summary:   Identifying URI: http://gluu.org/uma/profiles/uma-claim-gluu-1.0  Profile author and contact information: Michael Schwartz and Yuriy Zabrovarnyy (info@gluu.org)  Updates or obsoletes: None; this profile is new.  Syntax and semantics of claim data: As defined below.  Claims gathering method: As defined below.  Error states: \"need_reauthentication\" in case AAT is not \"strong\" enough.  Security and privacy considerations: None additional.  Binding obligations: None additional.   If an authorization server supports the OX claim profile, it MUST supply the \"ox\" value for one of its \"claim_profiles_supported\" values in its configuration data.  To conform to this option, the authorization server MUST do the following:   send \"need_reauthentication\" error in case AAT does not correspond to authentication level and (or) mode of authorization policy. Together with error authorization server MUST provide:  domain_auth_level - REQUIRED. authentication level required to satisfy authorization policy  domain_auth_mode - REQUIRED. authentication mode required to satisfy authorization policy  authentication_uri - OPTIONAL. authorization server authentication uri for re-authentication with required authentication level and mode     For example:  HTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n{\n   status :  error ,\n   error :  need_reauthentication ,\n   domain_auth_level :20,\n   domain_auth_mode : duo ,\n   required_acr_level :2,\n   required_acr_uri : http://example.com/global_acr ,\n   authentication_uri : http://seed.gluu.org/oxauth?auth_level=20 auth_mode=duo client_id=... \n}", 
            "title": "Requesting party trust elevation"
        }, 
        {
            "location": "/admin-guide/uma/#references", 
            "text": "Kantara Enterprise UMA Case Study    UMA 1.0 Specifications  UMA Requestion Party Sample implementation  UMA Resource Server Sample implementation  Gluu Server  Juju Application Security Framework (JASF) Overview", 
            "title": "References"
        }, 
        {
            "location": "/admin-guide/user-management/", 
            "text": "Table of Contents\n \n\n\n\n\nUser Management\n\n\nCache Refresh\n\n\nSelf Registration\n\n\nLocal User Management\n\n\nPeople\n\n\nGroups\n\n\nAttributes\n\n\n\n\n\n\nSCIM oxAuth Authentication\n\n\nBase configuration: create oxAuth client\n\n\nconfiguration (Resource Server)\n\n\nSCIM Client (Requesting Party) sample code\n\n\n\n\n\n\nSCIM UMA Authentication\n\n\nBase configuration: Create oxAuth Clients, Policies\n\n\noxTrust configuration (Resource Server)\n\n\nSCIM Client (Requesting Party) sample code\n\n\n\n\n\n\n\n\nUser Management\n\n\nTo keep the Gluu Server up-to-date with the latest user claims, your organization can either \"push\" or \"pull\" identity data. In the \"pull\" mode, otherwise known as LDAP Syncronization or Cache Refresh, the Gluu Server can use an existing LDAP identity source like Microsoft Active Directory as the authoritative source of identity information. If you \"push\" identities to the Gluu Server, you can use the JSON/REST SCIM API. Local user management can also be performed inside oxTrust. Each method is detailed below. \n\n\nCache Refresh\n\n\nCache Refresh was built by Gluu to pull user information from a backend Active Directory/LDAP Server. Cache refresh dynamically synchronises user information from the backend data source to a local LDAP server in order to maximize performance. Cache refresh is documented in our \nconfiguration section\n.\n\n\nSelf Registration\n\n\nSelf-Registration is done by users on a self-service basis. Since oxTrust user registration cannot add users to a backend LDAP or Active Directory server, self-registration will only be effective if GluuLDAP is used for authentication of users.\n\n\nBY default a a limited number of attribute is present in default self-registration form. If more attributes are needed they can be added in Registration Management of Organization Configuration. Learn more about Registration Management \nhere\n.\n\n\nLocal User Management\n\n\nIn oxTrust, you can add, edit and manage people, groups and user attributes and claims to ensure the proper information is released about the right people. \n\n\nPeople\n\n\nTo manage people, navigate to User \n Manage People, as shown in the screenshot below. \n\n\n\n\nFrom this interface you can add users and search for specific users. Because the user database can potentially be very large, a value is required in the search field. In other words, you can not click search with a blank entry to populate all users. If you need to see all users, this would be best performed manually within the Gluu OpenDJ server.\n\nUpon performing a user search, a list will be populated with all users that match the search, as shown in the screenshot below. \n\n\n\n\nTo edit a user, simply click on any of the hyperlinks associated with that user and you will be taken to a user management interface where you can modify that specific attributes relating to that user as displayed below. \n\n\n\n\nImport People\n\n\nThis feature allows the Gluu Server Administrator to bulk import users. The user \nxls\n file can be added using the \nAdd\n button.\n\n\n\n\nValidation checking for the added \nxls\n file can be done using the \nValidate\n button. If the file is not formatted properly, the server will reject the same with an error as shown below in the screenshot.\n\n\n\n\nGroups\n\n\nOut of the box, the Gluu Server includes one group: Gluu Server manager group, named: \u201cgluuManager\u201d. Groups can be added and populated as needed. By using the \nManage Groups\n feature, the Gluu Server Administrator can add, delete or modify any group or user within a group. The list of available groups can be viewed by hitting the \nSearch\n button with a blank search box.\n\n\n\nThe Gluu Server Administrator can modify information such as Diplay Name, Group Owner, Visibility type etc. The Server Administrator can also add or delete users within existing groups. The group information is represented as shown below.\n\n\n\nIf any member of the Organization is required to be added in any specific group, this can be achieved be clicking on the Add Member button. The flow is \nAdd Member --\n Search the name/email of the user --\n Select the user --\n Click OK --\n Update.\n\n\n\n\nAttributes\n\n\nAn \u201cActive\u201d attribute list can be seen from the Configuration \n Attributes section. By default, only active attributes are shown. To see inactive attributes, click the \"Show All Attributes\" link above the table. To edit an attribute simply click on the Display Name. Learn more about Attributes management \nhere\n\n\nSCIM oxAuth Authentication\n\n\nThis is a step by step guide to configure oxTrust and SCIM client for oxAuth authentication. \n\n\nBase Configuration: Create oxAuth Client\n\n\nIn order to access SCIM endpoints, an oxAuth client should be registered with scopes \"openid\" and \"user_name\".\nAuthentication method (or LDAP Property \u201coxAuthTokenEndpointAuthMethod\u201d) of this client should have value \u201cclient_secret_basic\u201d.\n\n\nA new client can be created through various methods: \nClient Registration\n, using \noxTrust\n GUI, or manually adding an entry to LDAP. \n\n\nSample result entry:\n\n\n    dn: inum=@!1111!0008!F781.80AF,ou=clients,o=@!1111,o=gluu\n    objectClass: oxAuthClient\n    objectClass: top\n    displayName: SCIM\n    inum: @!1111!0008!F781.80AF\n    oxAuthAppType: web\n    oxAuthClientSecret: eUXIbkBHgIM=\n    oxAuthIdTokenSignedResponseAlg: HS256\n    oxAuthScope: inum=@!1111!0009!E4B4,ou=scopes,o=@!1111,o=gluu\n    oxAuthScope: inum=@!1111!0009!E4B5,ou=scopes,o=@!1111,o=gluu\n    oxAuthTokenEndpointAuthMethod: client_secret_basic\n\n\n\nConfiguration (Resource Server)\n\n\nIt's possible to enable/disable SCIM endpoints in oxTrust under \"Organization Configuration\" page.\n\n\nSCIM Client (Requesting Party) Sample Code\n\n\nThis is a sample SCIM Client code which requests user information from server.\n\n\npackage gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\n\nimport javax.ws.rs.core.MediaType;\n\npublic class TestScimClient {\n    public static void main(String[] args) {\n        final ScimClient scimClient = ScimClient.oAuthInstance(\"admin\", \"secret\", \"@!9BCF.396B.14EB.1974!0001!CA0D.1918!0008!2F06.F0DF\", \"secret\",\n                \"https://centos65.gluu.info/identity/seam/resource/restv1\", \"https://centos65.gluu.info/oxauth/seam/resource/restv1/oxauth/token\");\n        try {\n            ScimResponse response1 = scimClient.retrievePerson(\"@!9BCF.396B.14EB.1974!0001!CA0D.1918!0000!A8F2.DE1E.D7FB\", MediaType.APPLICATION_JSON);\n            System.out.println(response1.getResponseBodyString());\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n}\n\n\n\nValues in this example are correspond to client entry fields from  first section.\n\n\nSCIM UMA Authentication\n\n\nThis is step by step guide to configure UMA for oxTrust and SCIM client. High level architecture overview is available in the following article \nOX SCIM Architecture Overview\n\n\nBase Configuration: Create oxAuth Clients, Policies\n\n\n\n\n\n\nRegister oxAuth client with scope \u201cuma_protection\u201d. Property \u201coxAuthTokenEndpointAuthMethod\u201d of this client should has value \u201cclient_secret_basic\u201d. It's possible to do that using few methods: \nClient Registration\n, using \noxTrust\n GUI, manually add entry to LDAP. oxTrust will use this oxAuth client to obtain PAT. Sample result entry:\n\n\ndn: inum=@!1111!0008!F781.80AF,ou=clients,o=@!1111,o=gluu\nobjectClass: oxAuthClient\nobjectClass: top\ndisplayName: Resource Server Client\ninum: @!1111!0008!F781.80AF\noxAuthAppType: web\noxAuthClientSecret: eUXIbkBHgIM=\noxAuthIdTokenSignedResponseAlg: HS256\noxAuthScope: inum=@!1111!0009!6D96,ou=scopes,o=@!1111,o=gluu\noxAuthTokenEndpointAuthMethod: client_secret_basic\n\n\n\n\n\n\n\nRegister oxAuth client with scope \u201cuma_authorization\u201d. Property \u201coxAuthTokenEndpointAuthMethod\u201d of this client should has value \u201cclient_secret_basic\u201d. It's possible to do that using few methods: \nClient Registration\n, using \noxTrust\n GUI, manually add entry to LDAP. SCIM Client will use this oxAuth client to obtain AAT. Sample result entry:\n\n\ndn: inum=@!1111!0008!FDC0.0FF5,ou=clients,o=@!1111,o=gluu\nobjectClass: oxAuthClient\nobjectClass: top\ndisplayName: Requesting Party Client\ninum: @!1111!0008!FDC0.0FF5\noxAuthAppType: web\noxAuthClientSecret: eUXIbkBHgIM=\noxAuthIdTokenSignedResponseAlg: HS256\noxAuthScope: inum=@!1111!0009!6D97,ou=scopes,o=@!1111,o=gluu\noxAuthTokenEndpointAuthMethod: client_secret_basic\n\n\n\n\n\n\n\nCreate UMA policy. These are list of steps which allows to add new policy.\n\n\n\n\nLog with administrative privileges into oxTrust.\n\n\nOpen menu \u201cConfiguration\u2192Manage Custom Scripts\u201d.\n\n\nSelect \u201cUMA Authorization Policies\u201d tab and click \u201cAdd custom script configuration\u201d.\n\n\nSelect language \u201cPython\u201d.\n\n\nPaste this base policy script:\n    from org.xdi.model.custom.script.type.uma import AuthorizationPolicyType\n    from org.xdi.util import StringHelper, ArrayHelper\n    from java.util import Arrays, ArrayList\n    from org.xdi.oxauth.service.uma.authorization import AuthorizationContext\n\n    import java\n\n    class AuthorizationPolicy(AuthorizationPolicyType):\n        def __init__(self, currentTimeMillis):\n            self.currentTimeMillis = currentTimeMillis\n\n    def init(self, configurationAttributes):\n        print \"UMA authorization policy. Initialization\"\n        print \"UMA authorization policy. Initialized successfully\"\n\n        return True\n\n    def destroy(self, configurationAttributes):\n        print \"UMA authorization policy. Destroy\"\n        print \"UMA authorization policy. Destroyed successfully\"\n        return True\n\n    def getApiVersion(self):\n        return 1\n\n    # Authorizae access to resource\n    #   authorizationContext is org.xdi.oxauth.service.uma.authorization.AuthorizationContext\n    #   configurationAttributes is java.util.Map\nString, SimpleCustomProperty\n\n    def authorize(self, authorizationContext, configurationAttributes):\n        print \"UMA Authorization policy. Attempting to authorize client\"\n        client_id = authorizationContext.getGrant().getClientId()\n        user_id = authorizationContext.getGrant().getUserId()\n\n        print \"UMA Authorization policy. Client: \", client_id\n        print \"UMA Authorization policy. User: \", user_id\n        if (StringHelper.equalsIgnoreCase(\"@!1111!0008!FDC0.0FF5\", client_id)):\n            print \"UMA Authorization policy. Authorizing client\"\n            return True\n        else:\n            print \"UMA Authorization policy. Client isn't authorized\"\n            return False\n\n        print \"UMA Authorization policy. Authorizing client\"\n        return True\n\n\n\n\n\nReplace in script above client inum \"@!1111!0008!FDC0.0FF5\" with client inum which were added in step 3\n\n\nClick \"Enabled\" check box\n\n\nClick \"Update\" button\n\n\n\n\n\n\n\n\nNote: There is sample UMA Authorization Policy in CE. You can modify it instead of adding new one.\n\n\n\n\nAdd UMA scope. These are list of steps which allows to add new scope.\n\n\nLog with administrative privileges into oxTrust.\n\n\nOpen menu \u201cOAuth2\u2192UMA\u201d.\n\n\nSelect \u201cScopes\u201d tab and click \u201cAdd Scope Description\u201d.\n\n\nSelect \u201cInternal\u201d type.\n\n\nFill the form.\n\n\nSelect policy which we aded in previous step.\n\n\n\n\nClick \u201cAdd\u201d button. Sample result entry:\n\n\n    dn: inum=@!1111!D386.9FB1,ou=scopes,ou=uma,o=@!1111,o=gluu\n    objectClass: oxAuthUmaScopeDescription\n    objectClass: top\n    displayName: Access SCIM\n    inum: @!1111!D386.9FB1\n    owner: inum=@!1111!0000!D9D9,ou=people,o=@!1111,o=gluu\n    oxPolicyScriptDn: inum=@!1111!CA0D.1918!2DAF.F995,ou=scripts,o=@!1111,o=gluu\n    oxId: access_scim\n    oxRevision: 1\n    oxType: internal\n\n\n\n\n\n\n\nRegister UMA resource set. It's possible to do that via Rest API or via oxTrust GUI. Sample code: [https://github.com/GluuFederation/oxAuth/blob/master/Client/src/test/java/org/xdi/oxauth/ws/rs/uma/RegisterResourceSetFlowHttpTest.java) These are list of steps which allows to add new resource set.\n\n\n\n\nLog with administrative privileges into oxTrust.\n\n\nOpen menu \u201cOAuth2\u2192UMA\u201d.\n\n\nSelect \u201cResources\u201d tab and click \u201cAdd Resource Set\u201d.\n\n\nFill the form.\n\n\nAdd UMA Scope which we created in previous steps.\n\n\nAdd Client which we created in second step.\n\n\nClick \u201cAdd\u201d button. Sample result entry:\n        dn: inum=@!1111!C264.D316,ou=resource_sets,ou=uma,o=@!1111,o=gluu\n        objectClass: oxAuthUmaResourceSet\n        objectClass: top\n        displayName: SCIM Resource Set\n        inum: @!1111!C264.D316\n        owner: inum=@!1111!0000!D9D9,ou=people,o=@!1111,o=gluu\n        oxAuthUmaScope: inum=@!1111!D386.9FB1,ou=scopes,ou=uma,o=@!1111,o=gluu\n        oxFaviconImage: http://example.org/scim_resource_set.jpg\n        oxId: 1403179695657\n        oxRevision: 1\n\n\n\n\n\n\n\noxTrust configuration (Resource Server)\n\n\nAdd next oxTrust UMA related configuration properties to oxTrust.properties:\n\n\n# UMA SCIM protection\numa.issuer=https://centos65.gluu.info\numa.client_id=@!1111!0008!F781.80AF\numa.client_password=\nencrypted_password\n\numa.resource_id=1403179695657\numa.scope=https://centos65.gluu.info/oxauth/seam/resource/restv1/uma/scopes/access_scim\n\n\n\nValues of these properties correspond to entries from first section.\n\n\nNote: In order to recreate oxTrust configuration in LDAP you should remove oxTrust configuration entry from LDAP and restart tomcat.\nExample DN of oxTrust configuration entry: ou=oxtrust,ou=configuration,inum=@!1111!0002!4907,ou=appliances,o=gluu\n\n\nSCIM Client (Requesting Party) sample code\n\n\nThis is sample SCIM Client code which request user information from server.\n\n\npackage gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\n\nimport javax.ws.rs.core.MediaType;\n\npublic class TestScimClient {\n    public static void main(String[] args) {\n        final ScimClient scimClient = ScimClient.umaInstance(\"https://centos65.gluu.info/identity/seam/resource/restv1\", \"https://centos65.gluu.info/.well-known/uma-configuration\",\n                \"@!1111!0008!FDC0.0FF5\", \"secret\");\n\n        try {\n            ScimResponse response1 = scimClient.retrievePerson(\"@!1111!0008!FDC0.0FF5\", MediaType.APPLICATION_JSON);\n            System.out.println(response1.getResponseBodyString());\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n}\n\n\n\nValues from these example correspond to entries from first section.", 
            "title": "User Management"
        }, 
        {
            "location": "/admin-guide/user-management/#user-management", 
            "text": "To keep the Gluu Server up-to-date with the latest user claims, your organization can either \"push\" or \"pull\" identity data. In the \"pull\" mode, otherwise known as LDAP Syncronization or Cache Refresh, the Gluu Server can use an existing LDAP identity source like Microsoft Active Directory as the authoritative source of identity information. If you \"push\" identities to the Gluu Server, you can use the JSON/REST SCIM API. Local user management can also be performed inside oxTrust. Each method is detailed below.", 
            "title": "User Management"
        }, 
        {
            "location": "/admin-guide/user-management/#cache-refresh", 
            "text": "Cache Refresh was built by Gluu to pull user information from a backend Active Directory/LDAP Server. Cache refresh dynamically synchronises user information from the backend data source to a local LDAP server in order to maximize performance. Cache refresh is documented in our  configuration section .", 
            "title": "Cache Refresh"
        }, 
        {
            "location": "/admin-guide/user-management/#self-registration", 
            "text": "Self-Registration is done by users on a self-service basis. Since oxTrust user registration cannot add users to a backend LDAP or Active Directory server, self-registration will only be effective if GluuLDAP is used for authentication of users.  BY default a a limited number of attribute is present in default self-registration form. If more attributes are needed they can be added in Registration Management of Organization Configuration. Learn more about Registration Management  here .", 
            "title": "Self Registration"
        }, 
        {
            "location": "/admin-guide/user-management/#local-user-management", 
            "text": "In oxTrust, you can add, edit and manage people, groups and user attributes and claims to ensure the proper information is released about the right people.", 
            "title": "Local User Management"
        }, 
        {
            "location": "/admin-guide/user-management/#people", 
            "text": "To manage people, navigate to User   Manage People, as shown in the screenshot below.    From this interface you can add users and search for specific users. Because the user database can potentially be very large, a value is required in the search field. In other words, you can not click search with a blank entry to populate all users. If you need to see all users, this would be best performed manually within the Gluu OpenDJ server. \nUpon performing a user search, a list will be populated with all users that match the search, as shown in the screenshot below.    To edit a user, simply click on any of the hyperlinks associated with that user and you will be taken to a user management interface where you can modify that specific attributes relating to that user as displayed below.    Import People  This feature allows the Gluu Server Administrator to bulk import users. The user  xls  file can be added using the  Add  button.   Validation checking for the added  xls  file can be done using the  Validate  button. If the file is not formatted properly, the server will reject the same with an error as shown below in the screenshot.", 
            "title": "People"
        }, 
        {
            "location": "/admin-guide/user-management/#groups", 
            "text": "Out of the box, the Gluu Server includes one group: Gluu Server manager group, named: \u201cgluuManager\u201d. Groups can be added and populated as needed. By using the  Manage Groups  feature, the Gluu Server Administrator can add, delete or modify any group or user within a group. The list of available groups can be viewed by hitting the  Search  button with a blank search box.  The Gluu Server Administrator can modify information such as Diplay Name, Group Owner, Visibility type etc. The Server Administrator can also add or delete users within existing groups. The group information is represented as shown below.  If any member of the Organization is required to be added in any specific group, this can be achieved be clicking on the Add Member button. The flow is  Add Member --  Search the name/email of the user --  Select the user --  Click OK --  Update.", 
            "title": "Groups"
        }, 
        {
            "location": "/admin-guide/user-management/#attributes", 
            "text": "An \u201cActive\u201d attribute list can be seen from the Configuration   Attributes section. By default, only active attributes are shown. To see inactive attributes, click the \"Show All Attributes\" link above the table. To edit an attribute simply click on the Display Name. Learn more about Attributes management  here", 
            "title": "Attributes"
        }, 
        {
            "location": "/admin-guide/user-management/#scim-oxauth-authentication", 
            "text": "This is a step by step guide to configure oxTrust and SCIM client for oxAuth authentication.", 
            "title": "SCIM oxAuth Authentication"
        }, 
        {
            "location": "/admin-guide/user-management/#base-configuration-create-oxauth-client", 
            "text": "In order to access SCIM endpoints, an oxAuth client should be registered with scopes \"openid\" and \"user_name\".\nAuthentication method (or LDAP Property \u201coxAuthTokenEndpointAuthMethod\u201d) of this client should have value \u201cclient_secret_basic\u201d.  A new client can be created through various methods:  Client Registration , using  oxTrust  GUI, or manually adding an entry to LDAP.   Sample result entry:      dn: inum=@!1111!0008!F781.80AF,ou=clients,o=@!1111,o=gluu\n    objectClass: oxAuthClient\n    objectClass: top\n    displayName: SCIM\n    inum: @!1111!0008!F781.80AF\n    oxAuthAppType: web\n    oxAuthClientSecret: eUXIbkBHgIM=\n    oxAuthIdTokenSignedResponseAlg: HS256\n    oxAuthScope: inum=@!1111!0009!E4B4,ou=scopes,o=@!1111,o=gluu\n    oxAuthScope: inum=@!1111!0009!E4B5,ou=scopes,o=@!1111,o=gluu\n    oxAuthTokenEndpointAuthMethod: client_secret_basic", 
            "title": "Base Configuration: Create oxAuth Client"
        }, 
        {
            "location": "/admin-guide/user-management/#configuration-resource-server", 
            "text": "It's possible to enable/disable SCIM endpoints in oxTrust under \"Organization Configuration\" page.", 
            "title": "Configuration (Resource Server)"
        }, 
        {
            "location": "/admin-guide/user-management/#scim-client-requesting-party-sample-code", 
            "text": "This is a sample SCIM Client code which requests user information from server.  package gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\n\nimport javax.ws.rs.core.MediaType;\n\npublic class TestScimClient {\n    public static void main(String[] args) {\n        final ScimClient scimClient = ScimClient.oAuthInstance(\"admin\", \"secret\", \"@!9BCF.396B.14EB.1974!0001!CA0D.1918!0008!2F06.F0DF\", \"secret\",\n                \"https://centos65.gluu.info/identity/seam/resource/restv1\", \"https://centos65.gluu.info/oxauth/seam/resource/restv1/oxauth/token\");\n        try {\n            ScimResponse response1 = scimClient.retrievePerson(\"@!9BCF.396B.14EB.1974!0001!CA0D.1918!0000!A8F2.DE1E.D7FB\", MediaType.APPLICATION_JSON);\n            System.out.println(response1.getResponseBodyString());\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n}  Values in this example are correspond to client entry fields from  first section.", 
            "title": "SCIM Client (Requesting Party) Sample Code"
        }, 
        {
            "location": "/admin-guide/user-management/#scim-uma-authentication", 
            "text": "This is step by step guide to configure UMA for oxTrust and SCIM client. High level architecture overview is available in the following article  OX SCIM Architecture Overview", 
            "title": "SCIM UMA Authentication"
        }, 
        {
            "location": "/admin-guide/user-management/#base-configuration-create-oxauth-clients-policies", 
            "text": "Register oxAuth client with scope \u201cuma_protection\u201d. Property \u201coxAuthTokenEndpointAuthMethod\u201d of this client should has value \u201cclient_secret_basic\u201d. It's possible to do that using few methods:  Client Registration , using  oxTrust  GUI, manually add entry to LDAP. oxTrust will use this oxAuth client to obtain PAT. Sample result entry:  dn: inum=@!1111!0008!F781.80AF,ou=clients,o=@!1111,o=gluu\nobjectClass: oxAuthClient\nobjectClass: top\ndisplayName: Resource Server Client\ninum: @!1111!0008!F781.80AF\noxAuthAppType: web\noxAuthClientSecret: eUXIbkBHgIM=\noxAuthIdTokenSignedResponseAlg: HS256\noxAuthScope: inum=@!1111!0009!6D96,ou=scopes,o=@!1111,o=gluu\noxAuthTokenEndpointAuthMethod: client_secret_basic    Register oxAuth client with scope \u201cuma_authorization\u201d. Property \u201coxAuthTokenEndpointAuthMethod\u201d of this client should has value \u201cclient_secret_basic\u201d. It's possible to do that using few methods:  Client Registration , using  oxTrust  GUI, manually add entry to LDAP. SCIM Client will use this oxAuth client to obtain AAT. Sample result entry:  dn: inum=@!1111!0008!FDC0.0FF5,ou=clients,o=@!1111,o=gluu\nobjectClass: oxAuthClient\nobjectClass: top\ndisplayName: Requesting Party Client\ninum: @!1111!0008!FDC0.0FF5\noxAuthAppType: web\noxAuthClientSecret: eUXIbkBHgIM=\noxAuthIdTokenSignedResponseAlg: HS256\noxAuthScope: inum=@!1111!0009!6D97,ou=scopes,o=@!1111,o=gluu\noxAuthTokenEndpointAuthMethod: client_secret_basic    Create UMA policy. These are list of steps which allows to add new policy.   Log with administrative privileges into oxTrust.  Open menu \u201cConfiguration\u2192Manage Custom Scripts\u201d.  Select \u201cUMA Authorization Policies\u201d tab and click \u201cAdd custom script configuration\u201d.  Select language \u201cPython\u201d.  Paste this base policy script:     from org.xdi.model.custom.script.type.uma import AuthorizationPolicyType\n    from org.xdi.util import StringHelper, ArrayHelper\n    from java.util import Arrays, ArrayList\n    from org.xdi.oxauth.service.uma.authorization import AuthorizationContext\n\n    import java\n\n    class AuthorizationPolicy(AuthorizationPolicyType):\n        def __init__(self, currentTimeMillis):\n            self.currentTimeMillis = currentTimeMillis\n\n    def init(self, configurationAttributes):\n        print \"UMA authorization policy. Initialization\"\n        print \"UMA authorization policy. Initialized successfully\"\n\n        return True\n\n    def destroy(self, configurationAttributes):\n        print \"UMA authorization policy. Destroy\"\n        print \"UMA authorization policy. Destroyed successfully\"\n        return True\n\n    def getApiVersion(self):\n        return 1\n\n    # Authorizae access to resource\n    #   authorizationContext is org.xdi.oxauth.service.uma.authorization.AuthorizationContext\n    #   configurationAttributes is java.util.Map String, SimpleCustomProperty \n    def authorize(self, authorizationContext, configurationAttributes):\n        print \"UMA Authorization policy. Attempting to authorize client\"\n        client_id = authorizationContext.getGrant().getClientId()\n        user_id = authorizationContext.getGrant().getUserId()\n\n        print \"UMA Authorization policy. Client: \", client_id\n        print \"UMA Authorization policy. User: \", user_id\n        if (StringHelper.equalsIgnoreCase(\"@!1111!0008!FDC0.0FF5\", client_id)):\n            print \"UMA Authorization policy. Authorizing client\"\n            return True\n        else:\n            print \"UMA Authorization policy. Client isn't authorized\"\n            return False\n\n        print \"UMA Authorization policy. Authorizing client\"\n        return True   Replace in script above client inum \"@!1111!0008!FDC0.0FF5\" with client inum which were added in step 3  Click \"Enabled\" check box  Click \"Update\" button     Note: There is sample UMA Authorization Policy in CE. You can modify it instead of adding new one.   Add UMA scope. These are list of steps which allows to add new scope.  Log with administrative privileges into oxTrust.  Open menu \u201cOAuth2\u2192UMA\u201d.  Select \u201cScopes\u201d tab and click \u201cAdd Scope Description\u201d.  Select \u201cInternal\u201d type.  Fill the form.  Select policy which we aded in previous step.   Click \u201cAdd\u201d button. Sample result entry:      dn: inum=@!1111!D386.9FB1,ou=scopes,ou=uma,o=@!1111,o=gluu\n    objectClass: oxAuthUmaScopeDescription\n    objectClass: top\n    displayName: Access SCIM\n    inum: @!1111!D386.9FB1\n    owner: inum=@!1111!0000!D9D9,ou=people,o=@!1111,o=gluu\n    oxPolicyScriptDn: inum=@!1111!CA0D.1918!2DAF.F995,ou=scripts,o=@!1111,o=gluu\n    oxId: access_scim\n    oxRevision: 1\n    oxType: internal    Register UMA resource set. It's possible to do that via Rest API or via oxTrust GUI. Sample code: [https://github.com/GluuFederation/oxAuth/blob/master/Client/src/test/java/org/xdi/oxauth/ws/rs/uma/RegisterResourceSetFlowHttpTest.java) These are list of steps which allows to add new resource set.   Log with administrative privileges into oxTrust.  Open menu \u201cOAuth2\u2192UMA\u201d.  Select \u201cResources\u201d tab and click \u201cAdd Resource Set\u201d.  Fill the form.  Add UMA Scope which we created in previous steps.  Add Client which we created in second step.  Click \u201cAdd\u201d button. Sample result entry:         dn: inum=@!1111!C264.D316,ou=resource_sets,ou=uma,o=@!1111,o=gluu\n        objectClass: oxAuthUmaResourceSet\n        objectClass: top\n        displayName: SCIM Resource Set\n        inum: @!1111!C264.D316\n        owner: inum=@!1111!0000!D9D9,ou=people,o=@!1111,o=gluu\n        oxAuthUmaScope: inum=@!1111!D386.9FB1,ou=scopes,ou=uma,o=@!1111,o=gluu\n        oxFaviconImage: http://example.org/scim_resource_set.jpg\n        oxId: 1403179695657\n        oxRevision: 1", 
            "title": "Base Configuration: Create oxAuth Clients, Policies"
        }, 
        {
            "location": "/admin-guide/user-management/#oxtrust-configuration-resource-server", 
            "text": "Add next oxTrust UMA related configuration properties to oxTrust.properties:  # UMA SCIM protection\numa.issuer=https://centos65.gluu.info\numa.client_id=@!1111!0008!F781.80AF\numa.client_password= encrypted_password \numa.resource_id=1403179695657\numa.scope=https://centos65.gluu.info/oxauth/seam/resource/restv1/uma/scopes/access_scim  Values of these properties correspond to entries from first section.  Note: In order to recreate oxTrust configuration in LDAP you should remove oxTrust configuration entry from LDAP and restart tomcat.\nExample DN of oxTrust configuration entry: ou=oxtrust,ou=configuration,inum=@!1111!0002!4907,ou=appliances,o=gluu", 
            "title": "oxTrust configuration (Resource Server)"
        }, 
        {
            "location": "/admin-guide/user-management/#scim-client-requesting-party-sample-code_1", 
            "text": "This is sample SCIM Client code which request user information from server.  package gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\n\nimport javax.ws.rs.core.MediaType;\n\npublic class TestScimClient {\n    public static void main(String[] args) {\n        final ScimClient scimClient = ScimClient.umaInstance(\"https://centos65.gluu.info/identity/seam/resource/restv1\", \"https://centos65.gluu.info/.well-known/uma-configuration\",\n                \"@!1111!0008!FDC0.0FF5\", \"secret\");\n\n        try {\n            ScimResponse response1 = scimClient.retrievePerson(\"@!1111!0008!FDC0.0FF5\", MediaType.APPLICATION_JSON);\n            System.out.println(response1.getResponseBodyString());\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n}  Values from these example correspond to entries from first section.", 
            "title": "SCIM Client (Requesting Party) sample code"
        }, 
        {
            "location": "/admin-guide/personal/", 
            "text": "Personal\n\n\nThe Personal section of the oxTrust application, shown below, provides a user with some basic details about their account within the Gluu Server. Currently all information is static, but we plan on developing it out so the user can perform basic self-service profile management.", 
            "title": "Personal"
        }, 
        {
            "location": "/admin-guide/personal/#personal", 
            "text": "The Personal section of the oxTrust application, shown below, provides a user with some basic details about their account within the Gluu Server. Currently all information is static, but we plan on developing it out so the user can perform basic self-service profile management.", 
            "title": "Personal"
        }, 
        {
            "location": "/admin-guide/faq/", 
            "text": "Gluu Server FAQ\n\n\nWhat can I do with a Gluu Server?\n\n\nPeople--employees, customers, and partners-\u2013need to be identified to interact electronically\nwith an organization. Authentication (\nauthn\n) and authorization (\nauthz\n) is a challenge faced\nby almost every organization large enough to register an Internet domain. And it\u2019s not just\npeople that need to be authenticated and authorized. \u201cClients\u201d are online agents that can\ninteract with services on your behalf. With the emergence of the IoT and the API economy,\ndevelopers and system administrators are urgently searching for standards based solutions and\nbest practices to improve the security of web and mobile applications.\n\n\nThe Gluu Server is like a router for authentication and authorization. It speaks multiple dialects\nof SSO, and can help an organization manage both inbound and outbound authentication and authorization\nrequirements.  The Gluu Server is very flexible. Through the use of \"interception scripts\",\nsystem administrators can mold the Gluu Server to solve the exact access management task at hand.\n\n\nHow do I install the Gluu Server?\n\n\nInstructions for installation can be found \nhere\n\n\nWhere can I find license information for the components of the Gluu Server?\n\n\nLicenses for the various components of the Gluu Server can be found \nhere\n\n\nCan I contribute to the Gluu Server?\n\n\nYes, please! Only with community involvement can the Gluu Server become the best free open source access management tool. You can fork the code on \nGitHub\n and push us changes. Your input is greatly appreciated!\n\n\nWhere can I report issues or feedback?\n\n\nPlease feel free to either open issues on \nGitHub\n or you can register for a free account on our \nsupport portal\n. For more Enterprise support, training, and consultations, \nVIP Support\n can be purchased.\n\n\nDo you offer Enterprise Support?\n\n\nYes! You can find more information on our \nwebsite\n.\n\n\nDoes it work for mobile or api access management?\n\n\nYes! The Gluu Server provides interfaces for UMA, a new standardized profile of OAuth2. \nUsing UMA\n you can protect web URLs like APIs and folders and enforce authorization policies for access.\n\n\nHow can the Gluu Server make the Internet a safer place?\n\n\nIt is imperative for our society that we decentralize identity. Facebook and\nGoogle have bridged our inability to identify our friends on the Internet by\nproviding a central identity hub-\u2013you can share a Google doc with someone\nonly if they have a Google account. With a myriad of vendors producing\nhardware and software that interact on our behalf, we cannot build our society on\ncentral identity silos. Like enlightened despotism, it seems efficient. But\nover time, it undermines the design goal of the Internet--the resiliancy\nof autonomous entities cooperating to form one network.  The Internet\nwas made possible by standards like tcp/ip, DNS, http and ssl. After 20 years,\nwe have the standards on which to build the Internet's identity infrastructure.\nFree open source tools like the Gluu Server make these new identity standards\naccessible to the masses. Now any domain can authenticate like Google (or at\nleast using the same API's and conventions).\n\n\nWhy do organizations need the Gluu Server?\n\n\nFor years, deploying an application access management suite was too expensive\nfor any but the largest enterprises, who engineered tightly bundled proprietary\napplication security solutions like Oracle Access Manager, IBM Tivoli Access Manager\nor CA SiteMinder. These security suites used proprietary protocols and resulted in\n\u201cvendor lock-in.\u201d The Gluu server offers an alternative:\nenterprise class access management, using 100% open source components\nthat are free to use in production. This recipe has been developed by Gluu over the\nlast five years, and is proven to work in a variety of deployments around the globe\nthat vary in size from small to humongous.\n\n\nWhy does the Gluu Server rock?\n\n\nThe Gluu server makes simple things easy. For example, if your organization has Active Directory,\nwithout writing any custom code, you can map your users, leverage your existing passwords, and\nconfigure SSO with SAML or OpenID Connect websites. Voila!\n\n\nBut for complex deployments, the Gluu Server is both scalable and flexible.\n\n\nAs mentioned above, the Gluu offers \"interception scripts\" which enable system administrators to use\nJython to specify custom business logic at several critical integration points. The Gluu Server can call other APIs (for example fraud detection\nor strong authentication) to tie together the components of security and identity infrastructure of your domain. Interception scripts are the glue of the Gluu Server. You can implement any crazy plan you can code to define the workflow for authentication, authorization, logout and\nmore.\n\n\nThis Gluu Server has more features and is easier to manage than commercial alternatives. This\nrecipe includes some of the most widely deployed federation components: like the Shibboleth SAML\nIdentity Provider, and some of the most cutting edge security solutions available anywhere: like\nthe OX UMA Authorization Server.\n\n\nFeel confident that you are using the best open source application security software on the\nplanet and even on the Internet too!\n\n\nWho wants open source access management?\n\n\nThe Internet will not become a safer place if only big companies can afford security. If organizations\nhad to pay a license fee for every web, email and DNS server, the Internet would be a much smaller place.\nEven companies that may opt for a non-open-source solution, may need a cost effective solutions to\nrecommend to partners. If you need your partners to support secure open standards for security, you can\u2019t\nask them to buy expensive enterprise software. Finally, privacy advocates around the globe prefer open\nsource security solutions. Black boxes are anathema to application security.\n\n\nWhat are the future identity protocols and is the Gluu Server future-proof?\n\n\nThere is a major paradigm shift happening right now. In the past, there were too many Internet standards for\nweb authentication: OpenID 2.0, OAuth 1.0, WS-Federation, CAS, and many other protocols are on the trash heap\nof failed or fading efforts. Finally, new standards have arisen that use the OAuth2 pattern, leveraging\na JSON/REST API architecture that is friendly to application developers. There is more consensus than ever\non how to achieve interoperable security.\n\n\nIn the future we will see Microsoft release WAAD - Windows Azure Active Directory. This will position\nOpenID Connect to replace Kerberos, LDAP, SAML and WS-Trust as an application protocols to identify a person.\nGoogle is already the biggest OpenID Connect IDP on the Internet, and the most cutting edge user of\nidentity to deliver services. But in addition to these two giants, a sea of service providers will vie to\nhelp organizations manage identity.\n\n\nThe Gluu Server has been leading the OpenID Connect Interop since \nJanuary 2013\n\nWe lead the development of the \nEnterprise UMA\n use case. We also participated\nin the design of the Juju Application Security Protocol, which defines the interfaces between web and mobile\napplications, and the open-standard based security components. We are leading an effort to standardize\nOauth2 multi-party federation. We also have the first implemenation of an OpenID Connect Proxy.\n\n\nThe Gluu Server has always been ahead, and without the constraint of know-it-all venture capitalists, telling\nus how to run our business, we are free to develop not only what the market wants today, but we think\nit needs. And if someone else writes a free open source component that is better than what OX provides,\nwe will abandon our OX component in its favor. This vaccuum cleaner approach to open source enables us\nto stay a step ahead of our slow-footed enterprise competition, getting components to market faster and better.\n\n\nWhat will you learn if you read all the docs?\n\n\nAfter reading the docs, you should be ready to deploy the Gluu Server, and start testing your OpenID Connect,\nSAML, and UMA applications. You will be able to articulate the roadmap for security to developers in your\norganization. Importantly, after reading these docs, programmers, system administrators, and Chief Information\nSecurity Officer should be able to get alignment much more quickly on the important standards, and the\nmoving pieces that need to be addressed from a business perspective, not just a technical perspective.", 
            "title": "FAQ"
        }, 
        {
            "location": "/admin-guide/faq/#gluu-server-faq", 
            "text": "", 
            "title": "Gluu Server FAQ"
        }, 
        {
            "location": "/admin-guide/faq/#what-can-i-do-with-a-gluu-server", 
            "text": "People--employees, customers, and partners-\u2013need to be identified to interact electronically\nwith an organization. Authentication ( authn ) and authorization ( authz ) is a challenge faced\nby almost every organization large enough to register an Internet domain. And it\u2019s not just\npeople that need to be authenticated and authorized. \u201cClients\u201d are online agents that can\ninteract with services on your behalf. With the emergence of the IoT and the API economy,\ndevelopers and system administrators are urgently searching for standards based solutions and\nbest practices to improve the security of web and mobile applications.  The Gluu Server is like a router for authentication and authorization. It speaks multiple dialects\nof SSO, and can help an organization manage both inbound and outbound authentication and authorization\nrequirements.  The Gluu Server is very flexible. Through the use of \"interception scripts\",\nsystem administrators can mold the Gluu Server to solve the exact access management task at hand.", 
            "title": "What can I do with a Gluu Server?"
        }, 
        {
            "location": "/admin-guide/faq/#how-do-i-install-the-gluu-server", 
            "text": "Instructions for installation can be found  here", 
            "title": "How do I install the Gluu Server?"
        }, 
        {
            "location": "/admin-guide/faq/#where-can-i-find-license-information-for-the-components-of-the-gluu-server", 
            "text": "Licenses for the various components of the Gluu Server can be found  here", 
            "title": "Where can I find license information for the components of the Gluu Server?"
        }, 
        {
            "location": "/admin-guide/faq/#can-i-contribute-to-the-gluu-server", 
            "text": "Yes, please! Only with community involvement can the Gluu Server become the best free open source access management tool. You can fork the code on  GitHub  and push us changes. Your input is greatly appreciated!", 
            "title": "Can I contribute to the Gluu Server?"
        }, 
        {
            "location": "/admin-guide/faq/#where-can-i-report-issues-or-feedback", 
            "text": "Please feel free to either open issues on  GitHub  or you can register for a free account on our  support portal . For more Enterprise support, training, and consultations,  VIP Support  can be purchased.", 
            "title": "Where can I report issues or feedback?"
        }, 
        {
            "location": "/admin-guide/faq/#do-you-offer-enterprise-support", 
            "text": "Yes! You can find more information on our  website .", 
            "title": "Do you offer Enterprise Support?"
        }, 
        {
            "location": "/admin-guide/faq/#does-it-work-for-mobile-or-api-access-management", 
            "text": "Yes! The Gluu Server provides interfaces for UMA, a new standardized profile of OAuth2.  Using UMA  you can protect web URLs like APIs and folders and enforce authorization policies for access.", 
            "title": "Does it work for mobile or api access management?"
        }, 
        {
            "location": "/admin-guide/faq/#how-can-the-gluu-server-make-the-internet-a-safer-place", 
            "text": "It is imperative for our society that we decentralize identity. Facebook and\nGoogle have bridged our inability to identify our friends on the Internet by\nproviding a central identity hub-\u2013you can share a Google doc with someone\nonly if they have a Google account. With a myriad of vendors producing\nhardware and software that interact on our behalf, we cannot build our society on\ncentral identity silos. Like enlightened despotism, it seems efficient. But\nover time, it undermines the design goal of the Internet--the resiliancy\nof autonomous entities cooperating to form one network.  The Internet\nwas made possible by standards like tcp/ip, DNS, http and ssl. After 20 years,\nwe have the standards on which to build the Internet's identity infrastructure.\nFree open source tools like the Gluu Server make these new identity standards\naccessible to the masses. Now any domain can authenticate like Google (or at\nleast using the same API's and conventions).", 
            "title": "How can the Gluu Server make the Internet a safer place?"
        }, 
        {
            "location": "/admin-guide/faq/#why-do-organizations-need-the-gluu-server", 
            "text": "For years, deploying an application access management suite was too expensive\nfor any but the largest enterprises, who engineered tightly bundled proprietary\napplication security solutions like Oracle Access Manager, IBM Tivoli Access Manager\nor CA SiteMinder. These security suites used proprietary protocols and resulted in\n\u201cvendor lock-in.\u201d The Gluu server offers an alternative:\nenterprise class access management, using 100% open source components\nthat are free to use in production. This recipe has been developed by Gluu over the\nlast five years, and is proven to work in a variety of deployments around the globe\nthat vary in size from small to humongous.", 
            "title": "Why do organizations need the Gluu Server?"
        }, 
        {
            "location": "/admin-guide/faq/#why-does-the-gluu-server-rock", 
            "text": "The Gluu server makes simple things easy. For example, if your organization has Active Directory,\nwithout writing any custom code, you can map your users, leverage your existing passwords, and\nconfigure SSO with SAML or OpenID Connect websites. Voila!  But for complex deployments, the Gluu Server is both scalable and flexible.  As mentioned above, the Gluu offers \"interception scripts\" which enable system administrators to use\nJython to specify custom business logic at several critical integration points. The Gluu Server can call other APIs (for example fraud detection\nor strong authentication) to tie together the components of security and identity infrastructure of your domain. Interception scripts are the glue of the Gluu Server. You can implement any crazy plan you can code to define the workflow for authentication, authorization, logout and\nmore.  This Gluu Server has more features and is easier to manage than commercial alternatives. This\nrecipe includes some of the most widely deployed federation components: like the Shibboleth SAML\nIdentity Provider, and some of the most cutting edge security solutions available anywhere: like\nthe OX UMA Authorization Server.  Feel confident that you are using the best open source application security software on the\nplanet and even on the Internet too!", 
            "title": "Why does the Gluu Server rock?"
        }, 
        {
            "location": "/admin-guide/faq/#who-wants-open-source-access-management", 
            "text": "The Internet will not become a safer place if only big companies can afford security. If organizations\nhad to pay a license fee for every web, email and DNS server, the Internet would be a much smaller place.\nEven companies that may opt for a non-open-source solution, may need a cost effective solutions to\nrecommend to partners. If you need your partners to support secure open standards for security, you can\u2019t\nask them to buy expensive enterprise software. Finally, privacy advocates around the globe prefer open\nsource security solutions. Black boxes are anathema to application security.", 
            "title": "Who wants open source access management?"
        }, 
        {
            "location": "/admin-guide/faq/#what-are-the-future-identity-protocols-and-is-the-gluu-server-future-proof", 
            "text": "There is a major paradigm shift happening right now. In the past, there were too many Internet standards for\nweb authentication: OpenID 2.0, OAuth 1.0, WS-Federation, CAS, and many other protocols are on the trash heap\nof failed or fading efforts. Finally, new standards have arisen that use the OAuth2 pattern, leveraging\na JSON/REST API architecture that is friendly to application developers. There is more consensus than ever\non how to achieve interoperable security.  In the future we will see Microsoft release WAAD - Windows Azure Active Directory. This will position\nOpenID Connect to replace Kerberos, LDAP, SAML and WS-Trust as an application protocols to identify a person.\nGoogle is already the biggest OpenID Connect IDP on the Internet, and the most cutting edge user of\nidentity to deliver services. But in addition to these two giants, a sea of service providers will vie to\nhelp organizations manage identity.  The Gluu Server has been leading the OpenID Connect Interop since  January 2013 \nWe lead the development of the  Enterprise UMA  use case. We also participated\nin the design of the Juju Application Security Protocol, which defines the interfaces between web and mobile\napplications, and the open-standard based security components. We are leading an effort to standardize\nOauth2 multi-party federation. We also have the first implemenation of an OpenID Connect Proxy.  The Gluu Server has always been ahead, and without the constraint of know-it-all venture capitalists, telling\nus how to run our business, we are free to develop not only what the market wants today, but we think\nit needs. And if someone else writes a free open source component that is better than what OX provides,\nwe will abandon our OX component in its favor. This vaccuum cleaner approach to open source enables us\nto stay a step ahead of our slow-footed enterprise competition, getting components to market faster and better.", 
            "title": "What are the future identity protocols and is the Gluu Server future-proof?"
        }, 
        {
            "location": "/admin-guide/faq/#what-will-you-learn-if-you-read-all-the-docs", 
            "text": "After reading the docs, you should be ready to deploy the Gluu Server, and start testing your OpenID Connect,\nSAML, and UMA applications. You will be able to articulate the roadmap for security to developers in your\norganization. Importantly, after reading these docs, programmers, system administrators, and Chief Information\nSecurity Officer should be able to get alignment much more quickly on the important standards, and the\nmoving pieces that need to be addressed from a business perspective, not just a technical perspective.", 
            "title": "What will you learn if you read all the docs?"
        }, 
        {
            "location": "/reference/api/", 
            "text": "Gluu Server API\n\n\nOpenID Connect\n\n\n\n\nOpenID Connect Authorization Endpoint\n\n\nOpenID Connect Token Endpoint\n\n\nOpenID Connect UserInfo Endpoint\n\n\nOpenID Connect Client Registration Endpoint\n\n\nOpenID Connect End Session Endpoint\n\n\n\n\nUMA\n\n\n\n\nUMA Discovery\n\n\nUMA Resource Registration Endpoint (Create/Update/Delete/Get)\n\n\nUMA Permission Registration Endpoint\n\n\nUMA Create RPT Endpoint\n\n\nUMA RPT Introspection Endpoint\n\n\nUMA Authorization Endpoint\n\n\n\n\nCustom Gluu Endpoints\n\n\n\n\nID Generation", 
            "title": "API"
        }, 
        {
            "location": "/reference/api/#gluu-server-api", 
            "text": "", 
            "title": "Gluu Server API"
        }, 
        {
            "location": "/reference/api/#openid-connect", 
            "text": "OpenID Connect Authorization Endpoint  OpenID Connect Token Endpoint  OpenID Connect UserInfo Endpoint  OpenID Connect Client Registration Endpoint  OpenID Connect End Session Endpoint", 
            "title": "OpenID Connect"
        }, 
        {
            "location": "/reference/api/#uma", 
            "text": "UMA Discovery  UMA Resource Registration Endpoint (Create/Update/Delete/Get)  UMA Permission Registration Endpoint  UMA Create RPT Endpoint  UMA RPT Introspection Endpoint  UMA Authorization Endpoint", 
            "title": "UMA"
        }, 
        {
            "location": "/reference/api/#custom-gluu-endpoints", 
            "text": "ID Generation", 
            "title": "Custom Gluu Endpoints"
        }, 
        {
            "location": "/reference/interception-scripts/", 
            "text": "Interception Scripts\n\n\nThe Gluu Server was designed to be very flexible. Gluu Server admins can use \nJython\n interception scripts to customize behavior.\n\n\nJython was chosen because an interpreted language facilitates dynamic creation of business logic, and makes it easier to distribute this logic to a cluster of Gluu servers.\n\n\nAnother advantage of Jython was that developers can use either Java or Python classes. Combined with the option of calling web services from Python or Java, this enables the Gluu Server to support any business-driven policy requirement.\n\n\nTo access custom scripts within oxTrust, navigate to Configuration \n Manage Custom Scripts.\n\n\nOverview\n\n\nThere are currently 8 options that can be customized by using interception scripts.    \n\n\n\n\nApplication Session Management\n         \n\n\nAuthentication\n     \n\n\nAuthorization\n       \n\n\nCache Refresh\n       \n\n\nClient Registration\n       \n\n\nID Generation\n       \n\n\nUpdate User\n       \n\n\nUser Registration\n       \n\n\n\n\nAll script types inherit a base interface which has 3 methods:   \n\n\ndef init(self, configurationAttributes):\n      \n\n\ndef destroy(self, configurationAttributes):\n       \n\n\ndef getApiVersion(self):\n      \n\n\nThe \nconfigurationAttributes\n parameter is \njava.util.Map\nString, SimpleCustomProperty\n with properties specified in \noxConfigurationProperty\n attributes.   \n\n\nThe \ninit\n and \ndestroy\n methods are called only one time during the script initialization and script destroy events. The \ninit\n method can be used to do global script initialization, initiate objects, etc. The \ndestroy\n method can be used to free resources and objects created in the \ninit\n method.    \n\n\nThe script manager only loads enabled scripts. Hence, after enabling a script, the script manager should trigger an event to load or destroy script. \n\n\nAll scripts are stored in LDAP in the \nou=scripts,o=\norg_inum\n,o=gluu\n branch.  \n\n\nThis is a sample entry:     \n\n\ndn: inum=@!1111!031C.4A65,ou=scripts,o=@!1111,o=gluu\nobjectClass: oxCustomScript\nobjectClass: top\ndescription: \ncustom_script_description\n\ndisplayName: \ndisplay_name\n\ngluuStatus: true\ninum: @!1111!031C.4A65\noxLevel: \npriority\n\noxModuleProperty: {\"value1\":\"module_property_name\",\"value2\":\"module_property_value\",\"description\":\"\"}\noxConfigurationProperty: {\"value1\":\"configuration_property_name\",\"value2\":\"configuration_property_value\",\"description\":\"\"}\noxRevision: \nrevision\n\noxScript: \ncustom_script\n\noxScriptType: \nscript_type\n\nprogrammingLanguage: python\n\n\n\nThe script manager reloads scripts automatically without needing to restart the application once \noxRevision\n is increased.\n\n\nThe \ngetApiVersion\n method allows API changes in order to do transparent migration from an old script to a new API. Currently all scripts should return 1. For example, in the future we can extend the API of any script and call new method(s) only if API version \n 2, etc. exists. \n\n\nApplication Session Management\n\n\nThis script allows an admin to notify 3rd party systems about requests to end an OAuth session. This method is triggered by an oxAuth call to the \nend_session\n endpoint. It's possible to add multiple scripts with this type. The application should call all of them according to the level.\n\n\nThis script type adds only one method to base scipt type:    \n\n\ndef endSession(self, httpRequest, authorizationGrant, configurationAttributes):\n       \n\n\nThese are the types of parameters:  \n\n- \nhttpRequest\n is \njavax.servlet.http.HttpServletRequest\n    \n\n- \nauthorizationGrant\n is \norg.xdi.oxauth.model.common.AuthorizationGrant\n    \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n        \n\n\nThis script can be used in oxAuth application only.\n\n\n\n\nSample Application Session Management Script\n\n\n\n\nAuthentication\n\n\nAn authentication script enables you to customize the user authentication experience. For example, you can write a script that enables a two-factor authentication mechnaism like Duo Security. By default oxAuth uses simple username/password authentication method. This scipt type allows an admin to implement more secure workflows to cover an organizations security requirements. It extends the base scipt type with the \ninit\n, \ndestroy\n and \ngetApiVersion\n methods but also adds the following methods:    \n\n\ndef isValidAuthenticationMethod(self, usageType, configurationAttributes):\n\n\ndef getAlternativeAuthenticationMethod(self, usageType, configurationAttributes):\n\n\ndef authenticate(self, configurationAttributes, requestParameters, step):\n     \n\n\ndef prepareForStep(self, configurationAttributes, requestParameters, step):\n   \n\n\ndef getCountAuthenticationSteps(self, configurationAttributes):\n   \n\n\ndef getExtraParametersForStep(self, configurationAttributes, step):\n   \n\n\ndef getPageForStep(self, configurationAttributes, step):\n      \n\n\ndef logout(self, configurationAttributes, requestParameters):\n     \n\n\nThe \nisValidAuthenticationMethod\n method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is avalable to authenticate users. As a result it should return \nTrue\n or \nFalse\n.\n\n\nThis method has the following parameters:  \n\n- \nusageType\n is \norg.xdi.model.AuthenticationScriptUsageType\n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n    \n\n\nThe \ngetAlternativeAuthenticationMethod\n method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if \nisValidAuthenticationMethod\n returns \nFalse\n. As a result it should return the reserved authentication method name.\n\n\nThis method has the following parameters:  \n\n- \nusageType\n is \norg.xdi.model.AuthenticationScriptUsageType\n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n    \n\n\nThe \nauthenticate\n method is the key method within the person authentication script. It checks if the user has passed the specified step or not. As a result it should return \nTrue\n or \nFalse\n.\n\n\nThis method has the following parameters:  \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n  \n\n- \nrequestParameters\n is \njava.util.Map\nString, String[]\n\n- step is a java integer\n\n\nThe \nprepareForStep\n method can be used to prepare variables needed to render login page and store them in event context.\nAs a result it should return \nTrue\n or \nFalse\n. \n\n\nThis method has the following parameters:  \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n  \n\n- \nrequestParameters\n is \njava.util.Map\nString, String[]\n\n- step is a java integer\n\n\nThe \ngetCountAuthenticationSteps\n method should return an integer value with the number of steps in the authentication workflow.\n\n\nThis method has the following parameters:  \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n    \n\n\nThe \ngetExtraParametersForStep\n method provides a way to notify the authenticator that it should store specified event context parameters event in the oxAuth session. It's needed in few cases, for example when an authentication script redirects the user to a 3rd party authentication system and expects the workflow to resume after that. As a result it should return a java array of strings.\n\n\nThis method has the following parameters:  \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n  \n\n- step is a java integer    \n\n\nThe \ngetPageForStep\n method allows the admin to render a required page for a specified authentication step. It should return a string value with a path to an XHTML page. If the return value is empty or null, the authenticator should render the default log in page \n/login.xhtml\n.\n\n\nThis method has the following parameters:   \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n  \n\n- step is a java integer    \n\n\nThe \nlogout\n method is not mandatory. It can be used in cases when you need to execute specific logout logic within the authentication scipt when oxAuth receives an end session request. Also it allows oxAuth to stop processing the end session request workflow if it returns \nFalse\n. As result it should return \nTrue\n or \nFalse\n.\n\n\nThis method has the following parameters:   \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n  \n\n- \nrequestParameters\n is \njava.util.Map\nString, String[]\n  \n\n\nThis script can be used in oxAuth application only.\n\n\nFor a complete list of pre-written, open source Gluu authentication scripts, view our \nserver integrations\n\n\n\n\nSample Authentication Script\n \n\n\n\n\nAuthorization\n\n\nThis is a special script for UMA. It allows an admin to protect UMA scopes with policies. It's possible to add more than one UMA policy to an UMA scope. On requesting access to a specified resource, the application should call specified UMA policies in order to grant/deny access.\n\n\nThis script type adds only one method to base scipt type:    \n\n\ndef authorize(self, authorizationContext, configurationAttributes):\n   \n\n\nThese are types of parameters:   \n\n- \nauthorizationContext\n is \norg.xdi.oxauth.service.uma.authorization.AuthorizationContext\n   \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n        \n\n\nThis script can be used in oxAuth application only.\n\n\n\n\nSample Authorization Script\n   \n\n\n\n\nCache Refresh\n\n\nIn order to integrate with an existing authentication server oxTrust provides a mechanism called \nCache Refresh\n to copy user data to the local LDAP server. During this process it's posible to specify key attribute(s) and specify attribute name transformations. There are also cases when it can be used to overwrite attribute values or add new attributes based on other attributes values. \n\n\nThis script type adds only one method to base scipt type:     \n\n\ndef updateUser(self, user, configurationAttributes):\n      \n\n\nThese are types of parameters:   \n\n- \nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\n     \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n        \n\n\nThis script can be used in oxTrust application only.\n\n\n\n\nSample Cache Refresh Script\n       \n\n\n\n\nClient Registration\n\n\noxAuth implements the \nOpenID Connect dynamic client registration\n specification. All new clients have the same default access scopes and attributes except password and client ID. The Client Registration script allows an admin to modify this limitation. In this script it's possible to get a registration request, analyze it, and apply customizations to registered clients. For example, a script can give access to specified scopes if \nredirect_uri\n belongs to a specifed service or domain. \n\n\nThis script type adds only one method to base scipt type:    \n\n\ndef updateClient(self, registerRequest, client, configurationAttributes):\n     \n\n\nThese are types of parameters:   \n\n- \nregisterRequest\n is \norg.xdi.oxauth.client.RegisterRequest\n    \n\n- \nclient\n is \norg.xdi.oxauth.model.registration.Client\n      \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n        \n\n\nThis script can be used in oxAuth application only.\n\n\n\n\nSample Client Registration Script\n      \n\n\n\n\nID Generation\n\n\nBy default oxAuth/oxTrust uses an internal method to generate unique identifiers for new person/client, etc. entries. In most cases the format of the ID is:    \n\n\n'!' + idType.getInum() + '!' + four_random_HEX_characters + '.' + four_random_HEX_characters.\n     \n\n\nThe ID generation script enables an admin to implement custom ID generation rules. \n\n\nThis script type adds only one method to base scipt type:     \n\n\ndef generateId(self, appId, idType, idPrefix, configurationAttributes):\n       \n\n\nThese are types of parameters:   \n\n- \nappId\n is application ID   \n\n- \nidType\n is ID Type     \n\n- \nidPrefix\n is ID Prefix     \n\n- \nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\n     \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n        \n\n\nThis script can be used in oxTrust application only.     \n\n\n\n\nSample ID Generation Script\n      \n\n\n\n\nUpdate User\n\n\noxTrust allows an admin to add and modify users wich belong to groups. In order to simplify this process and apply repeating actions, oxTrust supports an Update User script. In this script it's possible to modify a person entry before it is persisted in LDAP.\n\n\nThis script type adds only one method to base scipt type:     \n\n\ndef updateUser(self, user, persisted, configurationAttributes):\n       \n\n\nThese are types of parameters:   \n\n- \nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\n     \n\n- persisted is boolean value to specify if operation type: add/modify     \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n        \n\n\nThis script can be used in oxTrust application only.     \n\n\n\n\nSample Update User Script\n       \n\n\n\n\nUser Registration\n\n\noxTrust allows users to perform self-registration. In order to control/validate user registrations there is the user registration script type.\n\n\nThis script type adds three methods to the base scipt type:     \n\n\ndef initRegistration(self, user, requestParameters, configurationAttributes):\n     \n\n\ndef preRegistration(self, user, requestParameters, configurationAttributes):\n      \n\n\ndef postRegistration(self, user, requestParameters, configurationAttributes):\n     \n\n\nAll these methods expect the same parameters:    \n\n- \nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\n     \n\n- \nrequestParameters\n is \njava.util.Map\nString, String[]\n    \n\n- \nconfigurationAttributes\n is \njava.util.Map\nString, SimpleCustomProperty\n        \n\n\nFirst oxTrust executes the \ninitRegistration\n method to do inital user entry update. The \npreRegistration\n method is called  before persisting the user entry in LDAP. Hence in this script it's possible to validate the user entry. The \npostRegistration\n method is called after successfully persisting the user entry in LDAP. In this method, for example, the script can send an e-mail or send notifications to other organization systems about the new user entry.\n\n\nAll three methods should return \nTrue\n or \nFalse\n.       \n\n\n\n\nSample User Registration Script", 
            "title": "Interception Scripts"
        }, 
        {
            "location": "/reference/interception-scripts/#interception-scripts", 
            "text": "The Gluu Server was designed to be very flexible. Gluu Server admins can use  Jython  interception scripts to customize behavior.  Jython was chosen because an interpreted language facilitates dynamic creation of business logic, and makes it easier to distribute this logic to a cluster of Gluu servers.  Another advantage of Jython was that developers can use either Java or Python classes. Combined with the option of calling web services from Python or Java, this enables the Gluu Server to support any business-driven policy requirement.  To access custom scripts within oxTrust, navigate to Configuration   Manage Custom Scripts.", 
            "title": "Interception Scripts"
        }, 
        {
            "location": "/reference/interception-scripts/#overview", 
            "text": "There are currently 8 options that can be customized by using interception scripts.       Application Session Management            Authentication        Authorization          Cache Refresh          Client Registration          ID Generation          Update User          User Registration           All script types inherit a base interface which has 3 methods:     def init(self, configurationAttributes):         def destroy(self, configurationAttributes):          def getApiVersion(self):         The  configurationAttributes  parameter is  java.util.Map String, SimpleCustomProperty  with properties specified in  oxConfigurationProperty  attributes.     The  init  and  destroy  methods are called only one time during the script initialization and script destroy events. The  init  method can be used to do global script initialization, initiate objects, etc. The  destroy  method can be used to free resources and objects created in the  init  method.      The script manager only loads enabled scripts. Hence, after enabling a script, the script manager should trigger an event to load or destroy script.   All scripts are stored in LDAP in the  ou=scripts,o= org_inum ,o=gluu  branch.    This is a sample entry:       dn: inum=@!1111!031C.4A65,ou=scripts,o=@!1111,o=gluu\nobjectClass: oxCustomScript\nobjectClass: top\ndescription:  custom_script_description \ndisplayName:  display_name \ngluuStatus: true\ninum: @!1111!031C.4A65\noxLevel:  priority \noxModuleProperty: {\"value1\":\"module_property_name\",\"value2\":\"module_property_value\",\"description\":\"\"}\noxConfigurationProperty: {\"value1\":\"configuration_property_name\",\"value2\":\"configuration_property_value\",\"description\":\"\"}\noxRevision:  revision \noxScript:  custom_script \noxScriptType:  script_type \nprogrammingLanguage: python  The script manager reloads scripts automatically without needing to restart the application once  oxRevision  is increased.  The  getApiVersion  method allows API changes in order to do transparent migration from an old script to a new API. Currently all scripts should return 1. For example, in the future we can extend the API of any script and call new method(s) only if API version   2, etc. exists.", 
            "title": "Overview"
        }, 
        {
            "location": "/reference/interception-scripts/#application-session-management", 
            "text": "This script allows an admin to notify 3rd party systems about requests to end an OAuth session. This method is triggered by an oxAuth call to the  end_session  endpoint. It's possible to add multiple scripts with this type. The application should call all of them according to the level.  This script type adds only one method to base scipt type:      def endSession(self, httpRequest, authorizationGrant, configurationAttributes):          These are the types of parameters:   \n-  httpRequest  is  javax.servlet.http.HttpServletRequest      \n-  authorizationGrant  is  org.xdi.oxauth.model.common.AuthorizationGrant      \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty           This script can be used in oxAuth application only.   Sample Application Session Management Script", 
            "title": "Application Session Management"
        }, 
        {
            "location": "/reference/interception-scripts/#authentication", 
            "text": "An authentication script enables you to customize the user authentication experience. For example, you can write a script that enables a two-factor authentication mechnaism like Duo Security. By default oxAuth uses simple username/password authentication method. This scipt type allows an admin to implement more secure workflows to cover an organizations security requirements. It extends the base scipt type with the  init ,  destroy  and  getApiVersion  methods but also adds the following methods:      def isValidAuthenticationMethod(self, usageType, configurationAttributes):  def getAlternativeAuthenticationMethod(self, usageType, configurationAttributes):  def authenticate(self, configurationAttributes, requestParameters, step):        def prepareForStep(self, configurationAttributes, requestParameters, step):      def getCountAuthenticationSteps(self, configurationAttributes):      def getExtraParametersForStep(self, configurationAttributes, step):      def getPageForStep(self, configurationAttributes, step):         def logout(self, configurationAttributes, requestParameters):        The  isValidAuthenticationMethod  method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is avalable to authenticate users. As a result it should return  True  or  False .  This method has the following parameters:   \n-  usageType  is  org.xdi.model.AuthenticationScriptUsageType \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty       The  getAlternativeAuthenticationMethod  method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if  isValidAuthenticationMethod  returns  False . As a result it should return the reserved authentication method name.  This method has the following parameters:   \n-  usageType  is  org.xdi.model.AuthenticationScriptUsageType \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty       The  authenticate  method is the key method within the person authentication script. It checks if the user has passed the specified step or not. As a result it should return  True  or  False .  This method has the following parameters:   \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty    \n-  requestParameters  is  java.util.Map String, String[] \n- step is a java integer  The  prepareForStep  method can be used to prepare variables needed to render login page and store them in event context.\nAs a result it should return  True  or  False .   This method has the following parameters:   \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty    \n-  requestParameters  is  java.util.Map String, String[] \n- step is a java integer  The  getCountAuthenticationSteps  method should return an integer value with the number of steps in the authentication workflow.  This method has the following parameters:   \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty       The  getExtraParametersForStep  method provides a way to notify the authenticator that it should store specified event context parameters event in the oxAuth session. It's needed in few cases, for example when an authentication script redirects the user to a 3rd party authentication system and expects the workflow to resume after that. As a result it should return a java array of strings.  This method has the following parameters:   \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty    \n- step is a java integer      The  getPageForStep  method allows the admin to render a required page for a specified authentication step. It should return a string value with a path to an XHTML page. If the return value is empty or null, the authenticator should render the default log in page  /login.xhtml .  This method has the following parameters:    \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty    \n- step is a java integer      The  logout  method is not mandatory. It can be used in cases when you need to execute specific logout logic within the authentication scipt when oxAuth receives an end session request. Also it allows oxAuth to stop processing the end session request workflow if it returns  False . As result it should return  True  or  False .  This method has the following parameters:    \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty    \n-  requestParameters  is  java.util.Map String, String[]     This script can be used in oxAuth application only.  For a complete list of pre-written, open source Gluu authentication scripts, view our  server integrations   Sample Authentication Script", 
            "title": "Authentication"
        }, 
        {
            "location": "/reference/interception-scripts/#authorization", 
            "text": "This is a special script for UMA. It allows an admin to protect UMA scopes with policies. It's possible to add more than one UMA policy to an UMA scope. On requesting access to a specified resource, the application should call specified UMA policies in order to grant/deny access.  This script type adds only one method to base scipt type:      def authorize(self, authorizationContext, configurationAttributes):      These are types of parameters:    \n-  authorizationContext  is  org.xdi.oxauth.service.uma.authorization.AuthorizationContext     \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty           This script can be used in oxAuth application only.   Sample Authorization Script", 
            "title": "Authorization"
        }, 
        {
            "location": "/reference/interception-scripts/#cache-refresh", 
            "text": "In order to integrate with an existing authentication server oxTrust provides a mechanism called  Cache Refresh  to copy user data to the local LDAP server. During this process it's posible to specify key attribute(s) and specify attribute name transformations. There are also cases when it can be used to overwrite attribute values or add new attributes based on other attributes values.   This script type adds only one method to base scipt type:       def updateUser(self, user, configurationAttributes):         These are types of parameters:    \n-  user  is  org.gluu.oxtrust.model.GluuCustomPerson       \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty           This script can be used in oxTrust application only.   Sample Cache Refresh Script", 
            "title": "Cache Refresh"
        }, 
        {
            "location": "/reference/interception-scripts/#client-registration", 
            "text": "oxAuth implements the  OpenID Connect dynamic client registration  specification. All new clients have the same default access scopes and attributes except password and client ID. The Client Registration script allows an admin to modify this limitation. In this script it's possible to get a registration request, analyze it, and apply customizations to registered clients. For example, a script can give access to specified scopes if  redirect_uri  belongs to a specifed service or domain.   This script type adds only one method to base scipt type:      def updateClient(self, registerRequest, client, configurationAttributes):        These are types of parameters:    \n-  registerRequest  is  org.xdi.oxauth.client.RegisterRequest      \n-  client  is  org.xdi.oxauth.model.registration.Client        \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty           This script can be used in oxAuth application only.   Sample Client Registration Script", 
            "title": "Client Registration"
        }, 
        {
            "location": "/reference/interception-scripts/#id-generation", 
            "text": "By default oxAuth/oxTrust uses an internal method to generate unique identifiers for new person/client, etc. entries. In most cases the format of the ID is:      '!' + idType.getInum() + '!' + four_random_HEX_characters + '.' + four_random_HEX_characters.        The ID generation script enables an admin to implement custom ID generation rules.   This script type adds only one method to base scipt type:       def generateId(self, appId, idType, idPrefix, configurationAttributes):          These are types of parameters:    \n-  appId  is application ID    \n-  idType  is ID Type      \n-  idPrefix  is ID Prefix      \n-  user  is  org.gluu.oxtrust.model.GluuCustomPerson       \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty           This script can be used in oxTrust application only.        Sample ID Generation Script", 
            "title": "ID Generation"
        }, 
        {
            "location": "/reference/interception-scripts/#update-user", 
            "text": "oxTrust allows an admin to add and modify users wich belong to groups. In order to simplify this process and apply repeating actions, oxTrust supports an Update User script. In this script it's possible to modify a person entry before it is persisted in LDAP.  This script type adds only one method to base scipt type:       def updateUser(self, user, persisted, configurationAttributes):          These are types of parameters:    \n-  user  is  org.gluu.oxtrust.model.GluuCustomPerson       \n- persisted is boolean value to specify if operation type: add/modify      \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty           This script can be used in oxTrust application only.        Sample Update User Script", 
            "title": "Update User"
        }, 
        {
            "location": "/reference/interception-scripts/#user-registration", 
            "text": "oxTrust allows users to perform self-registration. In order to control/validate user registrations there is the user registration script type.  This script type adds three methods to the base scipt type:       def initRegistration(self, user, requestParameters, configurationAttributes):        def preRegistration(self, user, requestParameters, configurationAttributes):         def postRegistration(self, user, requestParameters, configurationAttributes):        All these methods expect the same parameters:     \n-  user  is  org.gluu.oxtrust.model.GluuCustomPerson       \n-  requestParameters  is  java.util.Map String, String[]      \n-  configurationAttributes  is  java.util.Map String, SimpleCustomProperty           First oxTrust executes the  initRegistration  method to do inital user entry update. The  preRegistration  method is called  before persisting the user entry in LDAP. Hence in this script it's possible to validate the user entry. The  postRegistration  method is called after successfully persisting the user entry in LDAP. In this method, for example, the script can send an e-mail or send notifications to other organization systems about the new user entry.  All three methods should return  True  or  False .          Sample User Registration Script", 
            "title": "User Registration"
        }, 
        {
            "location": "/reference/ldap-namespace/", 
            "text": "LDAP Namespace\n\n\nThe LDAP Namespace, or Directory Information Tree (DIT) structure, is the convention for naming\nentries in LDAP so that they form a hierarchical tree structure.\n\n\nIn general, the Gluu Server tries to keep the data pretty flat. But at times, we use the \nnamespace to store information that is relative to a certain entry. \n\n\nThere are two root namespaces in the Gluu Server: \no=gluu\n and \no=site\n. The \no=gluu\n namespace\nis used to store all the important configuration and entity data. The \no=site\n DIT is used\nonly when identities are being synchronized from an external LDAP server using the Gluu\nServer Cache Refresh feature.\n\n\nThe following table has a list of all the major branches of the tree under \no=gluu\n:\n\n\n\n\n\n\n\n\nbase DN\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nou=appliances,o=gluu\n\n\noxTrust configuration information for the instance\n\n\n\n\n\n\no=1234,o=gluu\n\n\norganization entry, ipV6 style id by default\n\n\n\n\n\n\nou=people,o=1234,o=gluu\n\n\nUser entities\n\n\n\n\n\n\nou=groups,o=1234,o=gluu\n\n\nGroup entities\n\n\n\n\n\n\nou=clients,o=1234,o=gluu\n\n\nOAuth2 client entities\n\n\n\n\n\n\nou=attributes,o=1234,o=gluu\n\n\nAttribute or user claim metadata\n\n\n\n\n\n\nou=scopes,o=1234,o=gluu\n\n\nOauth2 scope entities\n\n\n\n\n\n\nou=session,o=1234,o=gluu\n\n\noxAuth Session data (if persistent sessions are enabled\n\n\n\n\n\n\nou=uma,o=1234,o=gluu\n\n\nUMA policies, scopes, and resource sets\n\n\n\n\n\n\nou=push,o=1234,o=gluu\n\n\nMobile device metadata used by oxPush\n\n\n\n\n\n\nou=federation,o=1234,o=gluu\n\n\nOAuth2 federation metadata\n\n\n\n\n\n\nou=oxProx,o=1234,o=gluu\n\n\noxProx configuration data", 
            "title": "LDAP Namespace"
        }, 
        {
            "location": "/reference/ldap-namespace/#ldap-namespace", 
            "text": "The LDAP Namespace, or Directory Information Tree (DIT) structure, is the convention for naming\nentries in LDAP so that they form a hierarchical tree structure.  In general, the Gluu Server tries to keep the data pretty flat. But at times, we use the \nnamespace to store information that is relative to a certain entry.   There are two root namespaces in the Gluu Server:  o=gluu  and  o=site . The  o=gluu  namespace\nis used to store all the important configuration and entity data. The  o=site  DIT is used\nonly when identities are being synchronized from an external LDAP server using the Gluu\nServer Cache Refresh feature.  The following table has a list of all the major branches of the tree under  o=gluu :     base DN  Description      ou=appliances,o=gluu  oxTrust configuration information for the instance    o=1234,o=gluu  organization entry, ipV6 style id by default    ou=people,o=1234,o=gluu  User entities    ou=groups,o=1234,o=gluu  Group entities    ou=clients,o=1234,o=gluu  OAuth2 client entities    ou=attributes,o=1234,o=gluu  Attribute or user claim metadata    ou=scopes,o=1234,o=gluu  Oauth2 scope entities    ou=session,o=1234,o=gluu  oxAuth Session data (if persistent sessions are enabled    ou=uma,o=1234,o=gluu  UMA policies, scopes, and resource sets    ou=push,o=1234,o=gluu  Mobile device metadata used by oxPush    ou=federation,o=1234,o=gluu  OAuth2 federation metadata    ou=oxProx,o=1234,o=gluu  oxProx configuration data", 
            "title": "LDAP Namespace"
        }, 
        {
            "location": "/reference/ldap-schema/", 
            "text": "Schema\n\n\nBelow are schema for OpenDJ and OpenLDAP.  OpenDJ schema should work for 389DS too:  \n\n\n\n\nOpenDJ\n\n\nOpenLDAP\n\n\n\n\nObjectclass gluuAppliance\n\n\n\n\nDescription\n \n\n\nblowfishPassword\n Blowfish crypted text\n\n\nc\n \n\n\ndescription\n \n\n\ndisplayName\n \n\n\ngluuAdditionalBandwidth\n Track bandwidth requirements for the Gluu Server instance\n\n\ngluuAdditionalMemory\n Track additional memory requirements for the Gluu Server instance.\n\n\ngluuApplianceDnsServer\n Persist the DNS server that should be used for the Gluu Server instance.\n\n\ngluuAppliancePollingInterval\n Set the frequency of the health status update of the Gluu Server\n\n\ngluuBandwidthRX\n Track data received by the Gluu Server\n\n\ngluuBandwidthTX\n Track data sent by the Gluu Server\n\n\ngluuBillingEmail\n Billing Alert Email Address\n\n\ngluuCentreonEmail\n TODO - in use? Email Address to send monitoring alerts\n\n\ngluuDSstatus\n Monitor health of the instance LDAP server.\n\n\ngluuFederationHostingEnabled\n oxTrust flag for the federation feature. Values enabled or disabled.\n\n\ngluuFreeDiskSpace\n Monitor free disk space on the Gluu Server instance\n\n\ngluuFreeMemory\n Monitor free memory on the Gluu Server instance\n\n\ngluuFreeSwap\n Monitor swap space on the Gluu Server instance\n\n\ngluuGroupCount\n Monitor the number of groups. TODO - Remove?\n\n\ngluuHTTPstatus\n Monitor HTTP availability of the Gluu Server instance\n\n\ngluuHostname\n The hostname of the Gluu Server instance\n\n\ngluuInvoiceNo\n TODO - in use?\n\n\ngluuIpAddress\n IP address of the Gluu Server instance\n\n\ngluuJiraEmail\n TODO - in use? Jira Alert Email Address\n\n\ngluuLastUpdate\n Monitors last time the server was able to connect to the monitoring system.\n\n\ngluuLifeRay\n None\n\n\ngluuLoadAvg\n Montior the average CPU load for a Gluu Server instance.\n\n\ngluuManageIdentityPermission\n TODO - in use?\n\n\ngluuManager\n Used to specify if a person has the manager role\n\n\ngluuMaxLogSize\n Maximum Log File Size\n\n\ngluuOrgProfileMgt\n enable or disable profile management feature in oxTrust\n\n\ngluuPaidUntil\n TODO - in use?\n\n\ngluuPaymentProcessorTimestamp\n TODO - in use?\n\n\ngluuPersonCount\n Monitor the number of people in the LDAP severs for a Gluu Server instance\n\n\ngluuPrivacyEmail\n Privacy Alert Email Address used by oxTrust.\n\n\ngluuPrivate\n TODO - in use?\n\n\ngluuPublishIdpMetadata\n Gluu Server flag to publish the IDP metadata via the web server\n\n\ngluuResizeInitiated\n TODO - in use?\n\n\ngluuSPTR\n TODO - in use?\n\n\ngluuScimEnabled\n oxTrust SCIM feature - enabled or disabled\n\n\ngluuShibAssertionsIssued\n Monitors activity of Gluu Server Shibboleth IDP\n\n\ngluuShibFailedAuth\n Monitors failed login attempts on Gluu Server Shibboleth IDP\n\n\ngluuShibSecurityEvents\n Monitors security events on Gluu Server Shibboleth IDP\n\n\ngluuShibSuccessfulAuths\n Monitors login attempts on Gluu Server Shibboleth IDP\n\n\ngluuSmtpFromEmailAddress\n SMTP From Email Address\n\n\ngluuSmtpFromName\n SMTP From Name\n\n\ngluuSmtpHost\n SMTP Host\n\n\ngluuSmtpPassword\n SMTP User Password\n\n\ngluuSmtpPort\n SMTP Port\n\n\ngluuSmtpRequiresAuthentication\n SMTP Requires Authentication\n\n\ngluuSmtpRequiresSsl\n SMTP Requires SSL\n\n\ngluuSmtpUserName\n SMTP User Name\n\n\ngluuSslExpiry\n SAML Trust Relationship configuration\n\n\ngluuStatus\n Status of the entry, used by many objectclasses\n\n\ngluuSvnEmail\n SVN Alert Email Address\n\n\ngluuSystemUptime\n Monitors how long the Gluu Server instance has been running.\n\n\ngluuTargetRAM\n Monitors total available RAM on Gluu Server instance\n\n\ngluuUrl\n Gluu instance URL\n\n\ngluuVDSenabled\n oxTrust VDS enabled or disabled\n\n\ngluuVDSstatus\n Gluu VDS configuration\n\n\ngluuVdsCacheRefreshEnabled\n None\n\n\ngluuVdsCacheRefreshLastUpdate\n None\n\n\ngluuVdsCacheRefreshLastUpdateCount\n None\n\n\ngluuVdsCacheRefreshPollingInterval\n None\n\n\ngluuVdsCacheRefreshProblemCount\n None\n\n\ngluuWhitePagesEnabled\n None\n\n\niname\n None\n\n\ninum\n XRI i-number\n\n\ninumFN\n XRI i-number sans punctuation\n\n\no\n \n\n\noxAuthenticationLevel\n None\n\n\noxAuthenticationMode\n None\n\n\noxClusterType\n Type of the underlying clustering mechanism\n\n\noxClusteredServers\n List of the clustering partners of this server\n\n\noxIDPAuthentication\n Custom IDP authentication configuration\n\n\noxLogViewerConfig\n Log viewer configuration\n\n\noxMemcachedServerAddress\n Initialization string for memcached client\n\n\noxSmtpConfiguration\n SMTP configuration\n\n\noxTrustStoreCert\n oxPush device configuration\n\n\noxTrustStoreConf\n oxPush application configuration\n\n\npasswordResetAllowed\n Is password reset mechanics allowed\n\n\nsoftwareVersion\n None\n\n\nuserPassword\n \n\n\noxTrustCacheRefreshServerIpAddress\n None\n\n\n\n\nObjectclass gluuAttribute\n\n\n\n\nDescription\n \n\n\ndescription\n \n\n\ndisplayName\n \n\n\ngluuAttributeEditType\n Specify in oxTrust who can update an attribute, admin or user\n\n\ngluuAttributeName\n Specify an identifier for an attribute. May be multi-value where an attribute has two names, like givenName and first-name.\n\n\ngluuAttributeOrigin\n Specify the person objectclass associated with the attribute, used for display purposes in oxTrust.\n\n\ngluuAttributeSystemEditType\n TODO - still required?\n\n\ngluuAttributeType\n Data type of attribute. Values can be string, photo, numeric, date\n\n\ngluuAttributeUsageType\n TODO - Usage? Value can be OpenID\n\n\ngluuAttributeViewType\n Specify in oxTrust who can view an attribute, admin or user\n\n\ngluuCategory\n TODO - in use? Used to group attributes together.\n\n\ngluuSAML1URI\n SAML 1 uri of attribute\n\n\ngluuSAML2URI\n SAML 2 uri of attribute\n\n\ngluuStatus\n Status of the entry, used by many objectclasses\n\n\niname\n None\n\n\ninum\n XRI i-number\n\n\nobjectClass\n \n\n\noxAttributeType\n NameId or attribute\n\n\noxMultivaluedAttribute\n None\n\n\noxNameIdType\n NameId Type\n\n\noxSCIMCustomAttribute\n None\n\n\noxSourceAttribute\n Source Attribute for this Attribute\n\n\nseeAlso\n \n\n\nurn\n None\n\n\noxAuthClaimName\n Used by oxAuth in conjunction with gluuLdapAttributeName to map claims to attributes in LDAP.\n\n\n\n\nObjectclass gluuGroup\n\n\n\n\nDescription\n \n\n\nc\n \n\n\ndescription\n \n\n\ndisplayName\n \n\n\ngluuGroupType\n Type of Group. Not used.\n\n\ngluuGroupVisibility\n Group visibility. Not used.\n\n\ngluuStatus\n Status of the entry, used by many objectclasses\n\n\niname\n None\n\n\ninum\n XRI i-number\n\n\nmember\n \n\n\no\n \n\n\nowner\n \n\n\nseeAlso\n \n\n\n\n\nObjectclass gluuInumMap\n\n\n\n\nDescription\n \n\n\ngluuStatus\n Status of the entry, used by many objectclasses\n\n\ninum\n XRI i-number\n\n\nprimaryKeyAttrName\n Primary Key Attribute Name\n\n\nprimaryKeyValue\n Primary Key Value\n\n\nsecondaryKeyAttrName\n Secondary Key Attribute Name\n\n\nsecondaryKeyValue\n Secondary Key Value\n\n\ntertiaryKeyAttrName\n Tertiary Key Attribute Name\n\n\ntertiaryKeyValue\n Tertiary Key Value\n\n\n\n\nObjectclass gluuInvoice\n\n\n\n\nDescription\n \n\n\ngluuInvoiceAmount\n TODO - in use?\n\n\ngluuInvoiceDate\n TODO - in use?\n\n\ngluuInvoiceLineItemName\n TODO - in use?\n\n\ngluuInvoiceNumber\n TODO - in use?\n\n\ngluuInvoiceProductNumber\n TODO - in use?\n\n\ngluuInvoiceQuantity\n TODO - in use?\n\n\ngluuInvoiceStatus\n TODO - in use?\n\n\ninum\n XRI i-number\n\n\n\n\nObjectclass gluuOrganization\n\n\n\n\nDescription\n \n\n\nc\n \n\n\ncounty\n ISO 3166-1 Alpha-2 Country Code\n\n\ndeployedAppliances\n Track which appliances are deployed at an organization.\n\n\ndescription\n \n\n\ndisplayName\n \n\n\ngluuAddPersonCapability\n Organizational attribute to control whether new users can be added via the oxTrust GUI.\n\n\ngluuAdditionalUsers\n TODO : use unclear\n\n\ngluuApplianceUpdateRequestList\n Used by the Gluu Server to request an update\n\n\ngluuCustomMessage\n oxTrust custom welcome message\n\n\ngluuFaviconImage\n TODO - Stores URL of favicon\n\n\ngluuFederationHostingEnabled\n oxTrust flag for the federation feature. Values enabled or disabled.\n\n\ngluuInvoiceNo\n TODO - in use?\n\n\ngluuLogoImage\n Logo used by oxTrust for default look and feel.\n\n\ngluuManageIdentityPermission\n TODO - in use?\n\n\ngluuManager\n Used to specify if a person has the manager role\n\n\ngluuManagerGroup\n Used in organizatoin entry to specifies the dn of the group that has admin priviledges in oxTrust.\n\n\ngluuOrgProfileMgt\n enable or disable profile management feature in oxTrust\n\n\ngluuOrgShortName\n Short description, as few letters as possible, no spaces.\n\n\ngluuOwnerGroup\n Deprecated. Use gluuManagerGroup\n\n\ngluuPaidUntil\n TODO - in use?\n\n\ngluuPaymentProcessorTimestamp\n TODO - in use?\n\n\ngluuProStoresUser\n TODO - remove\n\n\ngluuStatus\n Status of the entry, used by many objectclasses\n\n\ngluuTempFaviconImage\n Store location for upload of Favicon\n\n\ngluuThemeColor\n oxTrust login page configuration\n\n\ngluuWhitePagesEnabled\n None\n\n\niname\n None\n\n\ninum\n XRI i-number\n\n\nl\n \n\n\nmail\n \n\n\nmemberOf\n None\n\n\nnonProfit\n TODO - in use?\n\n\no\n \n\n\nobjectClass\n \n\n\noxCreationTimestamp\n Registration time\n\n\noxLinkLinktrack\n Linktrack link\n\n\noxLinktrackEnabled\n Is Linktrack API configured\n\n\noxLinktrackLogin\n Linktrack API login\n\n\noxLinktrackPassword\n Linktrack API password\n\n\noxRegistrationConfiguration\n Registration Configuration\n\n\npostalCode\n \n\n\nproStoresToken\n None\n\n\nprostoresTimestamp\n None\n\n\nscimAuthMode\n SCIM Authorization mode\n\n\nscimGroup\n scim Group\n\n\nscimStatus\n scim status\n\n\nst\n \n\n\nstreet\n \n\n\ntelephoneNumber\n \n\n\ntitle\n \n\n\nuid\n \n\n\nuserPassword\n \n\n\n\n\nObjectclass gluuPasswordResetRequest\n\n\n\n\nDescription\n \n\n\ncreationDate\n Creation Date used for password reset requests\n\n\noxGuid\n A random string to mark temporary tokens\n\n\npersonInum\n Inum of a person\n\n\n\n\nObjectclass gluuPerson\n\n\n\n\nDescription\n \n\n\nassociatedClient\n \n\n\nc\n \n\n\ndisplayName\n \n\n\ngivenName\n \n\n\ngluuManagedOrganizations\n Used to track with which organizations a person is associated\n\n\ngluuOptOuts\n White pages attributes restricted by person in oxTrust profile management\n\n\ngluuStatus\n Status of the entry, used by many objectclasses\n\n\ngluuWhitePagesListed\n Allow Publication\n\n\niname\n None\n\n\ninum\n XRI i-number\n\n\nmail\n \n\n\nmemberOf\n None\n\n\no\n \n\n\noxAuthPersistentJWT\n oxAuth Persistent JWT\n\n\noxCreationTimestamp\n Registration time\n\n\noxExternalUid\n None\n\n\noxInviteCode\n Invite Code\n\n\noxLastLogonTime\n Last logon time\n\n\noxTrustActive\n None\n\n\noxTrustAddresses\n None\n\n\noxTrustEmail\n None\n\n\noxTrustEntitlements\n None\n\n\noxTrustExternalId\n None\n\n\noxTrustImsValue\n None\n\n\noxTrustMetaCreated\n None\n\n\noxTrustMetaLastModified\n None\n\n\noxTrustMetaLocation\n None\n\n\noxTrustMetaVersion\n None\n\n\noxTrustNameFormatted\n None\n\n\noxTrustPhoneValue\n None\n\n\noxTrustPhotos\n None\n\n\noxTrustProfileURL\n None\n\n\noxTrustRole\n None\n\n\noxTrustTitle\n None\n\n\noxTrustUserType\n None\n\n\noxTrusthonorificPrefix\n None\n\n\noxTrusthonorificSuffix\n None\n\n\noxTrustx509Certificate\n None\n\n\npersistentId\n PersistentId\n\n\nmiddleName\n Middle name(s)\n\n\nnickname\n Casual name of the End-User\n\n\npreferredUsername\n Shorthand Name\n\n\nprofile\n Profile page URL of the person\n\n\npicture\n Profile picture URL of the person\n\n\nwebsite\n Web page or blog URL of the person\n\n\nemailVerified\n True if the e-mail address of the person has been verified; otherwise false\n\n\ngender\n Gender of the person either female or male\n\n\nbirthdate\n Birthday of the person, represented as an ISO 8601:2004 [ISO8601\u00e2\u20ac\u20182004] YYYY-MM-DD format\n\n\nzoneinfo\n time zone database representing the End-User\n\n\nlocale\n Locale of the person, represented as a BCP47 [RFC5646] language tag\n\n\nphoneNumberVerified\n True if the phone number of the person has been verified, otherwise false\n\n\naddress\n OpenID Connect formatted JSON object representing the address of the person\n\n\nupdatedAt\n Time the information of the person was last updated. Seconds from 1970-01-01T0:0:0Z\n\n\npreferredLanguage\n \n\n\nrole\n Role\n\n\nsecretAnswer\n Secret Answer\n\n\nsecretQuestion\n Secret Question\n\n\nseeAlso\n \n\n\nsn\n \n\n\ncn\n \n\n\ntransientId\n TransientId\n\n\nuid\n \n\n\nuserPassword\n \n\n\n\n\nObjectclass gluuSAMLconfig\n\n\n\n\nDescription\n \n\n\ndescription\n \n\n\ndisplayName\n \n\n\nfederationRules\n Track rules for the federation in Gluu SAML config. Deprecated as multi-party federation management should move to Jagger.\n\n\ngluuContainerFederation\n SAML Trust Relationship federation info\n\n\ngluuEntityId\n Specifies SAML trust relationship entity ID\n\n\ngluuIsFederation\n Used in oxTrust to specify if a SAML Trust Relationship is a federation. It could also be a website\n\n\ngluuProfileConfiguration\n SAML Trust Relationship attribute\n\n\ngluuReleasedAttribute\n oxTrust reference for the dn of the released attribute\n\n\ngluuRulesAccepted\n TODO - use unknown for Gluu SAML config\n\n\ngluuSAMLMetaDataFilter\n Metadata filter in SAML trust relationship\n\n\ngluuSAMLTrustEngine\n SAML trust relationship configuration\n\n\ngluuSAMLmaxRefreshDelay\n SAML trust relationship refresh time\n\n\ngluuSAMLspMetaDataFN\n SAML Trust Relationship file location of metadata\n\n\ngluuSAMLspMetaDataSourceType\n SAML Trust Relationship SP metadata type - file, URI, federation\n\n\ngluuSAMLspMetaDataURL\n SAML Trust Relationship URI location of metadata\n\n\ngluuSpecificRelyingPartyConfig\n SAML Trust Relationship configuration\n\n\ngluuStatus\n Status of the entry, used by many objectclasses\n\n\ngluuTrustContact\n oxTrust login page configuration\n\n\ngluuTrustDeconstruction\n TODO - in use?\n\n\ngluuValidationLog\n None\n\n\ngluuValidationStatus\n None\n\n\niname\n None\n\n\ninum\n XRI i-number\n\n\no\n \n\n\nobjectClass\n \n\n\noxAuthPostLogoutRedirectURI\n oxAuth Post Logout Redirect URI\n\n\nurl\n None\n\n\n\n\nObjectclass oxAuthClient\n\n\n\n\nDescription\n \n\n\nassociatedPerson\n Reference the dn of a person.\n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxAuthAppType\n oxAuth App Type\n\n\noxAuthClientIdIssuedAt\n oxAuth Client Issued At\n\n\noxAuthClientSecret\n oxAuth Client Secret\n\n\noxAuthClientSecretExpiresAt\n Date client expires\n\n\noxAuthClientURI\n oxAuth Client URI\n\n\noxAuthClientUserGroup\n oxAuth Client User group\n\n\noxAuthContact\n oxAuth Contact\n\n\noxAuthDefaultAcrValues\n oxAuth Default Acr Values\n\n\noxAuthDefaultMaxAge\n oxAuth Default Max Age\n\n\noxAuthFederationId\n oxAuth Federation ID attribute\n\n\noxAuthFederationMetadataURI\n oxAuth Federation metadata URI attribute\n\n\noxAuthGrantType\n oxAuth Grant Type\n\n\noxAuthIdTokenEncryptedResponseAlg\n oxAuth ID Token Encrypted Response Alg\n\n\noxAuthIdTokenEncryptedResponseEnc\n oxAuth ID Token Encrypted Response Enc\n\n\noxAuthIdTokenSignedResponseAlg\n oxAuth ID Token Signed Response Alg\n\n\noxAuthInitiateLoginURI\n oxAuth Initiate Login URI\n\n\noxAuthJwksURI\n oxAuth JWKs URI\n\n\noxAuthLogoURI\n oxAuth Logo URI\n\n\noxAuthPolicyURI\n oxAuth Policy URI\n\n\noxAuthPostLogoutRedirectURI\n oxAuth Post Logout Redirect URI\n\n\noxAuthRedirectURI\n oxAuth Redirect URI\n\n\noxAuthRegistrationAccessToken\n oxAuth Registration Access Token\n\n\noxAuthRequestObjectSigningAlg\n oxAuth Request Object Signing Alg\n\n\noxAuthRequestURI\n oxAuth Request URI\n\n\noxAuthRequireAuthTime\n oxAuth Require Authentication Time\n\n\noxAuthResponseType\n oxAuth Response Type\n\n\noxAuthScope\n oxAuth Attribute Scope\n\n\noxAuthSectorIdentifierURI\n oxAuth Sector Identifier URI\n\n\noxAuthSignedResponseAlg\n oxAuth Signed Response Alg\n\n\noxAuthSubjectType\n oxAuth Subject Type\n\n\noxAuthTokenEndpointAuthMethod\n oxAuth Token Endpoint Auth Method\n\n\noxAuthTosURI\n oxAuth TOS URI\n\n\noxAuthTrustedClient\n oxAuth Trusted Client\n\n\noxAuthUserInfoEncryptedResponseAlg\n oxAuth User Info Encrypted Response Alg\n\n\noxAuthUserInfoEncryptedResponseEnc\n oxAuth User Info Encrypted Response Enc\n\n\noxLastAccessTime\n Last access time\n\n\noxLastLogonTime\n Last logon time\n\n\n\n\nObjectclass oxAuthConfiguration\n\n\n\n\nDescription\n \n\n\nou\n \n\n\noxAuthConfCustomAuthMethod\n Custom authentication method\n\n\noxAuthConfDynamic\n oxAuth Dynamic Configuration\n\n\noxAuthConfErrors\n oxAuth Errors Configuration\n\n\noxAuthConfIdPythonScript\n Custom id generation\n\n\noxAuthConfLdapAuth\n LDAP authentication configuration\n\n\noxAuthConfStatic\n oxAuth Static Configuration\n\n\noxAuthConfWebKeys\n oxAuth Web Keys Configuration\n\n\n\n\nObjectclass oxAuthCustomScope\n\n\n\n\nDescription\n \n\n\ndefaultScope\n Track the default scope for an custom OAuth2 Scope.\n\n\ndescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxAuthClaim\n oxAuth Attribute Claim\n\n\n\n\nObjectclass oxAuthFederationMetadata\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxAuthFederationMetadataIntervalCheck\n oxAuth Federation metadata interval check attribute\n\n\noxAuthFederationOP\n oxAuth Federation OP attribute\n\n\noxAuthFederationRP\n oxAuth Federation RP attribute\n\n\noxAuthRedirectURI\n oxAuth Redirect URI\n\n\n\n\nObjectclass oxAuthFederationOP\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxAuthFederationOpDomain\n oxAuth Federation OP domain attribute\n\n\noxAuthFederationOpId\n oxAuth Federation OP ID attribute\n\n\noxAuthX509PEM\n oxAuth x509 in PEM format\n\n\noxAuthX509URL\n oxAuth x509 URL\n\n\n\n\nObjectclass oxAuthFederationRP\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxAuthRedirectURI\n oxAuth Redirect URI\n\n\noxAuthX509PEM\n oxAuth x509 in PEM format\n\n\noxAuthX509URL\n oxAuth x509 URL\n\n\n\n\nObjectclass oxAuthFederationRequest\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxAuthFederationOpDomain\n oxAuth Federation OP domain attribute\n\n\noxAuthFederationOpId\n oxAuth Federation OP ID attribute\n\n\noxAuthFederationRequestType\n oxAuth Federation request type attribute\n\n\noxAuthRedirectURI\n oxAuth Redirect URI\n\n\n\n\nObjectclass oxAuthFederationTrust\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxAuthFederationId\n oxAuth Federation ID attribute\n\n\noxAuthFederationMetadataURI\n oxAuth Federation metadata URI attribute\n\n\noxAuthFederationTrustStatus\n oxAuth Federation Trust Status attribute\n\n\noxAuthRedirectURI\n oxAuth Redirect URI\n\n\noxAuthReleasedScope\n oxAuth released scope attribute\n\n\noxAuthSkipAuthorization\n oxAuth skip authorization attribute\n\n\n\n\nObjectclass oxAuthSessionId\n\n\n\n\nDescription\n \n\n\nlastModifiedTime\n \n\n\noxAuthAuthenticationTime\n oxAuth Authentication Time\n\n\noxAuthPermissionGranted\n oxAuth Permission Granted\n\n\noxAuthPermissionGrantedMap\n oxAuth Permission Granted Map\n\n\noxAuthUserDN\n oxAuth User DN\n\n\nuniqueIdentifier\n \n\n\n\n\nObjectclass oxAuthToken\n\n\n\n\nDescription\n \n\n\ncreateTimestamp\n \n\n\noxAuthAuthenticationTime\n oxAuth Authentication Time\n\n\noxAuthAuthorizationCode\n oxAuth authorization code\n\n\noxAuthCreation\n oxAuth Creation\n\n\noxAuthExpiration\n oxAuth Expiration\n\n\noxAuthGrantId\n oxAuth grant id\n\n\noxAuthGrantType\n oxAuth Grant Type\n\n\noxAuthJwtRequest\n oxAuth JWT Request\n\n\noxAuthNonce\n oxAuth nonce\n\n\noxAuthScope\n oxAuth Attribute Scope\n\n\noxAuthTokenCode\n oxAuth Token Code\n\n\noxAuthTokenType\n oxAuth Token Type\n\n\noxAuthUserId\n oxAuth user id\n\n\noxAuthenticationLevel\n None\n\n\noxAuthenticationMode\n None\n\n\nuniqueIdentifier\n \n\n\n\n\nObjectclass oxAuthUmaPolicy\n\n\n\n\nDescription\n \n\n\ndescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxAuthUmaScope\n URI reference of scope descriptor\n\n\noxPolicyScript\n ox policy script\n\n\nprogrammingLanguage\n programming language\n\n\n\n\nObjectclass oxAuthUmaRPT\n\n\n\n\nDescription\n \n\n\noxAmHost\n am host\n\n\noxAuthAuthenticationTime\n oxAuth Authentication Time\n\n\noxAuthClientId\n oxAuth Client id\n\n\noxAuthCreation\n oxAuth Creation\n\n\noxAuthExpiration\n oxAuth Expiration\n\n\noxAuthTokenCode\n oxAuth Token Code\n\n\noxAuthUserId\n oxAuth user id\n\n\noxUmaPermission\n ox uma permission\n\n\nuniqueIdentifier\n \n\n\n\n\nObjectclass oxAuthUmaResourceSet\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\nowner\n \n\n\noxAssociatedClient\n Associate the dn of an OAuth2 client with a person or UMA Resource Set.\n\n\noxAuthUmaScope\n URI reference of scope descriptor\n\n\noxFaviconImage\n URI for a graphic icon\n\n\noxGroup\n User group\n\n\noxId\n Identifier\n\n\noxResource\n Host path\n\n\noxRevision\n Revision\n\n\noxType\n ox type\n\n\n\n\nObjectclass oxAuthUmaResourceSetPermission\n\n\n\n\nDescription\n \n\n\noxAmHost\n am host\n\n\noxAuthExpiration\n oxAuth Expiration\n\n\noxAuthUmaScope\n URI reference of scope descriptor\n\n\noxConfigurationCode\n ox configuration code\n\n\noxHost\n ox host\n\n\noxResourceSetId\n ox resource set id\n\n\noxTicket\n ox ticket\n\n\n\n\nObjectclass oxAuthUmaScopeDescription\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\nowner\n \n\n\noxFaviconImage\n URI for a graphic icon\n\n\noxIconUrl\n ox icon url\n\n\noxId\n Identifier\n\n\noxPolicyRule\n Revision\n\n\noxRevision\n Revision\n\n\noxType\n ox type\n\n\noxUrl\n ox url\n\n\n\n\nObjectclass oxEntry\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\niname\n None\n\n\ninum\n XRI i-number\n\n\n\n\nObjectclass oxLink\n\n\n\n\nDescription\n \n\n\ndescription\n \n\n\noxGuid\n A random string to mark temporary tokens\n\n\noxLinkCreator\n Link Creator\n\n\noxLinkExpirationDate\n Link Expiration Date\n\n\noxLinkLinktrack\n Linktrack link\n\n\noxLinkModerated\n Is Link Moderated?\n\n\noxLinkModerators\n Link Moderators\n\n\noxLinkPending\n Pending Registrations\n\n\n\n\nObjectclass oxLiteralNode\n\n\n\n\nDescription\n \n\n\nliteralBinaryValue\n OX literalValue\n\n\nliteralValue\n OX literalValue\n\n\norganizationalOwner\n OX organizationalOwner\n\n\nowner\n \n\n\ntargetRelationalXdiStatement\n OX TargetRelationalXdiStatement\n\n\nx\n OX XRI Component\n\n\nxdiStatement\n OX xdiStatement\n\n\nxri\n OX XRI address\n\n\n\n\nObjectclass oxNode\n\n\n\n\nDescription\n \n\n\norganizationalOwner\n OX organizationalOwner\n\n\nowner\n \n\n\nsourceRelationalXdiStatement\n OX SourceRelationalXdiStatement\n\n\ntargetRelationalXdiStatement\n OX TargetRelationalXdiStatement\n\n\nx\n OX XRI Component\n\n\nxdiStatement\n OX xdiStatement\n\n\nxri\n OX XRI address\n\n\n\n\nObjectclass oxProxAccessToken\n\n\n\n\nDescription\n \n\n\noxAuthCreation\n oxAuth Creation\n\n\noxAuthExpiration\n oxAuth Expiration\n\n\noxProxyAccessToken\n oxProx access token\n\n\noxProxyClientId\n oxProx client id\n\n\n\n\nObjectclass oxProxClient\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\noxProxyClaimMapping\n oxProx claim mapping\n\n\noxProxyScope\n oxProx scope\n\n\noxProxyToOpClientMapping\n oxProx client mapping to op client\n\n\n\n\nObjectclass oxProxConfiguration\n\n\n\n\nDescription\n \n\n\nou\n \n\n\noxProxConf\n oxProx Configuration\n\n\noxScriptDn\n Script object DN\n\n\n\n\nObjectclass oxProxOp\n\n\n\n\nDescription\n \n\n\nc\n \n\n\ndisplayName\n \n\n\ninum\n XRI i-number\n\n\nl\n \n\n\noxDomain\n domain\n\n\noxId\n Identifier\n\n\noxX509PEM\n x509 in PEM format\n\n\noxX509URL\n x509 URL\n\n\n\n\nObjectclass oxPushApplication\n\n\n\n\nDescription\n \n\n\ndisplayName\n \n\n\noxId\n Identifier\n\n\noxName\n Name\n\n\noxPushApplicationConf\n oxPush application configuration\n\n\n\n\nObjectclass oxPushDevice\n\n\n\n\nDescription\n \n\n\noxAuthUserId\n oxAuth user id\n\n\noxId\n Identifier\n\n\noxPushApplication\n oxPush application DN\n\n\noxPushDeviceConf\n oxPush device configuration\n\n\noxType\n ox type\n\n\n\n\nObjectclass oxScript\n\n\n\n\nDescription\n \n\n\ninum\n XRI i-number\n\n\noxScript\n Attribute that contains script (python, java script)\n\n\noxScriptType\n Attribute that contains script type (e.g. python, java script)\n\n\n\n\nObjectclass oxTrustConfiguration\n\n\n\n\nDescription\n \n\n\nou\n \n\n\noxTrustConfApplication\n oxTrust Application Configuration\n\n\n\n\nObjectclass vdDirectoryView\n\n\n\n\nDescription\n \n\n\no\n \n\n\n\n\nObjectclass vdapcontainer\n\n\n\n\nDescription\n \n\n\nou\n \n\n\n\n\nObjectclass vdlabel\n\n\n\n\nDescription\n \n\n\no", 
            "title": "LDAP Schema"
        }, 
        {
            "location": "/reference/ldap-schema/#schema", 
            "text": "Below are schema for OpenDJ and OpenLDAP.  OpenDJ schema should work for 389DS too:     OpenDJ  OpenLDAP   Objectclass gluuAppliance   Description    blowfishPassword  Blowfish crypted text  c    description    displayName    gluuAdditionalBandwidth  Track bandwidth requirements for the Gluu Server instance  gluuAdditionalMemory  Track additional memory requirements for the Gluu Server instance.  gluuApplianceDnsServer  Persist the DNS server that should be used for the Gluu Server instance.  gluuAppliancePollingInterval  Set the frequency of the health status update of the Gluu Server  gluuBandwidthRX  Track data received by the Gluu Server  gluuBandwidthTX  Track data sent by the Gluu Server  gluuBillingEmail  Billing Alert Email Address  gluuCentreonEmail  TODO - in use? Email Address to send monitoring alerts  gluuDSstatus  Monitor health of the instance LDAP server.  gluuFederationHostingEnabled  oxTrust flag for the federation feature. Values enabled or disabled.  gluuFreeDiskSpace  Monitor free disk space on the Gluu Server instance  gluuFreeMemory  Monitor free memory on the Gluu Server instance  gluuFreeSwap  Monitor swap space on the Gluu Server instance  gluuGroupCount  Monitor the number of groups. TODO - Remove?  gluuHTTPstatus  Monitor HTTP availability of the Gluu Server instance  gluuHostname  The hostname of the Gluu Server instance  gluuInvoiceNo  TODO - in use?  gluuIpAddress  IP address of the Gluu Server instance  gluuJiraEmail  TODO - in use? Jira Alert Email Address  gluuLastUpdate  Monitors last time the server was able to connect to the monitoring system.  gluuLifeRay  None  gluuLoadAvg  Montior the average CPU load for a Gluu Server instance.  gluuManageIdentityPermission  TODO - in use?  gluuManager  Used to specify if a person has the manager role  gluuMaxLogSize  Maximum Log File Size  gluuOrgProfileMgt  enable or disable profile management feature in oxTrust  gluuPaidUntil  TODO - in use?  gluuPaymentProcessorTimestamp  TODO - in use?  gluuPersonCount  Monitor the number of people in the LDAP severs for a Gluu Server instance  gluuPrivacyEmail  Privacy Alert Email Address used by oxTrust.  gluuPrivate  TODO - in use?  gluuPublishIdpMetadata  Gluu Server flag to publish the IDP metadata via the web server  gluuResizeInitiated  TODO - in use?  gluuSPTR  TODO - in use?  gluuScimEnabled  oxTrust SCIM feature - enabled or disabled  gluuShibAssertionsIssued  Monitors activity of Gluu Server Shibboleth IDP  gluuShibFailedAuth  Monitors failed login attempts on Gluu Server Shibboleth IDP  gluuShibSecurityEvents  Monitors security events on Gluu Server Shibboleth IDP  gluuShibSuccessfulAuths  Monitors login attempts on Gluu Server Shibboleth IDP  gluuSmtpFromEmailAddress  SMTP From Email Address  gluuSmtpFromName  SMTP From Name  gluuSmtpHost  SMTP Host  gluuSmtpPassword  SMTP User Password  gluuSmtpPort  SMTP Port  gluuSmtpRequiresAuthentication  SMTP Requires Authentication  gluuSmtpRequiresSsl  SMTP Requires SSL  gluuSmtpUserName  SMTP User Name  gluuSslExpiry  SAML Trust Relationship configuration  gluuStatus  Status of the entry, used by many objectclasses  gluuSvnEmail  SVN Alert Email Address  gluuSystemUptime  Monitors how long the Gluu Server instance has been running.  gluuTargetRAM  Monitors total available RAM on Gluu Server instance  gluuUrl  Gluu instance URL  gluuVDSenabled  oxTrust VDS enabled or disabled  gluuVDSstatus  Gluu VDS configuration  gluuVdsCacheRefreshEnabled  None  gluuVdsCacheRefreshLastUpdate  None  gluuVdsCacheRefreshLastUpdateCount  None  gluuVdsCacheRefreshPollingInterval  None  gluuVdsCacheRefreshProblemCount  None  gluuWhitePagesEnabled  None  iname  None  inum  XRI i-number  inumFN  XRI i-number sans punctuation  o    oxAuthenticationLevel  None  oxAuthenticationMode  None  oxClusterType  Type of the underlying clustering mechanism  oxClusteredServers  List of the clustering partners of this server  oxIDPAuthentication  Custom IDP authentication configuration  oxLogViewerConfig  Log viewer configuration  oxMemcachedServerAddress  Initialization string for memcached client  oxSmtpConfiguration  SMTP configuration  oxTrustStoreCert  oxPush device configuration  oxTrustStoreConf  oxPush application configuration  passwordResetAllowed  Is password reset mechanics allowed  softwareVersion  None  userPassword    oxTrustCacheRefreshServerIpAddress  None   Objectclass gluuAttribute   Description    description    displayName    gluuAttributeEditType  Specify in oxTrust who can update an attribute, admin or user  gluuAttributeName  Specify an identifier for an attribute. May be multi-value where an attribute has two names, like givenName and first-name.  gluuAttributeOrigin  Specify the person objectclass associated with the attribute, used for display purposes in oxTrust.  gluuAttributeSystemEditType  TODO - still required?  gluuAttributeType  Data type of attribute. Values can be string, photo, numeric, date  gluuAttributeUsageType  TODO - Usage? Value can be OpenID  gluuAttributeViewType  Specify in oxTrust who can view an attribute, admin or user  gluuCategory  TODO - in use? Used to group attributes together.  gluuSAML1URI  SAML 1 uri of attribute  gluuSAML2URI  SAML 2 uri of attribute  gluuStatus  Status of the entry, used by many objectclasses  iname  None  inum  XRI i-number  objectClass    oxAttributeType  NameId or attribute  oxMultivaluedAttribute  None  oxNameIdType  NameId Type  oxSCIMCustomAttribute  None  oxSourceAttribute  Source Attribute for this Attribute  seeAlso    urn  None  oxAuthClaimName  Used by oxAuth in conjunction with gluuLdapAttributeName to map claims to attributes in LDAP.   Objectclass gluuGroup   Description    c    description    displayName    gluuGroupType  Type of Group. Not used.  gluuGroupVisibility  Group visibility. Not used.  gluuStatus  Status of the entry, used by many objectclasses  iname  None  inum  XRI i-number  member    o    owner    seeAlso     Objectclass gluuInumMap   Description    gluuStatus  Status of the entry, used by many objectclasses  inum  XRI i-number  primaryKeyAttrName  Primary Key Attribute Name  primaryKeyValue  Primary Key Value  secondaryKeyAttrName  Secondary Key Attribute Name  secondaryKeyValue  Secondary Key Value  tertiaryKeyAttrName  Tertiary Key Attribute Name  tertiaryKeyValue  Tertiary Key Value   Objectclass gluuInvoice   Description    gluuInvoiceAmount  TODO - in use?  gluuInvoiceDate  TODO - in use?  gluuInvoiceLineItemName  TODO - in use?  gluuInvoiceNumber  TODO - in use?  gluuInvoiceProductNumber  TODO - in use?  gluuInvoiceQuantity  TODO - in use?  gluuInvoiceStatus  TODO - in use?  inum  XRI i-number   Objectclass gluuOrganization   Description    c    county  ISO 3166-1 Alpha-2 Country Code  deployedAppliances  Track which appliances are deployed at an organization.  description    displayName    gluuAddPersonCapability  Organizational attribute to control whether new users can be added via the oxTrust GUI.  gluuAdditionalUsers  TODO : use unclear  gluuApplianceUpdateRequestList  Used by the Gluu Server to request an update  gluuCustomMessage  oxTrust custom welcome message  gluuFaviconImage  TODO - Stores URL of favicon  gluuFederationHostingEnabled  oxTrust flag for the federation feature. Values enabled or disabled.  gluuInvoiceNo  TODO - in use?  gluuLogoImage  Logo used by oxTrust for default look and feel.  gluuManageIdentityPermission  TODO - in use?  gluuManager  Used to specify if a person has the manager role  gluuManagerGroup  Used in organizatoin entry to specifies the dn of the group that has admin priviledges in oxTrust.  gluuOrgProfileMgt  enable or disable profile management feature in oxTrust  gluuOrgShortName  Short description, as few letters as possible, no spaces.  gluuOwnerGroup  Deprecated. Use gluuManagerGroup  gluuPaidUntil  TODO - in use?  gluuPaymentProcessorTimestamp  TODO - in use?  gluuProStoresUser  TODO - remove  gluuStatus  Status of the entry, used by many objectclasses  gluuTempFaviconImage  Store location for upload of Favicon  gluuThemeColor  oxTrust login page configuration  gluuWhitePagesEnabled  None  iname  None  inum  XRI i-number  l    mail    memberOf  None  nonProfit  TODO - in use?  o    objectClass    oxCreationTimestamp  Registration time  oxLinkLinktrack  Linktrack link  oxLinktrackEnabled  Is Linktrack API configured  oxLinktrackLogin  Linktrack API login  oxLinktrackPassword  Linktrack API password  oxRegistrationConfiguration  Registration Configuration  postalCode    proStoresToken  None  prostoresTimestamp  None  scimAuthMode  SCIM Authorization mode  scimGroup  scim Group  scimStatus  scim status  st    street    telephoneNumber    title    uid    userPassword     Objectclass gluuPasswordResetRequest   Description    creationDate  Creation Date used for password reset requests  oxGuid  A random string to mark temporary tokens  personInum  Inum of a person   Objectclass gluuPerson   Description    associatedClient    c    displayName    givenName    gluuManagedOrganizations  Used to track with which organizations a person is associated  gluuOptOuts  White pages attributes restricted by person in oxTrust profile management  gluuStatus  Status of the entry, used by many objectclasses  gluuWhitePagesListed  Allow Publication  iname  None  inum  XRI i-number  mail    memberOf  None  o    oxAuthPersistentJWT  oxAuth Persistent JWT  oxCreationTimestamp  Registration time  oxExternalUid  None  oxInviteCode  Invite Code  oxLastLogonTime  Last logon time  oxTrustActive  None  oxTrustAddresses  None  oxTrustEmail  None  oxTrustEntitlements  None  oxTrustExternalId  None  oxTrustImsValue  None  oxTrustMetaCreated  None  oxTrustMetaLastModified  None  oxTrustMetaLocation  None  oxTrustMetaVersion  None  oxTrustNameFormatted  None  oxTrustPhoneValue  None  oxTrustPhotos  None  oxTrustProfileURL  None  oxTrustRole  None  oxTrustTitle  None  oxTrustUserType  None  oxTrusthonorificPrefix  None  oxTrusthonorificSuffix  None  oxTrustx509Certificate  None  persistentId  PersistentId  middleName  Middle name(s)  nickname  Casual name of the End-User  preferredUsername  Shorthand Name  profile  Profile page URL of the person  picture  Profile picture URL of the person  website  Web page or blog URL of the person  emailVerified  True if the e-mail address of the person has been verified; otherwise false  gender  Gender of the person either female or male  birthdate  Birthday of the person, represented as an ISO 8601:2004 [ISO8601\u00e2\u20ac\u20182004] YYYY-MM-DD format  zoneinfo  time zone database representing the End-User  locale  Locale of the person, represented as a BCP47 [RFC5646] language tag  phoneNumberVerified  True if the phone number of the person has been verified, otherwise false  address  OpenID Connect formatted JSON object representing the address of the person  updatedAt  Time the information of the person was last updated. Seconds from 1970-01-01T0:0:0Z  preferredLanguage    role  Role  secretAnswer  Secret Answer  secretQuestion  Secret Question  seeAlso    sn    cn    transientId  TransientId  uid    userPassword     Objectclass gluuSAMLconfig   Description    description    displayName    federationRules  Track rules for the federation in Gluu SAML config. Deprecated as multi-party federation management should move to Jagger.  gluuContainerFederation  SAML Trust Relationship federation info  gluuEntityId  Specifies SAML trust relationship entity ID  gluuIsFederation  Used in oxTrust to specify if a SAML Trust Relationship is a federation. It could also be a website  gluuProfileConfiguration  SAML Trust Relationship attribute  gluuReleasedAttribute  oxTrust reference for the dn of the released attribute  gluuRulesAccepted  TODO - use unknown for Gluu SAML config  gluuSAMLMetaDataFilter  Metadata filter in SAML trust relationship  gluuSAMLTrustEngine  SAML trust relationship configuration  gluuSAMLmaxRefreshDelay  SAML trust relationship refresh time  gluuSAMLspMetaDataFN  SAML Trust Relationship file location of metadata  gluuSAMLspMetaDataSourceType  SAML Trust Relationship SP metadata type - file, URI, federation  gluuSAMLspMetaDataURL  SAML Trust Relationship URI location of metadata  gluuSpecificRelyingPartyConfig  SAML Trust Relationship configuration  gluuStatus  Status of the entry, used by many objectclasses  gluuTrustContact  oxTrust login page configuration  gluuTrustDeconstruction  TODO - in use?  gluuValidationLog  None  gluuValidationStatus  None  iname  None  inum  XRI i-number  o    objectClass    oxAuthPostLogoutRedirectURI  oxAuth Post Logout Redirect URI  url  None   Objectclass oxAuthClient   Description    associatedPerson  Reference the dn of a person.  displayName    inum  XRI i-number  oxAuthAppType  oxAuth App Type  oxAuthClientIdIssuedAt  oxAuth Client Issued At  oxAuthClientSecret  oxAuth Client Secret  oxAuthClientSecretExpiresAt  Date client expires  oxAuthClientURI  oxAuth Client URI  oxAuthClientUserGroup  oxAuth Client User group  oxAuthContact  oxAuth Contact  oxAuthDefaultAcrValues  oxAuth Default Acr Values  oxAuthDefaultMaxAge  oxAuth Default Max Age  oxAuthFederationId  oxAuth Federation ID attribute  oxAuthFederationMetadataURI  oxAuth Federation metadata URI attribute  oxAuthGrantType  oxAuth Grant Type  oxAuthIdTokenEncryptedResponseAlg  oxAuth ID Token Encrypted Response Alg  oxAuthIdTokenEncryptedResponseEnc  oxAuth ID Token Encrypted Response Enc  oxAuthIdTokenSignedResponseAlg  oxAuth ID Token Signed Response Alg  oxAuthInitiateLoginURI  oxAuth Initiate Login URI  oxAuthJwksURI  oxAuth JWKs URI  oxAuthLogoURI  oxAuth Logo URI  oxAuthPolicyURI  oxAuth Policy URI  oxAuthPostLogoutRedirectURI  oxAuth Post Logout Redirect URI  oxAuthRedirectURI  oxAuth Redirect URI  oxAuthRegistrationAccessToken  oxAuth Registration Access Token  oxAuthRequestObjectSigningAlg  oxAuth Request Object Signing Alg  oxAuthRequestURI  oxAuth Request URI  oxAuthRequireAuthTime  oxAuth Require Authentication Time  oxAuthResponseType  oxAuth Response Type  oxAuthScope  oxAuth Attribute Scope  oxAuthSectorIdentifierURI  oxAuth Sector Identifier URI  oxAuthSignedResponseAlg  oxAuth Signed Response Alg  oxAuthSubjectType  oxAuth Subject Type  oxAuthTokenEndpointAuthMethod  oxAuth Token Endpoint Auth Method  oxAuthTosURI  oxAuth TOS URI  oxAuthTrustedClient  oxAuth Trusted Client  oxAuthUserInfoEncryptedResponseAlg  oxAuth User Info Encrypted Response Alg  oxAuthUserInfoEncryptedResponseEnc  oxAuth User Info Encrypted Response Enc  oxLastAccessTime  Last access time  oxLastLogonTime  Last logon time   Objectclass oxAuthConfiguration   Description    ou    oxAuthConfCustomAuthMethod  Custom authentication method  oxAuthConfDynamic  oxAuth Dynamic Configuration  oxAuthConfErrors  oxAuth Errors Configuration  oxAuthConfIdPythonScript  Custom id generation  oxAuthConfLdapAuth  LDAP authentication configuration  oxAuthConfStatic  oxAuth Static Configuration  oxAuthConfWebKeys  oxAuth Web Keys Configuration   Objectclass oxAuthCustomScope   Description    defaultScope  Track the default scope for an custom OAuth2 Scope.  description    displayName    inum  XRI i-number  oxAuthClaim  oxAuth Attribute Claim   Objectclass oxAuthFederationMetadata   Description    displayName    inum  XRI i-number  oxAuthFederationMetadataIntervalCheck  oxAuth Federation metadata interval check attribute  oxAuthFederationOP  oxAuth Federation OP attribute  oxAuthFederationRP  oxAuth Federation RP attribute  oxAuthRedirectURI  oxAuth Redirect URI   Objectclass oxAuthFederationOP   Description    displayName    inum  XRI i-number  oxAuthFederationOpDomain  oxAuth Federation OP domain attribute  oxAuthFederationOpId  oxAuth Federation OP ID attribute  oxAuthX509PEM  oxAuth x509 in PEM format  oxAuthX509URL  oxAuth x509 URL   Objectclass oxAuthFederationRP   Description    displayName    inum  XRI i-number  oxAuthRedirectURI  oxAuth Redirect URI  oxAuthX509PEM  oxAuth x509 in PEM format  oxAuthX509URL  oxAuth x509 URL   Objectclass oxAuthFederationRequest   Description    displayName    inum  XRI i-number  oxAuthFederationOpDomain  oxAuth Federation OP domain attribute  oxAuthFederationOpId  oxAuth Federation OP ID attribute  oxAuthFederationRequestType  oxAuth Federation request type attribute  oxAuthRedirectURI  oxAuth Redirect URI   Objectclass oxAuthFederationTrust   Description    displayName    inum  XRI i-number  oxAuthFederationId  oxAuth Federation ID attribute  oxAuthFederationMetadataURI  oxAuth Federation metadata URI attribute  oxAuthFederationTrustStatus  oxAuth Federation Trust Status attribute  oxAuthRedirectURI  oxAuth Redirect URI  oxAuthReleasedScope  oxAuth released scope attribute  oxAuthSkipAuthorization  oxAuth skip authorization attribute   Objectclass oxAuthSessionId   Description    lastModifiedTime    oxAuthAuthenticationTime  oxAuth Authentication Time  oxAuthPermissionGranted  oxAuth Permission Granted  oxAuthPermissionGrantedMap  oxAuth Permission Granted Map  oxAuthUserDN  oxAuth User DN  uniqueIdentifier     Objectclass oxAuthToken   Description    createTimestamp    oxAuthAuthenticationTime  oxAuth Authentication Time  oxAuthAuthorizationCode  oxAuth authorization code  oxAuthCreation  oxAuth Creation  oxAuthExpiration  oxAuth Expiration  oxAuthGrantId  oxAuth grant id  oxAuthGrantType  oxAuth Grant Type  oxAuthJwtRequest  oxAuth JWT Request  oxAuthNonce  oxAuth nonce  oxAuthScope  oxAuth Attribute Scope  oxAuthTokenCode  oxAuth Token Code  oxAuthTokenType  oxAuth Token Type  oxAuthUserId  oxAuth user id  oxAuthenticationLevel  None  oxAuthenticationMode  None  uniqueIdentifier     Objectclass oxAuthUmaPolicy   Description    description    displayName    inum  XRI i-number  oxAuthUmaScope  URI reference of scope descriptor  oxPolicyScript  ox policy script  programmingLanguage  programming language   Objectclass oxAuthUmaRPT   Description    oxAmHost  am host  oxAuthAuthenticationTime  oxAuth Authentication Time  oxAuthClientId  oxAuth Client id  oxAuthCreation  oxAuth Creation  oxAuthExpiration  oxAuth Expiration  oxAuthTokenCode  oxAuth Token Code  oxAuthUserId  oxAuth user id  oxUmaPermission  ox uma permission  uniqueIdentifier     Objectclass oxAuthUmaResourceSet   Description    displayName    inum  XRI i-number  owner    oxAssociatedClient  Associate the dn of an OAuth2 client with a person or UMA Resource Set.  oxAuthUmaScope  URI reference of scope descriptor  oxFaviconImage  URI for a graphic icon  oxGroup  User group  oxId  Identifier  oxResource  Host path  oxRevision  Revision  oxType  ox type   Objectclass oxAuthUmaResourceSetPermission   Description    oxAmHost  am host  oxAuthExpiration  oxAuth Expiration  oxAuthUmaScope  URI reference of scope descriptor  oxConfigurationCode  ox configuration code  oxHost  ox host  oxResourceSetId  ox resource set id  oxTicket  ox ticket   Objectclass oxAuthUmaScopeDescription   Description    displayName    inum  XRI i-number  owner    oxFaviconImage  URI for a graphic icon  oxIconUrl  ox icon url  oxId  Identifier  oxPolicyRule  Revision  oxRevision  Revision  oxType  ox type  oxUrl  ox url   Objectclass oxEntry   Description    displayName    iname  None  inum  XRI i-number   Objectclass oxLink   Description    description    oxGuid  A random string to mark temporary tokens  oxLinkCreator  Link Creator  oxLinkExpirationDate  Link Expiration Date  oxLinkLinktrack  Linktrack link  oxLinkModerated  Is Link Moderated?  oxLinkModerators  Link Moderators  oxLinkPending  Pending Registrations   Objectclass oxLiteralNode   Description    literalBinaryValue  OX literalValue  literalValue  OX literalValue  organizationalOwner  OX organizationalOwner  owner    targetRelationalXdiStatement  OX TargetRelationalXdiStatement  x  OX XRI Component  xdiStatement  OX xdiStatement  xri  OX XRI address   Objectclass oxNode   Description    organizationalOwner  OX organizationalOwner  owner    sourceRelationalXdiStatement  OX SourceRelationalXdiStatement  targetRelationalXdiStatement  OX TargetRelationalXdiStatement  x  OX XRI Component  xdiStatement  OX xdiStatement  xri  OX XRI address   Objectclass oxProxAccessToken   Description    oxAuthCreation  oxAuth Creation  oxAuthExpiration  oxAuth Expiration  oxProxyAccessToken  oxProx access token  oxProxyClientId  oxProx client id   Objectclass oxProxClient   Description    displayName    inum  XRI i-number  oxProxyClaimMapping  oxProx claim mapping  oxProxyScope  oxProx scope  oxProxyToOpClientMapping  oxProx client mapping to op client   Objectclass oxProxConfiguration   Description    ou    oxProxConf  oxProx Configuration  oxScriptDn  Script object DN   Objectclass oxProxOp   Description    c    displayName    inum  XRI i-number  l    oxDomain  domain  oxId  Identifier  oxX509PEM  x509 in PEM format  oxX509URL  x509 URL   Objectclass oxPushApplication   Description    displayName    oxId  Identifier  oxName  Name  oxPushApplicationConf  oxPush application configuration   Objectclass oxPushDevice   Description    oxAuthUserId  oxAuth user id  oxId  Identifier  oxPushApplication  oxPush application DN  oxPushDeviceConf  oxPush device configuration  oxType  ox type   Objectclass oxScript   Description    inum  XRI i-number  oxScript  Attribute that contains script (python, java script)  oxScriptType  Attribute that contains script type (e.g. python, java script)   Objectclass oxTrustConfiguration   Description    ou    oxTrustConfApplication  oxTrust Application Configuration   Objectclass vdDirectoryView   Description    o     Objectclass vdapcontainer   Description    ou     Objectclass vdlabel   Description    o", 
            "title": "Schema"
        }, 
        {
            "location": "/reference/lib/", 
            "text": "Gluu Libraries\n\n\nContents\n\n\n\n\nOpenID Connect\n\n\nUser Managed Access Protocol (UMA)\n\n\nSimple Cloud Identity Management Protocol (SCIM)", 
            "title": "Gluu Library"
        }, 
        {
            "location": "/reference/lib/#gluu-libraries", 
            "text": "", 
            "title": "Gluu Libraries"
        }, 
        {
            "location": "/reference/lib/#contents", 
            "text": "OpenID Connect  User Managed Access Protocol (UMA)  Simple Cloud Identity Management Protocol (SCIM)", 
            "title": "Contents"
        }, 
        {
            "location": "/reference/oxAuth/", 
            "text": "oxAuth Configuration\n\n\noxauth-ldap.properties\n\n\nThese are the properties oxTrust uses to connect to LDAP\n\n\n\n\n\n\nbindDN\n\n\n\n\n\n\nbindPassword\n\n\n\n\n\n\nservers\n \nlocalhost:1636\n\n\n\n\n\n\nuseSSL\n \nTRUE | false\n\n\n\n\n\n\nmaxconnections\n \n3\n\n\n\n\n\n\noxauth-config.xml\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\nconfiguration\n\n    \nappliance-inum\n%(inumAppliance)s\n/appliance-inum\n\n    \nissuer\nhttps://%(hostname)s\n/issuer\n\n    \nlogin-page\nhttps://%(hostname)s/oxauth/login.seam\n/login-page\n\n    \nauthorization-page\nhttps://%(hostname)s/oxauth/authorize.seam\n/authorization-page\n\n    \nbase-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1\n/base-endpoint\n\n    \nauthorization-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/authorize\n/authorization-endpoint\n\n    \ntoken-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/token\n/token-endpoint\n\n    \nuserinfo-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/userinfo\n/userinfo-endpoint\n\n    \nclientinfo-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/clientinfo\n/clientinfo-endpoint\n\n    \ncheck-session-iframe\nhttps://%(hostname)s/oxauth/opiframe.seam\n/check-session-iframe\n\n    \nend-session-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/end_session\n/end-session-endpoint\n\n    \njwks-uri\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/jwks\n/jwks-uri\n\n    \nregistration-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/register\n/registration-endpoint\n\n    \nvalidate-token-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/validate\n/validate-token-endpoint\n\n    \nfederation-metadata-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/federationmetadata\n/federation-metadata-endpoint\n\n    \nfederation-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/federation\n/federation-endpoint\n\n    \nopenid-discovery-endpoint\nhttps://%(hostname)s/.well-known/webfinger\n/openid-discovery-endpoint\n\n    \nopenid-configuration-endpoint\nhttps://%(hostname)s/.well-known/openid-configuration\n/openid-configuration-endpoint\n\n    \nid-generation-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/id\n/id-generation-endpoint\n\n    \nintrospection-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/introspection\n/introspection-endpoint\n\n    \numa-configuration-endpoint\nhttps://%(hostname)s/oxauth/seam/resource/restv1/oxauth/uma-configuration\n/uma-configuration-endpoint\n\n\n    \n!-- sets mode of the server. Possible values: memory, ldap--\n\n    \nmode\nldap\n/mode\n\n\n    \n!-- Configuration is updated from LDAP, interval in seconds, 3600seconds = 1hour --\n\n    \nconfiguration-update-interval\n3600\n/configuration-update-interval\n\n\n    \nresponse-types-supported\n\n        \nresponse-type\ncode\n/response-type\n\n        \nresponse-type\ncode id_token\n/response-type\n\n        \nresponse-type\ntoken\n/response-type\n\n        \nresponse-type\ntoken id_token\n/response-type\n\n        \nresponse-type\ncode token\n/response-type\n\n        \nresponse-type\ncode token id_token\n/response-type\n\n        \nresponse-type\nid_token\n/response-type\n\n    \n/response-types-supported\n\n\n    \ngrant-types-supported\n\n        \ngrant-type\nauthorization_code\n/grant-type\n\n        \ngrant-type\nimplicit\n/grant-type\n\n        \ngrant-type\nurn:ietf:params:oauth:grant-type:jwt-bearer\n/grant-type\n\n    \n/grant-types-supported\n\n\n    \n!-- AMR enables an OpenID Connect client to request a specific method\n    of authentication --\n\n    \namr-values-supported\n\n        \n!-- amr\nbasic\n/amr--\n\n    \n/amr-values-supported\n\n\n    \nsubject-types-supported\n\n        \nsubject-type\npublic\n/subject-type\n\n        \nsubject-type\npairwise\n/subject-type\n\n    \n/subject-types-supported\n\n\n    \nuserinfo-signing-alg-values-supported\n\n        \nuserinfo-signing-alg\nHS256\n/userinfo-signing-alg\n\n        \nuserinfo-signing-alg\nHS384\n/userinfo-signing-alg\n\n        \nuserinfo-signing-alg\nHS512\n/userinfo-signing-alg\n\n        \nuserinfo-signing-alg\nRS256\n/userinfo-signing-alg\n\n        \nuserinfo-signing-alg\nRS384\n/userinfo-signing-alg\n\n        \nuserinfo-signing-alg\nRS512\n/userinfo-signing-alg\n\n        \nuserinfo-signing-alg\nES256\n/userinfo-signing-alg\n\n        \nuserinfo-signing-alg\nES384\n/userinfo-signing-alg\n\n        \nuserinfo-signing-alg\nES512\n/userinfo-signing-alg\n\n    \n/userinfo-signing-alg-values-supported\n\n\n    \nuserinfo-encryption-alg-values-supported\n\n        \nuserinfo-encryption-alg\nRSA1_5\n/userinfo-encryption-alg\n\n        \nuserinfo-encryption-alg\nRSA-OAEP\n/userinfo-encryption-alg\n\n        \nuserinfo-encryption-alg\nA128KW\n/userinfo-encryption-alg\n\n        \nuserinfo-encryption-alg\nA256KW\n/userinfo-encryption-alg\n\n        \n!--userinfo-encryption-alg\ndir\n/userinfo-encryption-alg--\n\n        \n!--userinfo-encryption-alg\nECDH-ES\n/userinfo-encryption-alg--\n\n        \n!--userinfo-encryption-alg\nECDH-ES+A128KW\n/userinfo-encryption-alg--\n\n        \n!--userinfo-encryption-alg\nECDH-ES+A256KW\n/userinfo-encryption-alg--\n\n    \n/userinfo-encryption-alg-values-supported\n\n\n    \nuserinfo-encryption-enc-values-supported\n\n        \nuserinfo-encryption-enc\nA128CBC+HS256\n/userinfo-encryption-enc\n\n        \nuserinfo-encryption-enc\nA256CBC+HS512\n/userinfo-encryption-enc\n\n        \nuserinfo-encryption-enc\nA128GCM\n/userinfo-encryption-enc\n\n        \nuserinfo-encryption-enc\nA256GCM\n/userinfo-encryption-enc\n\n    \n/userinfo-encryption-enc-values-supported\n\n\n    \nid-token-signing-alg-values-supported\n\n        \nid-token-signing-alg\nHS256\n/id-token-signing-alg\n\n        \nid-token-signing-alg\nHS384\n/id-token-signing-alg\n\n        \nid-token-signing-alg\nHS512\n/id-token-signing-alg\n\n        \nid-token-signing-alg\nRS256\n/id-token-signing-alg\n\n        \nid-token-signing-alg\nRS384\n/id-token-signing-alg\n\n        \nid-token-signing-alg\nRS512\n/id-token-signing-alg\n\n        \nid-token-signing-alg\nES256\n/id-token-signing-alg\n\n        \nid-token-signing-alg\nES384\n/id-token-signing-alg\n\n        \nid-token-signing-alg\nES512\n/id-token-signing-alg\n\n    \n/id-token-signing-alg-values-supported\n\n\n    \nid-token-encryption-alg-values-supported\n\n        \nid-token-encryption-alg\nRSA1_5\n/id-token-encryption-alg\n\n        \nid-token-encryption-alg\nRSA-OAEP\n/id-token-encryption-alg\n\n        \nid-token-encryption-alg\nA128KW\n/id-token-encryption-alg\n\n        \nid-token-encryption-alg\nA256KW\n/id-token-encryption-alg\n\n        \n!--id-token-encryption-alg\ndir\n/id-token-encryption-alg--\n\n        \n!--id-token-encryption-alg\nECDH-ES\n/id-token-encryption-alg--\n\n        \n!--id-token-encryption-alg\nECDH-ES+A128KW\n/id-token-encryption-alg--\n\n        \n!--id-token-encryption-alg\nECDH-ES+A256KW\n/id-token-encryption-alg--\n\n    \n/id-token-encryption-alg-values-supported\n\n\n    \nid-token-encryption-enc-values-supported\n\n        \nid-token-encryption-enc\nA128CBC+HS256\n/id-token-encryption-enc\n\n        \nid-token-encryption-enc\nA256CBC+HS512\n/id-token-encryption-enc\n\n        \nid-token-encryption-enc\nA128GCM\n/id-token-encryption-enc\n\n        \nid-token-encryption-enc\nA256GCM\n/id-token-encryption-enc\n\n    \n/id-token-encryption-enc-values-supported\n\n\n    \nrequest-object-signing-alg-values-supported\n\n        \nrequest-object-signing-alg\nHS256\n/request-object-signing-alg\n\n        \nrequest-object-signing-alg\nHS384\n/request-object-signing-alg\n\n        \nrequest-object-signing-alg\nHS512\n/request-object-signing-alg\n\n        \nrequest-object-signing-alg\nRS256\n/request-object-signing-alg\n\n        \nrequest-object-signing-alg\nRS384\n/request-object-signing-alg\n\n        \nrequest-object-signing-alg\nRS512\n/request-object-signing-alg\n\n        \nrequest-object-signing-alg\nES256\n/request-object-signing-alg\n\n        \nrequest-object-signing-alg\nES384\n/request-object-signing-alg\n\n        \nrequest-object-signing-alg\nES512\n/request-object-signing-alg\n\n    \n/request-object-signing-alg-values-supported\n\n\n    \nrequest-object-encryption-alg-values-supported\n\n        \nrequest-object-encryption-alg\nRSA1_5\n/request-object-encryption-alg\n\n        \nrequest-object-encryption-alg\nRSA-OAEP\n/request-object-encryption-alg\n\n        \nrequest-object-encryption-alg\nA128KW\n/request-object-encryption-alg\n\n        \nrequest-object-encryption-alg\nA256KW\n/request-object-encryption-alg\n\n        \n!--request-object-encryption-alg\ndir\n/request-object-encryption-alg--\n\n        \n!--request-object-encryption-alg\nECDH-ES\n/request-object-encryption-alg--\n\n        \n!--request-object-encryption-alg\nECDH-ES+A128KW\n/request-object-encryption-alg--\n\n        \n!--request-object-encryption-alg\nECDH-ES+A256KW\n/request-object-encryption-alg--\n\n    \n/request-object-encryption-alg-values-supported\n\n\n    \nrequest-object-encryption-enc-values-supported\n\n        \nrequest-object-encryption-enc\nA128CBC+HS256\n/request-object-encryption-enc\n\n        \nrequest-object-encryption-enc\nA256CBC+HS512\n/request-object-encryption-enc\n\n        \nrequest-object-encryption-enc\nA128GCM\n/request-object-encryption-enc\n\n        \nrequest-object-encryption-enc\nA256GCM\n/request-object-encryption-enc\n\n    \n/request-object-encryption-enc-values-supported\n\n\n    \ntoken-endpoint-auth-methods-supported\n\n        \ntoken-endpoint-auth-method\nclient_secret_basic\n/token-endpoint-auth-method\n\n        \ntoken-endpoint-auth-method\nclient_secret_post\n/token-endpoint-auth-method\n\n        \ntoken-endpoint-auth-method\nclient_secret_jwt\n/token-endpoint-auth-method\n\n        \ntoken-endpoint-auth-method\nprivate_key_jwt\n/token-endpoint-auth-method\n\n    \n/token-endpoint-auth-methods-supported\n\n\n    \ntoken-endpoint-auth-signing-alg-values-supported\n\n        \ntoken-endpoint-auth-signing-alg\nHS256\n/token-endpoint-auth-signing-alg\n\n        \ntoken-endpoint-auth-signing-alg\nHS384\n/token-endpoint-auth-signing-alg\n\n        \ntoken-endpoint-auth-signing-alg\nHS512\n/token-endpoint-auth-signing-alg\n\n        \ntoken-endpoint-auth-signing-alg\nRS256\n/token-endpoint-auth-signing-alg\n\n        \ntoken-endpoint-auth-signing-alg\nRS384\n/token-endpoint-auth-signing-alg\n\n        \ntoken-endpoint-auth-signing-alg\nRS512\n/token-endpoint-auth-signing-alg\n\n        \ntoken-endpoint-auth-signing-alg\nES256\n/token-endpoint-auth-signing-alg\n\n        \ntoken-endpoint-auth-signing-alg\nES384\n/token-endpoint-auth-signing-alg\n\n        \ntoken-endpoint-auth-signing-alg\nES512\n/token-endpoint-auth-signing-alg\n\n    \n/token-endpoint-auth-signing-alg-values-supported\n\n\n    \ndisplay-values-supported\n\n        \ndisplay-value\npage\n/display-value\n\n        \n!--display-value\npopup\n/display-value--\n\n        \n!--display-value\ntouch\n/display-value--\n\n        \n!--display-value\nwap\n/display-value--\n\n    \n/display-values-supported\n\n\n    \nclaim-types-supported\n\n        \nclaim-type\nnormal\n/claim-type\n\n        \n!--claim-type\ndistributed\n/claim-type--\n\n    \n/claim-types-supported\n\n\n    \nclaims-supported\n\n        \nclaim\nuid\n/claim\n\n        \nclaim\ndisplayName\n/claim\n\n        \nclaim\ngivenName\n/claim\n\n        \nclaim\nsn\n/claim\n\n        \nclaim\nmail\n/claim\n\n    \n/claims-supported\n\n\n    \nservice-documentation\nhttp://gluu.org/docs\n/service-documentation\n\n\n    \nclaims-locales-supported\n\n        \nclaim-locale\nen\n/claim-locale\n\n        \n!--claim-locale\nen-GB\n/claim-locale--\n\n        \n!--claim-locale\nen-CA\n/claim-locale--\n\n        \n!--claim-locale\nfr-FR\n/claim-locale--\n\n        \n!--claim-locale\nfr-CA\n/claim-locale--\n\n    \n/claims-locales-supported\n\n\n    \nui-locales-supported\n\n        \nui-locale\nen\n/ui-locale\n\n        \nui-locale\nes\n/ui-locale\n\n        \n!--ui-locale\nen-GB\n/ui-locale--\n\n        \n!--ui-locale\nen-CA\n/ui-locale--\n\n        \n!--ui-locale\nfr-FR\n/ui-locale--\n\n        \n!--ui-locale\nfr-CA\n/ui-locale--\n\n    \n/ui-locales-supported\n\n\n    \nclaims-parameter-supported\ntrue\n/claims-parameter-supported\n\n\n    \nrequest-parameter-supported\ntrue\n/request-parameter-supported\n\n\n    \nrequest-uri-parameter-supported\ntrue\n/request-uri-parameter-supported\n\n\n    \nrequire-request-uri-registration\nfalse\n/require-request-uri-registration\n\n\n    \nop-policy-uri\nhttp://ox.gluu.org/doku.php?id=oxauth:policy\n/op-policy-uri\n\n\n    \nop-tos-uri\nhttp://ox.gluu.org/doku.php?id=oxauth:tos\n/op-tos-uri\n\n\n    \nauthorization-code-lifetime\n600\n/authorization-code-lifetime\n\n    \nrefresh-token-lifetime\n14400\n/refresh-token-lifetime\n\n    \nid-token-lifetime\n3600\n/id-token-lifetime\n\n    \nshort-lived-access-token-lifetime\n3600\n/short-lived-access-token-lifetime\n\n    \nlong-lived-access-token-lifetime\n31536000\n/long-lived-access-token-lifetime\n\n\n    \n!-- if session id is not used during some time then it's removed automatically.\n         Lifetime in seconds, 86400 seconds = 1 day  --\n\n    \nsession-id-unused-lifetime\n86400\n/session-id-unused-lifetime\n\n    \nsession-id-enabled\ntrue\n/session-id-enabled\n\n\n    \numa-add-scopes-automatically\nfalse\n/uma-add-scopes-automatically\n\n    \numa-requester-permission-token-lifetime\n3600\n/uma-requester-permission-token-lifetime\n\n    \numa-keep-client-during-resource-set-registration\ntrue\n/uma-keep-client-during-resource-set-registration\n\n\n    \n!-- Clean service interval in seconds --\n\n    \nclean-service-interval\n600\n/clean-service-interval\n\n\n    \nrefresh-user-session-timeout-enabled\ntrue\n/refresh-user-session-timeout-enabled\n\n    \nrefresh-user-session-timeout\n1800\n/refresh-user-session-timeout\n\n\n    \ndefault-signature-algorithm\nRS256\n/default-signature-algorithm\n\n    \nRS256-keyid\n1\n/RS256-keyid\n\n    \nRS384-keyid\n2\n/RS384-keyid\n\n    \nRS512-keyid\n3\n/RS512-keyid\n\n    \nES256-keyid\n4\n/ES256-keyid\n\n    \nES384-keyid\n5\n/ES384-keyid\n\n    \nES512-keyid\n6\n/ES512-keyid\n\n\n    \nfederation-enabled\nfalse\n/federation-enabled\n\n    \n!-- Federation check interval in seconds. Checks whether data in trusts are still valid\n    (e.g.) if RP redirectUri still exist in metadata, if no then remove from trust automatically.\n     86400 seconds = 24 hours --\n\n    \nfederation-check-interval\n86400\n/federation-check-interval\n\n    \n!--Federation skip policy values: OR, AND. Used in case there is more than one federation trust for\n    given redirect_uri.--\n\n    \nfederation-skip-policy\nOR\n/federation-skip-policy\n\n    \n!-- Federation scope policy. Possible values: JOIN.\n    Currently JOIN is the only supported value, means joining all scopes of trust list.--\n\n    \nfederation-scope-policy\nJOIN\n/federation-scope-policy\n\n    \nfederation-signing-alg\nRS512\n/federation-signing-alg\n\n    \nfederation-signing-kid\n1\n/federation-signing-kid\n\n\n    \n!-- Dynamic registration custom stuff --\n\n    \ndynamic-registration-custom-object-class\noxAuthClientCustomAttributes\n/dynamic-registration-custom-object-class\n\n\n    \ndynamic-registration-custom-attribute-supported\n\n        \ndynamic-registration-custom-attribute\noxAuthTrustedClient\n/dynamic-registration-custom-attribute\n\n        \ndynamic-registration-custom-attribute\nmyCustomAttr1\n/dynamic-registration-custom-attribute\n\n        \ndynamic-registration-custom-attribute\nmyCustomAttr2\n/dynamic-registration-custom-attribute\n\n    \n/dynamic-registration-custom-attribute-supported\n\n\n    \noxOpenIDConnectVersion\nopenidconnect-1.0\n/oxOpenIDConnectVersion\n\n\n    \norganization-inum\n%(inumOrg)s\n/organization-inum\n\n    \noxID\nhttps://%(hostname)s/oxid/service/gluu/inum\n/oxID\n\n\n    \ndynamic-registration-enabled\ntrue\n/dynamic-registration-enabled\n\n    \n!-- Value in seconds or 0 if they do not expire --\n\n    \ndynamic-registration-expiration-time\n86400\n/dynamic-registration-expiration-time\n\n\n    \ntrusted-client-enabled\ntrue\n/trusted-client-enabled\n\n\n    \nauth-filters-enabled\nfalse\n/auth-filters-enabled\n\n    \nauth-filters\n\n        \nauth-filter\n\n            \n!--filter\n(\namp;(associatedClient=*{0}*)(myPinCode={1}))\n/filter--\n\n            \nfilter\n(\namp;(mail=*{0}*)(inum={1}))\n/filter\n\n            \n!-- If bind=true oxAuth should try to bind to entry which it found by filter specified above --\n\n            \nbind\nfalse\n/bind\n\n            \nbase-dn\no=gluu\n/base-dn\n\n        \n/auth-filter\n\n        \nauth-filter\n\n            \nfilter\nuid={0}\n/filter\n\n            \nbind\ntrue\n/bind\n\n            \nbind-password-attribute\npwd\n/bind-password-attribute\n\n            \nbase-dn\no=gluu\n/base-dn\n\n        \n/auth-filter\n\n    \n/auth-filters\n\n\n    \n!-- Custom client filters to be able identify client by custom id. --\n\n    \nclient-auth-filters-enabled\nfalse\n/client-auth-filters-enabled\n\n    \nclient-auth-filters\n\n        \nclient-auth-filter\n\n            \nfilter\nmyCustomAttr1={0}\n/filter\n\n            \nbase-dn\nou=clients,o=%(inumOrg)s,o=gluu\n/base-dn\n\n        \n/client-auth-filter\n\n        \n!--client-auth-filter\n\n            \nfilter\n(\namp;(myCustomAttr1={0})(myCustomAttr2={0}))\n/filter\n\n            \nbase-dn\nou=clients,o=%(inumOrg)s,o=gluu\n/base-dn\n\n        \n/client-auth-filter--\n\n    \n/client-auth-filters\n\n\n\n/configuration\n\n\n\n\nscope to claims mapping file\n\n\n{\n\"claimMapping\":[\n    {\n        \"ldap\":\"uid\",\n        \"claim\":\"sub\"\n    },\n    {\n        \"ldap\":\"displayName\",\n        \"claim\":\"name\"\n    },\n    {\n        \"ldap\":\"givenName\",\n        \"claim\":\"given_name\"\n    },\n    {\n        \"ldap\":\"sn\",\n        \"claim\":\"family_name\"\n    },\n    {\n        \"ldap\":\"photo1\",\n        \"claim\":\"picture\"\n    },\n    {\n        \"ldap\":\"timezone\",\n        \"claim\":\"zoneinfo\"\n    },\n    {\n        \"ldap\":\"preferredLanguage\",\n        \"claim\":\"locale\"\n    },\n    {\n        \"ldap\":\"mail\",\n        \"claim\":\"email\"\n    },\n    {\n        \"ldap\":\"homePostalAddress\",\n        \"claim\":\"formatted\"\n    },\n    {\n        \"ldap\":\"street\",\n        \"claim\":\"street_address\"\n    },\n    {\n        \"ldap\":\"l\",\n        \"claim\":\"locality\"\n    },\n    {\n        \"ldap\":\"st\",\n        \"claim\":\"region\"\n    },\n    {\n        \"ldap\":\"c\",\n        \"claim\":\"country\"\n    },\n    {\n        \"ldap\":\"postalCode\",\n        \"claim\":\"postal_code\"\n    },\n    {\n        \"ldap\":\"telephoneNumber\",\n        \"claim\":\"phone_number\"\n    },\n    {\n        \"ldap\":\"oxInum\",\n        \"claim\":\"inum\"\n    }\n],\n\"baseDn\":{\n    \"appliance\":\"ou=appliances,o=gluu\",\n    \"people\":\"ou=people,o=%(inumOrg)s,o=gluu\",\n    \"groups\":\"ou=groups,o=%(inumOrg)s,o=gluu\",\n    \"clients\":\"ou=clients,o=%(inumOrg)s,o=gluu\",\n    \"scopes\":\"ou=scopes,o=%(inumOrg)s,o=gluu\",\n    \"attributes\":\"ou=attributes,o=%(inumOrg)s,o=gluu\",\n    \"sessionId\":\"ou=session,o=%(inumOrg)s,o=gluu\",\n    \"federationMetadata\":\"ou=metadata,ou=federation,o=%(inumOrg)s,o=gluu\",\n    \"federationRP\":\"ou=rp,ou=federation,o=%(inumOrg)s,o=gluu\",\n    \"federationOP\":\"ou=op,ou=federation,o=%(inumOrg)s,o=gluu\",\n    \"federationRequest\":\"ou=request,ou=federation,o=%(inumOrg)s,o=gluu\",\n    \"federationTrust\":\"ou=trust,ou=federation,o=%(inumOrg)s,o=gluu\",\n    \"umaBase\":\"ou=uma,o=%(inumOrg)s,o=gluu\",\n    \"umaPolicy\":\"ou=policies,ou=uma,o=%(inumOrg)s,o=gluu\"\n  }\n}", 
            "title": "OxAuth"
        }, 
        {
            "location": "/reference/oxAuth/#oxauth-configuration", 
            "text": "", 
            "title": "oxAuth Configuration"
        }, 
        {
            "location": "/reference/oxAuth/#oxauth-ldapproperties", 
            "text": "These are the properties oxTrust uses to connect to LDAP    bindDN    bindPassword    servers   localhost:1636    useSSL   TRUE | false    maxconnections   3", 
            "title": "oxauth-ldap.properties"
        }, 
        {
            "location": "/reference/oxAuth/#oxauth-configxml", 
            "text": "?xml version=\"1.0\" encoding=\"UTF-8\"?  configuration \n     appliance-inum %(inumAppliance)s /appliance-inum \n     issuer https://%(hostname)s /issuer \n     login-page https://%(hostname)s/oxauth/login.seam /login-page \n     authorization-page https://%(hostname)s/oxauth/authorize.seam /authorization-page \n     base-endpoint https://%(hostname)s/oxauth/seam/resource/restv1 /base-endpoint \n     authorization-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/authorize /authorization-endpoint \n     token-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/token /token-endpoint \n     userinfo-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/userinfo /userinfo-endpoint \n     clientinfo-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/clientinfo /clientinfo-endpoint \n     check-session-iframe https://%(hostname)s/oxauth/opiframe.seam /check-session-iframe \n     end-session-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/end_session /end-session-endpoint \n     jwks-uri https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/jwks /jwks-uri \n     registration-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/register /registration-endpoint \n     validate-token-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/validate /validate-token-endpoint \n     federation-metadata-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/federationmetadata /federation-metadata-endpoint \n     federation-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/federation /federation-endpoint \n     openid-discovery-endpoint https://%(hostname)s/.well-known/webfinger /openid-discovery-endpoint \n     openid-configuration-endpoint https://%(hostname)s/.well-known/openid-configuration /openid-configuration-endpoint \n     id-generation-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/id /id-generation-endpoint \n     introspection-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/introspection /introspection-endpoint \n     uma-configuration-endpoint https://%(hostname)s/oxauth/seam/resource/restv1/oxauth/uma-configuration /uma-configuration-endpoint \n\n     !-- sets mode of the server. Possible values: memory, ldap-- \n     mode ldap /mode \n\n     !-- Configuration is updated from LDAP, interval in seconds, 3600seconds = 1hour -- \n     configuration-update-interval 3600 /configuration-update-interval \n\n     response-types-supported \n         response-type code /response-type \n         response-type code id_token /response-type \n         response-type token /response-type \n         response-type token id_token /response-type \n         response-type code token /response-type \n         response-type code token id_token /response-type \n         response-type id_token /response-type \n     /response-types-supported \n\n     grant-types-supported \n         grant-type authorization_code /grant-type \n         grant-type implicit /grant-type \n         grant-type urn:ietf:params:oauth:grant-type:jwt-bearer /grant-type \n     /grant-types-supported \n\n     !-- AMR enables an OpenID Connect client to request a specific method\n    of authentication -- \n     amr-values-supported \n         !-- amr basic /amr-- \n     /amr-values-supported \n\n     subject-types-supported \n         subject-type public /subject-type \n         subject-type pairwise /subject-type \n     /subject-types-supported \n\n     userinfo-signing-alg-values-supported \n         userinfo-signing-alg HS256 /userinfo-signing-alg \n         userinfo-signing-alg HS384 /userinfo-signing-alg \n         userinfo-signing-alg HS512 /userinfo-signing-alg \n         userinfo-signing-alg RS256 /userinfo-signing-alg \n         userinfo-signing-alg RS384 /userinfo-signing-alg \n         userinfo-signing-alg RS512 /userinfo-signing-alg \n         userinfo-signing-alg ES256 /userinfo-signing-alg \n         userinfo-signing-alg ES384 /userinfo-signing-alg \n         userinfo-signing-alg ES512 /userinfo-signing-alg \n     /userinfo-signing-alg-values-supported \n\n     userinfo-encryption-alg-values-supported \n         userinfo-encryption-alg RSA1_5 /userinfo-encryption-alg \n         userinfo-encryption-alg RSA-OAEP /userinfo-encryption-alg \n         userinfo-encryption-alg A128KW /userinfo-encryption-alg \n         userinfo-encryption-alg A256KW /userinfo-encryption-alg \n         !--userinfo-encryption-alg dir /userinfo-encryption-alg-- \n         !--userinfo-encryption-alg ECDH-ES /userinfo-encryption-alg-- \n         !--userinfo-encryption-alg ECDH-ES+A128KW /userinfo-encryption-alg-- \n         !--userinfo-encryption-alg ECDH-ES+A256KW /userinfo-encryption-alg-- \n     /userinfo-encryption-alg-values-supported \n\n     userinfo-encryption-enc-values-supported \n         userinfo-encryption-enc A128CBC+HS256 /userinfo-encryption-enc \n         userinfo-encryption-enc A256CBC+HS512 /userinfo-encryption-enc \n         userinfo-encryption-enc A128GCM /userinfo-encryption-enc \n         userinfo-encryption-enc A256GCM /userinfo-encryption-enc \n     /userinfo-encryption-enc-values-supported \n\n     id-token-signing-alg-values-supported \n         id-token-signing-alg HS256 /id-token-signing-alg \n         id-token-signing-alg HS384 /id-token-signing-alg \n         id-token-signing-alg HS512 /id-token-signing-alg \n         id-token-signing-alg RS256 /id-token-signing-alg \n         id-token-signing-alg RS384 /id-token-signing-alg \n         id-token-signing-alg RS512 /id-token-signing-alg \n         id-token-signing-alg ES256 /id-token-signing-alg \n         id-token-signing-alg ES384 /id-token-signing-alg \n         id-token-signing-alg ES512 /id-token-signing-alg \n     /id-token-signing-alg-values-supported \n\n     id-token-encryption-alg-values-supported \n         id-token-encryption-alg RSA1_5 /id-token-encryption-alg \n         id-token-encryption-alg RSA-OAEP /id-token-encryption-alg \n         id-token-encryption-alg A128KW /id-token-encryption-alg \n         id-token-encryption-alg A256KW /id-token-encryption-alg \n         !--id-token-encryption-alg dir /id-token-encryption-alg-- \n         !--id-token-encryption-alg ECDH-ES /id-token-encryption-alg-- \n         !--id-token-encryption-alg ECDH-ES+A128KW /id-token-encryption-alg-- \n         !--id-token-encryption-alg ECDH-ES+A256KW /id-token-encryption-alg-- \n     /id-token-encryption-alg-values-supported \n\n     id-token-encryption-enc-values-supported \n         id-token-encryption-enc A128CBC+HS256 /id-token-encryption-enc \n         id-token-encryption-enc A256CBC+HS512 /id-token-encryption-enc \n         id-token-encryption-enc A128GCM /id-token-encryption-enc \n         id-token-encryption-enc A256GCM /id-token-encryption-enc \n     /id-token-encryption-enc-values-supported \n\n     request-object-signing-alg-values-supported \n         request-object-signing-alg HS256 /request-object-signing-alg \n         request-object-signing-alg HS384 /request-object-signing-alg \n         request-object-signing-alg HS512 /request-object-signing-alg \n         request-object-signing-alg RS256 /request-object-signing-alg \n         request-object-signing-alg RS384 /request-object-signing-alg \n         request-object-signing-alg RS512 /request-object-signing-alg \n         request-object-signing-alg ES256 /request-object-signing-alg \n         request-object-signing-alg ES384 /request-object-signing-alg \n         request-object-signing-alg ES512 /request-object-signing-alg \n     /request-object-signing-alg-values-supported \n\n     request-object-encryption-alg-values-supported \n         request-object-encryption-alg RSA1_5 /request-object-encryption-alg \n         request-object-encryption-alg RSA-OAEP /request-object-encryption-alg \n         request-object-encryption-alg A128KW /request-object-encryption-alg \n         request-object-encryption-alg A256KW /request-object-encryption-alg \n         !--request-object-encryption-alg dir /request-object-encryption-alg-- \n         !--request-object-encryption-alg ECDH-ES /request-object-encryption-alg-- \n         !--request-object-encryption-alg ECDH-ES+A128KW /request-object-encryption-alg-- \n         !--request-object-encryption-alg ECDH-ES+A256KW /request-object-encryption-alg-- \n     /request-object-encryption-alg-values-supported \n\n     request-object-encryption-enc-values-supported \n         request-object-encryption-enc A128CBC+HS256 /request-object-encryption-enc \n         request-object-encryption-enc A256CBC+HS512 /request-object-encryption-enc \n         request-object-encryption-enc A128GCM /request-object-encryption-enc \n         request-object-encryption-enc A256GCM /request-object-encryption-enc \n     /request-object-encryption-enc-values-supported \n\n     token-endpoint-auth-methods-supported \n         token-endpoint-auth-method client_secret_basic /token-endpoint-auth-method \n         token-endpoint-auth-method client_secret_post /token-endpoint-auth-method \n         token-endpoint-auth-method client_secret_jwt /token-endpoint-auth-method \n         token-endpoint-auth-method private_key_jwt /token-endpoint-auth-method \n     /token-endpoint-auth-methods-supported \n\n     token-endpoint-auth-signing-alg-values-supported \n         token-endpoint-auth-signing-alg HS256 /token-endpoint-auth-signing-alg \n         token-endpoint-auth-signing-alg HS384 /token-endpoint-auth-signing-alg \n         token-endpoint-auth-signing-alg HS512 /token-endpoint-auth-signing-alg \n         token-endpoint-auth-signing-alg RS256 /token-endpoint-auth-signing-alg \n         token-endpoint-auth-signing-alg RS384 /token-endpoint-auth-signing-alg \n         token-endpoint-auth-signing-alg RS512 /token-endpoint-auth-signing-alg \n         token-endpoint-auth-signing-alg ES256 /token-endpoint-auth-signing-alg \n         token-endpoint-auth-signing-alg ES384 /token-endpoint-auth-signing-alg \n         token-endpoint-auth-signing-alg ES512 /token-endpoint-auth-signing-alg \n     /token-endpoint-auth-signing-alg-values-supported \n\n     display-values-supported \n         display-value page /display-value \n         !--display-value popup /display-value-- \n         !--display-value touch /display-value-- \n         !--display-value wap /display-value-- \n     /display-values-supported \n\n     claim-types-supported \n         claim-type normal /claim-type \n         !--claim-type distributed /claim-type-- \n     /claim-types-supported \n\n     claims-supported \n         claim uid /claim \n         claim displayName /claim \n         claim givenName /claim \n         claim sn /claim \n         claim mail /claim \n     /claims-supported \n\n     service-documentation http://gluu.org/docs /service-documentation \n\n     claims-locales-supported \n         claim-locale en /claim-locale \n         !--claim-locale en-GB /claim-locale-- \n         !--claim-locale en-CA /claim-locale-- \n         !--claim-locale fr-FR /claim-locale-- \n         !--claim-locale fr-CA /claim-locale-- \n     /claims-locales-supported \n\n     ui-locales-supported \n         ui-locale en /ui-locale \n         ui-locale es /ui-locale \n         !--ui-locale en-GB /ui-locale-- \n         !--ui-locale en-CA /ui-locale-- \n         !--ui-locale fr-FR /ui-locale-- \n         !--ui-locale fr-CA /ui-locale-- \n     /ui-locales-supported \n\n     claims-parameter-supported true /claims-parameter-supported \n\n     request-parameter-supported true /request-parameter-supported \n\n     request-uri-parameter-supported true /request-uri-parameter-supported \n\n     require-request-uri-registration false /require-request-uri-registration \n\n     op-policy-uri http://ox.gluu.org/doku.php?id=oxauth:policy /op-policy-uri \n\n     op-tos-uri http://ox.gluu.org/doku.php?id=oxauth:tos /op-tos-uri \n\n     authorization-code-lifetime 600 /authorization-code-lifetime \n     refresh-token-lifetime 14400 /refresh-token-lifetime \n     id-token-lifetime 3600 /id-token-lifetime \n     short-lived-access-token-lifetime 3600 /short-lived-access-token-lifetime \n     long-lived-access-token-lifetime 31536000 /long-lived-access-token-lifetime \n\n     !-- if session id is not used during some time then it's removed automatically.\n         Lifetime in seconds, 86400 seconds = 1 day  -- \n     session-id-unused-lifetime 86400 /session-id-unused-lifetime \n     session-id-enabled true /session-id-enabled \n\n     uma-add-scopes-automatically false /uma-add-scopes-automatically \n     uma-requester-permission-token-lifetime 3600 /uma-requester-permission-token-lifetime \n     uma-keep-client-during-resource-set-registration true /uma-keep-client-during-resource-set-registration \n\n     !-- Clean service interval in seconds -- \n     clean-service-interval 600 /clean-service-interval \n\n     refresh-user-session-timeout-enabled true /refresh-user-session-timeout-enabled \n     refresh-user-session-timeout 1800 /refresh-user-session-timeout \n\n     default-signature-algorithm RS256 /default-signature-algorithm \n     RS256-keyid 1 /RS256-keyid \n     RS384-keyid 2 /RS384-keyid \n     RS512-keyid 3 /RS512-keyid \n     ES256-keyid 4 /ES256-keyid \n     ES384-keyid 5 /ES384-keyid \n     ES512-keyid 6 /ES512-keyid \n\n     federation-enabled false /federation-enabled \n     !-- Federation check interval in seconds. Checks whether data in trusts are still valid\n    (e.g.) if RP redirectUri still exist in metadata, if no then remove from trust automatically.\n     86400 seconds = 24 hours -- \n     federation-check-interval 86400 /federation-check-interval \n     !--Federation skip policy values: OR, AND. Used in case there is more than one federation trust for\n    given redirect_uri.-- \n     federation-skip-policy OR /federation-skip-policy \n     !-- Federation scope policy. Possible values: JOIN.\n    Currently JOIN is the only supported value, means joining all scopes of trust list.-- \n     federation-scope-policy JOIN /federation-scope-policy \n     federation-signing-alg RS512 /federation-signing-alg \n     federation-signing-kid 1 /federation-signing-kid \n\n     !-- Dynamic registration custom stuff -- \n     dynamic-registration-custom-object-class oxAuthClientCustomAttributes /dynamic-registration-custom-object-class \n\n     dynamic-registration-custom-attribute-supported \n         dynamic-registration-custom-attribute oxAuthTrustedClient /dynamic-registration-custom-attribute \n         dynamic-registration-custom-attribute myCustomAttr1 /dynamic-registration-custom-attribute \n         dynamic-registration-custom-attribute myCustomAttr2 /dynamic-registration-custom-attribute \n     /dynamic-registration-custom-attribute-supported \n\n     oxOpenIDConnectVersion openidconnect-1.0 /oxOpenIDConnectVersion \n\n     organization-inum %(inumOrg)s /organization-inum \n     oxID https://%(hostname)s/oxid/service/gluu/inum /oxID \n\n     dynamic-registration-enabled true /dynamic-registration-enabled \n     !-- Value in seconds or 0 if they do not expire -- \n     dynamic-registration-expiration-time 86400 /dynamic-registration-expiration-time \n\n     trusted-client-enabled true /trusted-client-enabled \n\n     auth-filters-enabled false /auth-filters-enabled \n     auth-filters \n         auth-filter \n             !--filter ( amp;(associatedClient=*{0}*)(myPinCode={1})) /filter-- \n             filter ( amp;(mail=*{0}*)(inum={1})) /filter \n             !-- If bind=true oxAuth should try to bind to entry which it found by filter specified above -- \n             bind false /bind \n             base-dn o=gluu /base-dn \n         /auth-filter \n         auth-filter \n             filter uid={0} /filter \n             bind true /bind \n             bind-password-attribute pwd /bind-password-attribute \n             base-dn o=gluu /base-dn \n         /auth-filter \n     /auth-filters \n\n     !-- Custom client filters to be able identify client by custom id. -- \n     client-auth-filters-enabled false /client-auth-filters-enabled \n     client-auth-filters \n         client-auth-filter \n             filter myCustomAttr1={0} /filter \n             base-dn ou=clients,o=%(inumOrg)s,o=gluu /base-dn \n         /client-auth-filter \n         !--client-auth-filter \n             filter ( amp;(myCustomAttr1={0})(myCustomAttr2={0})) /filter \n             base-dn ou=clients,o=%(inumOrg)s,o=gluu /base-dn \n         /client-auth-filter-- \n     /client-auth-filters  /configuration", 
            "title": "oxauth-config.xml"
        }, 
        {
            "location": "/reference/oxAuth/#scope-to-claims-mapping-file", 
            "text": "{\n\"claimMapping\":[\n    {\n        \"ldap\":\"uid\",\n        \"claim\":\"sub\"\n    },\n    {\n        \"ldap\":\"displayName\",\n        \"claim\":\"name\"\n    },\n    {\n        \"ldap\":\"givenName\",\n        \"claim\":\"given_name\"\n    },\n    {\n        \"ldap\":\"sn\",\n        \"claim\":\"family_name\"\n    },\n    {\n        \"ldap\":\"photo1\",\n        \"claim\":\"picture\"\n    },\n    {\n        \"ldap\":\"timezone\",\n        \"claim\":\"zoneinfo\"\n    },\n    {\n        \"ldap\":\"preferredLanguage\",\n        \"claim\":\"locale\"\n    },\n    {\n        \"ldap\":\"mail\",\n        \"claim\":\"email\"\n    },\n    {\n        \"ldap\":\"homePostalAddress\",\n        \"claim\":\"formatted\"\n    },\n    {\n        \"ldap\":\"street\",\n        \"claim\":\"street_address\"\n    },\n    {\n        \"ldap\":\"l\",\n        \"claim\":\"locality\"\n    },\n    {\n        \"ldap\":\"st\",\n        \"claim\":\"region\"\n    },\n    {\n        \"ldap\":\"c\",\n        \"claim\":\"country\"\n    },\n    {\n        \"ldap\":\"postalCode\",\n        \"claim\":\"postal_code\"\n    },\n    {\n        \"ldap\":\"telephoneNumber\",\n        \"claim\":\"phone_number\"\n    },\n    {\n        \"ldap\":\"oxInum\",\n        \"claim\":\"inum\"\n    }\n],\n\"baseDn\":{\n    \"appliance\":\"ou=appliances,o=gluu\",\n    \"people\":\"ou=people,o=%(inumOrg)s,o=gluu\",\n    \"groups\":\"ou=groups,o=%(inumOrg)s,o=gluu\",\n    \"clients\":\"ou=clients,o=%(inumOrg)s,o=gluu\",\n    \"scopes\":\"ou=scopes,o=%(inumOrg)s,o=gluu\",\n    \"attributes\":\"ou=attributes,o=%(inumOrg)s,o=gluu\",\n    \"sessionId\":\"ou=session,o=%(inumOrg)s,o=gluu\",\n    \"federationMetadata\":\"ou=metadata,ou=federation,o=%(inumOrg)s,o=gluu\",\n    \"federationRP\":\"ou=rp,ou=federation,o=%(inumOrg)s,o=gluu\",\n    \"federationOP\":\"ou=op,ou=federation,o=%(inumOrg)s,o=gluu\",\n    \"federationRequest\":\"ou=request,ou=federation,o=%(inumOrg)s,o=gluu\",\n    \"federationTrust\":\"ou=trust,ou=federation,o=%(inumOrg)s,o=gluu\",\n    \"umaBase\":\"ou=uma,o=%(inumOrg)s,o=gluu\",\n    \"umaPolicy\":\"ou=policies,ou=uma,o=%(inumOrg)s,o=gluu\"\n  }\n}", 
            "title": "scope to claims mapping file"
        }, 
        {
            "location": "/reference/oxd/", 
            "text": "oxD Communication Protocol\n\n\nstate:\n in progress (not finished yet)\n\n\nCommunication is made in JSON format as request-response model. Since there is no HTTP involved command types, statuses are built-in in format itself as:\n\n\nRequest:\n{\n    \"command\":\"`\ncommand type\n`\",\n    \"params\": {\n        `\nparameters of command\n`\n    }\n}\n\nResponse:\n{\n    \"status\":\"`\nstatus of command: ok or error\n`\",\n    \"data\":{\n        `\nresponse data\n`\n    }\n}\n\n\n\noxD must provide:\n 1.  simultaneous requests handling for multiple plugins (one oxD for multiple apache plugins);\n 2.  one apache plugin can send multiple commands sequentially without input steam closing (resource reusing - better performance)\n\n\nStreams are considered as characters streams (according to \nReader\n). To distinguish different commands sent from the same plugin (within the same session) length prefix is used. First 4 characters are always length of command that follows directly after it. (Example: 0154 - command consists of 154 characters). \n\n\nCommand Response Status\n\n\nPossible statuses are: ok, error.\nIf error returned then \"data\" part contains error description.\n\n\nExample of error response\n\n\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"error\":\"`\nerror code, e.g. authorization_server_not_found,\n`\"\n        \"error_description\":`\nerror description as human-readable text\n`\n    }\n}\n\n\n\nCommand Types\n\n\nCommand types:\n 1.  \nRegister client\n - register_client\n 2.  \nClient read\n - client_read\n 3.  \nObtain PAT\n - obtain_pat\n 4.  \nRegister resource\n - register_resource\n 5.  \nCheck status of RPT\n - rpt_status\n 6.  \nCheck status of ID Token\n - id_token_status\n 7.  \nCheck status of Access Token\n - access_token_status\n 8.  \nRegister permission ticket\n - register_ticket\n 9.  \nDiscovery\n - discovery\n\n\nRegister client\n\n\nClient registered by oxd has fallback values for following parameters if they are not provided in request :\n\n\n\n\n\n\napplication_type: web;\n\n\n\n\n\n\nresponse_types: code, id_token, token\n\n\n\n\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"register_client\",\n    \"params\": {\n        \"discovery_url\":\"`\ndiscovery url\n`\",\n        \"redirect_url\":\"`\nredirect url\n`\",\n        \"logout_redirect_url\":\"`\nlogout redirect url\n`\",\n        \"client_name\":\"`\nclient name\n`\",\n        \"response_types\":\"`\nresponse types\n`\",\n        \"app_type\":\"`\napplication type\n`\",\n        \"grant_types\":\"`\ngrant types\n`\",\n        \"contacts\":\"`\ncontacts\n`\",\n        \"jwks_uri\":\"`\njwks uri\n`\"        \n    }\n}\n\nResponse:\n{\n    \"status\":\"`\ncommand status\n`\",\n    \"data\":{\n        \"client_id\":\"`\nclient id\n`\",\n        \"client_secret\":\"`\nclient secret\n`\",\n        \"registration_access_token\":\"`\nregistration access token\n`\",\n        \"client_secret_expires_at\": \"`\nclient secret expiration time\n`\",\n        \"registration_client_uri\":\"`\nregistration client uri\n`\",\n        \"client_id_issued_at\":\"`\nclient id issued at\n`\"        \n    }\n}\n\n\n\nSample\n\n\nSample request:\n{\n    \"command\":\"register_client\",\n    \"params\": {\n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\",\n        \"redirect_url\":\"https://rs.gluu.org/resources\",\n        \"client_name\":\"oxD Client\",\n        \"response_types\":\"code id_token token\",\n        \"app_type\":\"web\",\n        \"grant_types\":\"authorization_code implicit\",\n        \"contacts\":\"mike@gluu.org yuriy@gluu.org\",\n        \"jwks_uri\":\"https://seed.gluu.org/jwks\"   \n    }\n}\n\nSample response:\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"client_id\":\"@!1111!0008!0001\",\n        \"client_secret\":\"ZJYCqe3GGRvdrudKyZS0XhGv_Z45DuKhCUk0gBR1vZk\",\n        \"registration_access_token\":\"this.is.an.access.token.value.ffx83\",\n        \"client_secret_expires_at\": 1577858400,\n        \"registration_client_uri\":\"https://seed.gluu.org/oxauth/rest1/register?client_id=23523534\",\n        \"client_id_issued_at\": 1577858300      \n    }\n}\n\n\n\nClient read\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"client_read\",\n    \"params\": {\n        \"registration_client_uri\":\"`\nregistration client uri\n`\",\n        \"registration_access_token\":\"`\nregistration access token\n`\"        \n    }\n}\n\nResponse:\n{\n    \"status\":\"`\ncommand status\n`\",\n    \"data\":{\n        \"client_id\":\"`\nclient id\n`\",\n        \"client_secret\":\"`\nclient secret\n`\",\n        \"registration_access_token\":\"`\nregistration access token\n`\",\n        \"client_secret_expires_at\": \"`\nclient secret expiration time\n`\",\n        \"registration_client_uri\":\"`\nregistration client uri\n`\",\n        \"client_id_issued_at\":\"`\nclient id issued at\n`\"        \n    }\n}\n\n\n\nSample\n\n\nSample request:\n{\n    \"command\":\"client_read\",\n    \"params\": {\n        \"registration_client_uri\":\"https://seed.gluu.org/oxauth/rest1/register?client_id=23523534\",\n        \"registration_access_token\":\"this.is.an.access.token.value.ffx83\"    \n    }\n}\n\nSample response:\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"client_id\":\"@!1111!0008!0001\",\n        \"client_secret\":\"ZJYCqe3GGRvdrudKyZS0XhGv_Z45DuKhCUk0gBR1vZk\",\n        \"registration_access_token\":\"this.is.an.access.token.value.ffx83\",\n        \"client_secret_expires_at\": 1577858400,\n        \"registration_client_uri\":\"https://seed.gluu.org/oxauth/rest1/register?client_id=23523534\",\n        \"client_id_issued_at\": 1577858300      \n    }\n}\n\n\n\nObtain PAT\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"obtain_pat\",\n    \"params\": {\n        \"discovery_url\":\"`\ndiscovery url\n`\",\n        \"uma_discovery_url\":\"`\numa discovery url\n`\",\n        \"redirect_url\":\"`\nredirect url\n`\",\n        \"client_id\":\"`\nclient id e.g. @!1111!0008!0001\n`\",\n        \"client_secret\":\"`\nclient secret\n`\",    \n        \"user_id\":\"`\nuser id\n`\",\n        \"user_secret\":\"`\nuser secret\n`\";    \n    }\n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"pat_token\":\"`\npat token\n`\",\n        \"expires_in_seconds\":\"`\nexpires in seconds\n`\",\n        \"pat_refresh_token\":\"`\npat refresh token\n`\",\n        \"authorization_code:\"`\nauthorization code\n`\",\n        \"scope\":\"`\nscope\n`\"\n    }\n}\n\n\n\nSample\n\n\nSample Request:\n{\n    \"command\":\"obtain_pat\",\n    \"params\": {\n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\",\n        \"uma_discovery_url\":\"http://seed.gluu.org/.well-known/uma-configuration\",\n        \"redirect_url\":\"https://rs.gluu.org/resources\",\n        \"client_id\":\"@!1111!0008!0068.3E20\",\n        \"client_secret\":\"32c2fb17-409d-48a2-b793-a639c8ac6cb2\",    \n        \"user_id\":\"yuriy\",\n        \"user_secret\":\"secret\";    \n    }\n}\n\nSample Response:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"pat_token\":\"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1L\",\n        \"expires_in_seconds\":3599,\n        \"pat_refresh_token\":\"UzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV\",\n        \"authorization_code:\"1e436c1a-6e96-4d98-81d6-8f4019ab4636\",\n        \"scope\":\"http://docs.kantarainitiative.org/uma/scopes/prot.json\"\n    }\n}\n\n\n\nObtain AAT\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"obtain_aat\",\n    \"params\": {\n        \"discovery_url\":\"`\ndiscovery url\n`\",\n        \"uma_discovery_url\":\"`\numa discovery url\n`\",\n        \"redirect_url\":\"`\nredirect url\n`\",\n        \"client_id\":\"`\nclient id e.g. @!1111!0008!0001\n`\",\n        \"client_secret\":\"`\nclient secret\n`\",    \n        \"user_id\":\"`\nuser id\n`\",\n        \"user_secret\":\"`\nuser secret\n`\";    \n    }\n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"aat_token\":\"`\naat token\n`\",\n        \"expires_in_seconds\":\"`\nexpires in seconds\n`\",\n        \"aat_refresh_token\":\"`\naat refresh token\n`\",\n        \"authorization_code:\"`\nauthorization code\n`\",\n        \"scope\":\"`\nscope\n`\"\n    }\n}\n\n\n\nSample\n\n\nSample Request:\n{\n    \"command\":\"obtain_aat\",\n    \"params\": {\n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\",\n        \"uma_discovery_url\":\"http://seed.gluu.org/.well-known/uma-configuration\",\n        \"redirect_url\":\"https://rs.gluu.org/resources\",\n        \"client_id\":\"@!1111!0008!0068.3E20\",\n        \"client_secret\":\"32c2fb17-409d-48a2-b793-a639c8ac6cb2\",    \n        \"user_id\":\"yuriy\",\n        \"user_secret\":\"secret\";    \n    }\n}\n\nSample Response:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"aat_token\":\"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1L\",\n        \"expires_in_seconds\":3599,\n        \"aat_refresh_token\":\"UzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV\",\n        \"authorization_code:\"1e436c1a-6e96-4d98-81d6-8f4019ab4636\",\n        \"scope\":\"http://docs.kantarainitiative.org/uma/scopes/prot.json\"\n    }\n}\n\n\n\nObtain RPT\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"obtain_rpt\",\n    \"params\": {\n        \"aat_token\":\"`\nAAT token\n`\",\n        \"am_host\":\"`\nAS host\n`\"\n    }\n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"rpt_token\":\"`\nrpt token\n`\"\n    }\n}\n\n\n\nSample\n\n\nSample Request:\n{\n    \"command\":\"obtain_rpt\",\n    \"params\": {\n        \"aat_token\":\"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1L\",\n        \"am_host\":\"seed.gluu.org\"  \n    }\n}\n\nSample Response:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"rpt_token\":\"32c2fb17-409d-48a2-b793-a639c8ac6cb2\"\n    }\n}\n\n\n\nAuthorize RPT\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"authorize_rpt\",\n    \"params\": {\n        \"aat_token\":\"`\nAAT token\n`\",\n        \"rpt_token\":\"`\nRPT token\n`\"\n        \"am_host\":\"`\nAS host\n`\",\n        \"ticket\":\"`\npermission ticket\n`\",\n        \"claims\":{`\nuser claims\n`}\n    }\n}\n\nOK Response (authorized):\n{\n    \"status\":\"ok\",\n    \"data\":null\n}\n\nError Response (not authorized):\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"error\":\"`\nerror code, e.g. not_allowed,\n`\"\n        \"error_description\":`\nnot allowed to authorize rpt\n`\n    }\n}\n\n\n\nSample\n\n\nSample Request:\n{\n    \"command\":\"authorize_rpt\",\n    \"params\": {\n        \"aat_token\":\"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1L\",\n        \"rpt_token\":\"fb17-409d-48a2-b793-a639c\"\n        \"am_host\":\"seed.gluu.org\",\n        \"ticket\":\"48a2-b793-a639c8ac6cb2\",\n        \"claims\":{\"uid\":[\"user1\"],\"email\":[\"user1@gluu.org\",\"user1@gmail.com\"]}\n    }\n}\n\nSample Response:\n{\n    \"status\":\"ok\",\n    \"data\":null\n}\n\n\n\nRegister resource\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"register_resource\",\n    \"params\": {\n        \"uma_discovery_url\":\"`\numa discovery url\n`\",\n        \"pat\":\"`\npat token\n`\",\n        \"name\": \"`\nname\n`\",\n        \"scopes\": [\n            `\narray of scopes for this resource\n`\n        ]\n    }   \n}\n\nResponse:\n{\n    \"status\":\"`\nstatus of command\n`\",\n    \"data\":{\n        \"_id\": \"`\nid of created resource set\n`\",\n        \"_rev\": \"\nETag of created resource set\"\n    }\n}\n\n\n\nSample\n\n\nSample Request:\n{\n    \"command\":\"register_resource\",\n    \"params\": {\n        \"uma_discovery_url\":\"https://seed.gluu.org/.well-known/uma-configuration\",\n        \"pat\":\"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1L\",\n        \"name\": \"My Resource\",\n        \"scopes\": [\n            \"http://photoz.example.com/dev/scopes/view\",\n            \"http://photoz.example.com/dev/scopes/all\"\n        ]\n    }   \n}\n\nSample Response:\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"status\": \"created\",\n        \"_id\": \"1366810445313\",\n        \"_rev\": \"1\"\n    }\n}\n\n\n\nCheck status of RPT\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"rpt_status\",\n    \"params\": {\n        \"uma_discovery_url\":\"`\numa discovery url\n`\"\n        \"pat\": \"`\npat\n`\",\n        \"rpt\": \"`\nrpt\n`\"\n    }   \n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": \"`\nwhether rpt is active (true|false)\n`\",\n        \"expires_at\": `\nrpt expires at (date)\n`,\n        \"issued_at\": `\nrpt issued at (date)\n`,\n        \"permissions\":[\n            `\npermissions of rpt\n`\n        ]\n    }\n}\n\n\n\nSample\n\n\nSample request:\n{\n    \"command\":\"rpt_status\",\n    \"params\": {\n        \"uma_discovery_url\":\"https://seed.gluu.org/.well-known/uma-configuration\",\n        \"pat\": \"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0\",\n        \"rpt\": \"KV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1Lm9yZy9veGF1dGgvc2VhbS9yZXNvdXJjZS9yZXN0djEvb3hhd\"\n    }   \n}\n\nSample response:\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": true,\n        \"expires_at\": 1256928856,\n        \"issued_at\": 1256923456,\n        \"permissions\":[\n            {\n                 \"resource_set_id\": \"112210f47de98100\",\n                 \"scopes\": [\n                     \"http://photoz.example.com/dev/actions/view\",\n                     \"http://photoz.example.com/dev/actions/all\"\n                 ],\n                 \"expires_at\" : \"1256923456\"\n            }\n        ]\n    }\n}\n\n\n\nCheck status of ID Token\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"id_token_status\",\n    \"params\": {\n        \"discovery_url\":\"`\ndiscovery url\n`\",\n        \"id_token\": \"`\nid_token\n`\"\n    }   \n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": \"`\nwhether id token is active (true|false)\n`\",\n        \"expires_at\": `\nid token expires at (date)\n`,\n        \"issued_at\": `\nid token issued at (date)\n`,\n        \"claims\": {\n            `\nclaim name\n`:[`\nclaim values\n`]\n        }\n    }\n}\n\n\n\nSample\n\n\nSample request:\n{\n    \"command\":\"id_token_status\",\n    \"params\": {\n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\",\n        \"id_token\": \"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0\"\n    }   \n}\n\nSample response:\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": true,\n        \"expires_at\": 1256928856,\n        \"issued_at\": 1256923456,\n        \"claims\": {\n            \"oxValidationURI\": [\n                \"https://seed.gluu.org/oxauth/opiframe.seam\"\n             ],\n            \"exp\": [\n                \"1383836968\"\n            ],\n            \"sub\": [\n                \"mike\"\n            ],\n            \"at_hash\": [\n                \"fMdvIEy7RjdFy4Q-mGXOWw\"\n            ],\n            \"aud\": [\n                \"@!1111!0008!FF81!2D39\"\n            ],\n            \"iss\": [\n                \"https://seed.gluu.org\"\n            ],\n            \"oxOpenIDConnectVersion\": [\n                \"openidconnect-1.0\"\n            ],\n            \"iat\": [\n                \"1383833368\"\n            ],\n            \"oxInum\": [\n                \"@!1111!0000!D4E7\"\n            ]\n        }\n    }\n}\n\n\n\nCheck status of Access Token\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"access_token_status\",\n    \"params\": {\n        \"discovery_url\":\"`\ndiscovery url\n`\",\n        \"id_token\": \"`\nid_token\n`\"\n        \"access_token\": \"`\naccess_token\n`\"\n    }   \n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": \"`\nwhether access token is active (true|false)\n`\",\n        \"expires_at\": `\naccess token expires at (date)\n`,\n        \"issued_at\": `\naccess token issued at (date)\n`\n    }\n}\n\n\n\nSample\n\n\nSample request:\n{\n    \"command\":\"access_token_status\",\n    \"params\": {     \n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\",   \n        \"id_token\":\"NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1Lm9yZy9veGF1dGgvc2VhbS9yZXNvdXJjZS9yZ\"\n        \"access_token\": \"KV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1Lm9yZy9veGF1dGgvc2VhbS9yZXNvdXJjZS9yZXN0djEvb3hhd\"\n    }   \n}\n\nSample response:\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": true,\n        \"expires_at\": 1256928856,\n        \"issued_at\": 1256923456\n    }\n}\n\n\n\nRegister permission ticket\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"register_ticket\",\n    \"params\": {\n        \"uma_discovery_url\":\"`\numa discovery url\n`\",\n        \"pat\": \"`\npat\n`\",\n        \"am_host\": \"`\nAuthorization Server host e.g. seed.gluu.org\n`\"\n        \"rs_host\": \"`\nResource Server host\n`\",\n        \"resource_set_id\":\"`\nresource set id\n`\",\n        \"scopes\": [\n            `\nscopes uris required by this permission\n`\n        ],\n        \"request_http_method\":\"`\nhttp method\n`\",\n        \"request_url\":\"`\nrequest url\n`\"\n    }   \n}\n\nResponse:\n{\n    \"status\":\"`\nstatus\n`\",\n    \"data\":{\n        \"ticket\": \"`\nticket\n`\",\n    }\n}\n\n\n\nSample\n\n\nSample request:\n{\n    \"command\":\"register_ticket\",\n    \"params\": {\n        \"uma_discovery_url\":\"https://seed.gluu.org/.well-known/uma-configuration\",\n        \"pat\": \"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0\",\n        \"am_host\": \"seed.gluu.org\"\n        \"rs_host\": \"rs.gluu.org\",\n        \"resource_set_id\":\"1366810445313\",\n        \"scopes\": [\n            \"http://photoz.example.com/dev/scopes/view\",\n            \"http://photoz.example.com/dev/scopes/add\"\n        ],\n        \"request_http_method\":\"DELETE\",\n        \"request_url\":\"http://example.com/object/1234\"\n\n    }   \n}\n\nSample response:\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"ticket\": \"mcvmstkrkrdfskdjdasldf\",\n    }\n}\n\n\n\nDiscovery\n\n\nPattern\n\n\nRequest:\n{\n    \"command\":\"discovery\",\n    \"params\": {\n        \"discovery_url\":\"`\ndiscovery url\n`\"\n    }\n}\n\nResponse:\n{\n    \"status\":\"`\ncommand status\n`\",\n    \"data\":{\n        `\ndiscovery data\n`\n    }\n}\n\n\n\nSample\n\n\nRequest:\n{\n    \"command\":\"discovery\",\n    \"params\": {\n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\"\n    }\n}\n\nResponse:\n{\n    \"data\": {\n        \"issuer\": \"https://seed.gluu.org\",\n        \"authorization_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n        \"token_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\",\n        \"userinfo_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/userinfo\",\n        \"clientinfo_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/clientinfo\",\n        \"check_session_iframe\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/check_session\",\n        \"end_session_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/end_session\",\n        \"jwks_uri\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\",\n        \"registration_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/register\",\n        \"validate_token_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/validate\",\n        \"federation_metadata_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/federationmetadata\",\n        \"federation_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/federation\",\n        \"id_generation_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/id\",\n        \"scopes_supported\": [\n            \"openid\",\n            \"address\",\n            \"clientinfo\",\n            \"http://docs.kantarainitiative.org/uma/scopes/prot.json\",\n            \"profile\",\n            \"phone\",\n            \"http://docs.kantarainitiative.org/uma/scopes/authz.json\",\n            \"email\"\n        ],\n        \"response_types_supported\": [\n            \"code\",\n            \"code id_token\",\n            \"token\",\n            \"token id_token\",\n            \"code token\",\n            \"code token id_token\",\n            \"id_token\"\n        ],\n        \"grant_types_supported\": [\n            \"authorization_code\",\n            \"implicit\",\n            \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n        ],\n        \"subject_types_supported\": [\n            \"public\",\n            \"pairwise\"\n        ],\n        ....`\nSAVE SPACE: remove part of discovery response, see docs to take a look to full response\n`................\n        \"service_documentation\": \"http://ox.gluu.org/doku.php?id=oxauth:home\",\n        \"claims_locales_supported\": [\"en-US\"],\n            \"ui_locales_supported\": [\"en-US\"],\n        \"claims_parameter_supported\": true,\n        \"request_parameter_supported\": true,\n        \"request_uri_parameter_supported\": true,\n        \"require_request_uri_registration\": false,\n        \"op_policy_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:policy\",\n        \"op_tos_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:tos\"\n    }\n\n}", 
            "title": "OxD"
        }, 
        {
            "location": "/reference/oxd/#oxd-communication-protocol", 
            "text": "state:  in progress (not finished yet)  Communication is made in JSON format as request-response model. Since there is no HTTP involved command types, statuses are built-in in format itself as:  Request:\n{\n    \"command\":\"` command type `\",\n    \"params\": {\n        ` parameters of command `\n    }\n}\n\nResponse:\n{\n    \"status\":\"` status of command: ok or error `\",\n    \"data\":{\n        ` response data `\n    }\n}  oxD must provide:\n 1.  simultaneous requests handling for multiple plugins (one oxD for multiple apache plugins);\n 2.  one apache plugin can send multiple commands sequentially without input steam closing (resource reusing - better performance)  Streams are considered as characters streams (according to  Reader ). To distinguish different commands sent from the same plugin (within the same session) length prefix is used. First 4 characters are always length of command that follows directly after it. (Example: 0154 - command consists of 154 characters).", 
            "title": "oxD Communication Protocol"
        }, 
        {
            "location": "/reference/oxd/#command-response-status", 
            "text": "Possible statuses are: ok, error.\nIf error returned then \"data\" part contains error description.  Example of error response  {\n    \"status\":\"error\",\n    \"data\":{\n        \"error\":\"` error code, e.g. authorization_server_not_found, `\"\n        \"error_description\":` error description as human-readable text `\n    }\n}", 
            "title": "Command Response Status"
        }, 
        {
            "location": "/reference/oxd/#command-types", 
            "text": "Command types:\n 1.   Register client  - register_client\n 2.   Client read  - client_read\n 3.   Obtain PAT  - obtain_pat\n 4.   Register resource  - register_resource\n 5.   Check status of RPT  - rpt_status\n 6.   Check status of ID Token  - id_token_status\n 7.   Check status of Access Token  - access_token_status\n 8.   Register permission ticket  - register_ticket\n 9.   Discovery  - discovery  Register client  Client registered by oxd has fallback values for following parameters if they are not provided in request :    application_type: web;    response_types: code, id_token, token    Pattern  Request:\n{\n    \"command\":\"register_client\",\n    \"params\": {\n        \"discovery_url\":\"` discovery url `\",\n        \"redirect_url\":\"` redirect url `\",\n        \"logout_redirect_url\":\"` logout redirect url `\",\n        \"client_name\":\"` client name `\",\n        \"response_types\":\"` response types `\",\n        \"app_type\":\"` application type `\",\n        \"grant_types\":\"` grant types `\",\n        \"contacts\":\"` contacts `\",\n        \"jwks_uri\":\"` jwks uri `\"        \n    }\n}\n\nResponse:\n{\n    \"status\":\"` command status `\",\n    \"data\":{\n        \"client_id\":\"` client id `\",\n        \"client_secret\":\"` client secret `\",\n        \"registration_access_token\":\"` registration access token `\",\n        \"client_secret_expires_at\": \"` client secret expiration time `\",\n        \"registration_client_uri\":\"` registration client uri `\",\n        \"client_id_issued_at\":\"` client id issued at `\"        \n    }\n}  Sample  Sample request:\n{\n    \"command\":\"register_client\",\n    \"params\": {\n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\",\n        \"redirect_url\":\"https://rs.gluu.org/resources\",\n        \"client_name\":\"oxD Client\",\n        \"response_types\":\"code id_token token\",\n        \"app_type\":\"web\",\n        \"grant_types\":\"authorization_code implicit\",\n        \"contacts\":\"mike@gluu.org yuriy@gluu.org\",\n        \"jwks_uri\":\"https://seed.gluu.org/jwks\"   \n    }\n}\n\nSample response:\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"client_id\":\"@!1111!0008!0001\",\n        \"client_secret\":\"ZJYCqe3GGRvdrudKyZS0XhGv_Z45DuKhCUk0gBR1vZk\",\n        \"registration_access_token\":\"this.is.an.access.token.value.ffx83\",\n        \"client_secret_expires_at\": 1577858400,\n        \"registration_client_uri\":\"https://seed.gluu.org/oxauth/rest1/register?client_id=23523534\",\n        \"client_id_issued_at\": 1577858300      \n    }\n}  Client read  Pattern  Request:\n{\n    \"command\":\"client_read\",\n    \"params\": {\n        \"registration_client_uri\":\"` registration client uri `\",\n        \"registration_access_token\":\"` registration access token `\"        \n    }\n}\n\nResponse:\n{\n    \"status\":\"` command status `\",\n    \"data\":{\n        \"client_id\":\"` client id `\",\n        \"client_secret\":\"` client secret `\",\n        \"registration_access_token\":\"` registration access token `\",\n        \"client_secret_expires_at\": \"` client secret expiration time `\",\n        \"registration_client_uri\":\"` registration client uri `\",\n        \"client_id_issued_at\":\"` client id issued at `\"        \n    }\n}  Sample  Sample request:\n{\n    \"command\":\"client_read\",\n    \"params\": {\n        \"registration_client_uri\":\"https://seed.gluu.org/oxauth/rest1/register?client_id=23523534\",\n        \"registration_access_token\":\"this.is.an.access.token.value.ffx83\"    \n    }\n}\n\nSample response:\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"client_id\":\"@!1111!0008!0001\",\n        \"client_secret\":\"ZJYCqe3GGRvdrudKyZS0XhGv_Z45DuKhCUk0gBR1vZk\",\n        \"registration_access_token\":\"this.is.an.access.token.value.ffx83\",\n        \"client_secret_expires_at\": 1577858400,\n        \"registration_client_uri\":\"https://seed.gluu.org/oxauth/rest1/register?client_id=23523534\",\n        \"client_id_issued_at\": 1577858300      \n    }\n}  Obtain PAT  Pattern  Request:\n{\n    \"command\":\"obtain_pat\",\n    \"params\": {\n        \"discovery_url\":\"` discovery url `\",\n        \"uma_discovery_url\":\"` uma discovery url `\",\n        \"redirect_url\":\"` redirect url `\",\n        \"client_id\":\"` client id e.g. @!1111!0008!0001 `\",\n        \"client_secret\":\"` client secret `\",    \n        \"user_id\":\"` user id `\",\n        \"user_secret\":\"` user secret `\";    \n    }\n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"pat_token\":\"` pat token `\",\n        \"expires_in_seconds\":\"` expires in seconds `\",\n        \"pat_refresh_token\":\"` pat refresh token `\",\n        \"authorization_code:\"` authorization code `\",\n        \"scope\":\"` scope `\"\n    }\n}  Sample  Sample Request:\n{\n    \"command\":\"obtain_pat\",\n    \"params\": {\n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\",\n        \"uma_discovery_url\":\"http://seed.gluu.org/.well-known/uma-configuration\",\n        \"redirect_url\":\"https://rs.gluu.org/resources\",\n        \"client_id\":\"@!1111!0008!0068.3E20\",\n        \"client_secret\":\"32c2fb17-409d-48a2-b793-a639c8ac6cb2\",    \n        \"user_id\":\"yuriy\",\n        \"user_secret\":\"secret\";    \n    }\n}\n\nSample Response:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"pat_token\":\"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1L\",\n        \"expires_in_seconds\":3599,\n        \"pat_refresh_token\":\"UzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV\",\n        \"authorization_code:\"1e436c1a-6e96-4d98-81d6-8f4019ab4636\",\n        \"scope\":\"http://docs.kantarainitiative.org/uma/scopes/prot.json\"\n    }\n}  Obtain AAT  Pattern  Request:\n{\n    \"command\":\"obtain_aat\",\n    \"params\": {\n        \"discovery_url\":\"` discovery url `\",\n        \"uma_discovery_url\":\"` uma discovery url `\",\n        \"redirect_url\":\"` redirect url `\",\n        \"client_id\":\"` client id e.g. @!1111!0008!0001 `\",\n        \"client_secret\":\"` client secret `\",    \n        \"user_id\":\"` user id `\",\n        \"user_secret\":\"` user secret `\";    \n    }\n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"aat_token\":\"` aat token `\",\n        \"expires_in_seconds\":\"` expires in seconds `\",\n        \"aat_refresh_token\":\"` aat refresh token `\",\n        \"authorization_code:\"` authorization code `\",\n        \"scope\":\"` scope `\"\n    }\n}  Sample  Sample Request:\n{\n    \"command\":\"obtain_aat\",\n    \"params\": {\n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\",\n        \"uma_discovery_url\":\"http://seed.gluu.org/.well-known/uma-configuration\",\n        \"redirect_url\":\"https://rs.gluu.org/resources\",\n        \"client_id\":\"@!1111!0008!0068.3E20\",\n        \"client_secret\":\"32c2fb17-409d-48a2-b793-a639c8ac6cb2\",    \n        \"user_id\":\"yuriy\",\n        \"user_secret\":\"secret\";    \n    }\n}\n\nSample Response:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"aat_token\":\"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1L\",\n        \"expires_in_seconds\":3599,\n        \"aat_refresh_token\":\"UzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV\",\n        \"authorization_code:\"1e436c1a-6e96-4d98-81d6-8f4019ab4636\",\n        \"scope\":\"http://docs.kantarainitiative.org/uma/scopes/prot.json\"\n    }\n}  Obtain RPT  Pattern  Request:\n{\n    \"command\":\"obtain_rpt\",\n    \"params\": {\n        \"aat_token\":\"` AAT token `\",\n        \"am_host\":\"` AS host `\"\n    }\n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"rpt_token\":\"` rpt token `\"\n    }\n}  Sample  Sample Request:\n{\n    \"command\":\"obtain_rpt\",\n    \"params\": {\n        \"aat_token\":\"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1L\",\n        \"am_host\":\"seed.gluu.org\"  \n    }\n}\n\nSample Response:\n{\n    \"status\":\"ok\",\n    \"data\": {\n        \"rpt_token\":\"32c2fb17-409d-48a2-b793-a639c8ac6cb2\"\n    }\n}  Authorize RPT  Pattern  Request:\n{\n    \"command\":\"authorize_rpt\",\n    \"params\": {\n        \"aat_token\":\"` AAT token `\",\n        \"rpt_token\":\"` RPT token `\"\n        \"am_host\":\"` AS host `\",\n        \"ticket\":\"` permission ticket `\",\n        \"claims\":{` user claims `}\n    }\n}\n\nOK Response (authorized):\n{\n    \"status\":\"ok\",\n    \"data\":null\n}\n\nError Response (not authorized):\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"error\":\"` error code, e.g. not_allowed, `\"\n        \"error_description\":` not allowed to authorize rpt `\n    }\n}  Sample  Sample Request:\n{\n    \"command\":\"authorize_rpt\",\n    \"params\": {\n        \"aat_token\":\"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1L\",\n        \"rpt_token\":\"fb17-409d-48a2-b793-a639c\"\n        \"am_host\":\"seed.gluu.org\",\n        \"ticket\":\"48a2-b793-a639c8ac6cb2\",\n        \"claims\":{\"uid\":[\"user1\"],\"email\":[\"user1@gluu.org\",\"user1@gmail.com\"]}\n    }\n}\n\nSample Response:\n{\n    \"status\":\"ok\",\n    \"data\":null\n}  Register resource  Pattern  Request:\n{\n    \"command\":\"register_resource\",\n    \"params\": {\n        \"uma_discovery_url\":\"` uma discovery url `\",\n        \"pat\":\"` pat token `\",\n        \"name\": \"` name `\",\n        \"scopes\": [\n            ` array of scopes for this resource `\n        ]\n    }   \n}\n\nResponse:\n{\n    \"status\":\"` status of command `\",\n    \"data\":{\n        \"_id\": \"` id of created resource set `\",\n        \"_rev\": \" ETag of created resource set\"\n    }\n}  Sample  Sample Request:\n{\n    \"command\":\"register_resource\",\n    \"params\": {\n        \"uma_discovery_url\":\"https://seed.gluu.org/.well-known/uma-configuration\",\n        \"pat\":\"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1L\",\n        \"name\": \"My Resource\",\n        \"scopes\": [\n            \"http://photoz.example.com/dev/scopes/view\",\n            \"http://photoz.example.com/dev/scopes/all\"\n        ]\n    }   \n}\n\nSample Response:\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"status\": \"created\",\n        \"_id\": \"1366810445313\",\n        \"_rev\": \"1\"\n    }\n}  Check status of RPT  Pattern  Request:\n{\n    \"command\":\"rpt_status\",\n    \"params\": {\n        \"uma_discovery_url\":\"` uma discovery url `\"\n        \"pat\": \"` pat `\",\n        \"rpt\": \"` rpt `\"\n    }   \n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": \"` whether rpt is active (true|false) `\",\n        \"expires_at\": ` rpt expires at (date) `,\n        \"issued_at\": ` rpt issued at (date) `,\n        \"permissions\":[\n            ` permissions of rpt `\n        ]\n    }\n}  Sample  Sample request:\n{\n    \"command\":\"rpt_status\",\n    \"params\": {\n        \"uma_discovery_url\":\"https://seed.gluu.org/.well-known/uma-configuration\",\n        \"pat\": \"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0\",\n        \"rpt\": \"KV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1Lm9yZy9veGF1dGgvc2VhbS9yZXNvdXJjZS9yZXN0djEvb3hhd\"\n    }   \n}\n\nSample response:\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": true,\n        \"expires_at\": 1256928856,\n        \"issued_at\": 1256923456,\n        \"permissions\":[\n            {\n                 \"resource_set_id\": \"112210f47de98100\",\n                 \"scopes\": [\n                     \"http://photoz.example.com/dev/actions/view\",\n                     \"http://photoz.example.com/dev/actions/all\"\n                 ],\n                 \"expires_at\" : \"1256923456\"\n            }\n        ]\n    }\n}  Check status of ID Token  Pattern  Request:\n{\n    \"command\":\"id_token_status\",\n    \"params\": {\n        \"discovery_url\":\"` discovery url `\",\n        \"id_token\": \"` id_token `\"\n    }   \n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": \"` whether id token is active (true|false) `\",\n        \"expires_at\": ` id token expires at (date) `,\n        \"issued_at\": ` id token issued at (date) `,\n        \"claims\": {\n            ` claim name `:[` claim values `]\n        }\n    }\n}  Sample  Sample request:\n{\n    \"command\":\"id_token_status\",\n    \"params\": {\n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\",\n        \"id_token\": \"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0\"\n    }   \n}\n\nSample response:\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": true,\n        \"expires_at\": 1256928856,\n        \"issued_at\": 1256923456,\n        \"claims\": {\n            \"oxValidationURI\": [\n                \"https://seed.gluu.org/oxauth/opiframe.seam\"\n             ],\n            \"exp\": [\n                \"1383836968\"\n            ],\n            \"sub\": [\n                \"mike\"\n            ],\n            \"at_hash\": [\n                \"fMdvIEy7RjdFy4Q-mGXOWw\"\n            ],\n            \"aud\": [\n                \"@!1111!0008!FF81!2D39\"\n            ],\n            \"iss\": [\n                \"https://seed.gluu.org\"\n            ],\n            \"oxOpenIDConnectVersion\": [\n                \"openidconnect-1.0\"\n            ],\n            \"iat\": [\n                \"1383833368\"\n            ],\n            \"oxInum\": [\n                \"@!1111!0000!D4E7\"\n            ]\n        }\n    }\n}  Check status of Access Token  Pattern  Request:\n{\n    \"command\":\"access_token_status\",\n    \"params\": {\n        \"discovery_url\":\"` discovery url `\",\n        \"id_token\": \"` id_token `\"\n        \"access_token\": \"` access_token `\"\n    }   \n}\n\nResponse:\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": \"` whether access token is active (true|false) `\",\n        \"expires_at\": ` access token expires at (date) `,\n        \"issued_at\": ` access token issued at (date) `\n    }\n}  Sample  Sample request:\n{\n    \"command\":\"access_token_status\",\n    \"params\": {     \n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\",   \n        \"id_token\":\"NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1Lm9yZy9veGF1dGgvc2VhbS9yZXNvdXJjZS9yZ\"\n        \"access_token\": \"KV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vc2VlZC5nbHV1Lm9yZy9veGF1dGgvc2VhbS9yZXNvdXJjZS9yZXN0djEvb3hhd\"\n    }   \n}\n\nSample response:\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"active\": true,\n        \"expires_at\": 1256928856,\n        \"issued_at\": 1256923456\n    }\n}  Register permission ticket  Pattern  Request:\n{\n    \"command\":\"register_ticket\",\n    \"params\": {\n        \"uma_discovery_url\":\"` uma discovery url `\",\n        \"pat\": \"` pat `\",\n        \"am_host\": \"` Authorization Server host e.g. seed.gluu.org `\"\n        \"rs_host\": \"` Resource Server host `\",\n        \"resource_set_id\":\"` resource set id `\",\n        \"scopes\": [\n            ` scopes uris required by this permission `\n        ],\n        \"request_http_method\":\"` http method `\",\n        \"request_url\":\"` request url `\"\n    }   \n}\n\nResponse:\n{\n    \"status\":\"` status `\",\n    \"data\":{\n        \"ticket\": \"` ticket `\",\n    }\n}  Sample  Sample request:\n{\n    \"command\":\"register_ticket\",\n    \"params\": {\n        \"uma_discovery_url\":\"https://seed.gluu.org/.well-known/uma-configuration\",\n        \"pat\": \"eyJ0eXAiOiJKV1MiLCJhbGciOiJSUzI1NiIsImprdSI6Imh0\",\n        \"am_host\": \"seed.gluu.org\"\n        \"rs_host\": \"rs.gluu.org\",\n        \"resource_set_id\":\"1366810445313\",\n        \"scopes\": [\n            \"http://photoz.example.com/dev/scopes/view\",\n            \"http://photoz.example.com/dev/scopes/add\"\n        ],\n        \"request_http_method\":\"DELETE\",\n        \"request_url\":\"http://example.com/object/1234\"\n\n    }   \n}\n\nSample response:\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"ticket\": \"mcvmstkrkrdfskdjdasldf\",\n    }\n}  Discovery  Pattern  Request:\n{\n    \"command\":\"discovery\",\n    \"params\": {\n        \"discovery_url\":\"` discovery url `\"\n    }\n}\n\nResponse:\n{\n    \"status\":\"` command status `\",\n    \"data\":{\n        ` discovery data `\n    }\n}  Sample  Request:\n{\n    \"command\":\"discovery\",\n    \"params\": {\n        \"discovery_url\":\"https://seed.gluu.org/.well-known/openid-configuration\"\n    }\n}\n\nResponse:\n{\n    \"data\": {\n        \"issuer\": \"https://seed.gluu.org\",\n        \"authorization_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n        \"token_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\",\n        \"userinfo_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/userinfo\",\n        \"clientinfo_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/clientinfo\",\n        \"check_session_iframe\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/check_session\",\n        \"end_session_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/end_session\",\n        \"jwks_uri\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\",\n        \"registration_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/register\",\n        \"validate_token_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/validate\",\n        \"federation_metadata_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/federationmetadata\",\n        \"federation_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/federation\",\n        \"id_generation_endpoint\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/id\",\n        \"scopes_supported\": [\n            \"openid\",\n            \"address\",\n            \"clientinfo\",\n            \"http://docs.kantarainitiative.org/uma/scopes/prot.json\",\n            \"profile\",\n            \"phone\",\n            \"http://docs.kantarainitiative.org/uma/scopes/authz.json\",\n            \"email\"\n        ],\n        \"response_types_supported\": [\n            \"code\",\n            \"code id_token\",\n            \"token\",\n            \"token id_token\",\n            \"code token\",\n            \"code token id_token\",\n            \"id_token\"\n        ],\n        \"grant_types_supported\": [\n            \"authorization_code\",\n            \"implicit\",\n            \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n        ],\n        \"subject_types_supported\": [\n            \"public\",\n            \"pairwise\"\n        ],\n        ....` SAVE SPACE: remove part of discovery response, see docs to take a look to full response `................\n        \"service_documentation\": \"http://ox.gluu.org/doku.php?id=oxauth:home\",\n        \"claims_locales_supported\": [\"en-US\"],\n            \"ui_locales_supported\": [\"en-US\"],\n        \"claims_parameter_supported\": true,\n        \"request_parameter_supported\": true,\n        \"request_uri_parameter_supported\": true,\n        \"require_request_uri_registration\": false,\n        \"op_policy_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:policy\",\n        \"op_tos_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:tos\"\n    }\n\n}", 
            "title": "Command Types"
        }, 
        {
            "location": "/reference/oxTrust/", 
            "text": "oxTrust Configuration\n\n\noxTrust is a JBoss Seam application that provides organizational cloud identity\nmanagement services, including REST service endpoints and a user friendly cloud\nidentity management console (aka a GUI). \n\n\noxTrust is tightly coupled with oxAuth. oxAuth configuration is stored in LDAP,\nand it would be hard to generate the right configuration entries without\noxTrust. The projects are separate projects because in a high throughput cluster\ndeployment, many oxAuth servers are needed versus a few oxTrust instances.\n\n\noxTrust.properties\n\n\n\n\n\n\napplianceInum\n \n\n\n\n\n\n\norgInum\n \n\n\n\n\n\n\norgDisplayName\n \n\n\n\n\n\n\norgShortName\n \n\n\n\n\n\n\nidp.url\n \n\n\n\n\n\n\nappliance.url\n \n\n\n\n\n\n\nkeystore.path\n \n\n\n\n\n\n\nkeystore.password\n \n\n\n\n\n\n\nperson-objectClass-types\n \ninetOrgPerson, gluuPerson\n\n\n\n\n\n\nperson-objectClass-displayNames\n \ninetOrgPerson, gluuPerson\n\n\n\n\n\n\nsvn.configuration-store.root\n \n\n\n\n\n\n\nsvn.configuration-store.user\n \n\n\n\n\n\n\nsvn.configuration-store.password\n \n\n\n\n\n\n\nperson.allow-modification\n `TRUE | false'\n\n\n\n\n\n\nsite.update-appliance-status\n 'true | FALSE`\n\n\n\n\n\n\npersist-in-svn\n \ntrue | FALSE\n\n\n\n\n\n\nbaseDN\n \no=gluu\n\n\n\n\n\n\nschema.add.attribute.attributeTypes\n \n( %%s-oid NAME '%%s' EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 USAGE userApplications X-SCHEMA-FILE '100-user.ldif' X-ORIGIN 'gluu' )\n\n\n\n\n\n\nschema.add-without-attribute-types.objectClass.objectClasses\n \n( %%s-oid NAME '%%s' SUP top STRUCTURAL MUST objectClass X-SCHEMA-FILE '100-user.ldif' X-ORIGIN 'gluu' )\n\n\n\n\n\n\nschema.add-with-attribute-types.objectClass.objectClasses\n \n( %%s-oid NAME '%%s' SUP top STRUCTURAL MUST objectClass MAY ( %%s ) X-SCHEMA-FILE '100-user.ldif' X-ORIGIN 'gluu' )\n\n\n\n\n\n\nphoto.repository.root-dir\n \n/var/photos\n\n\n\n\n\n\nphoto.repository.thumb-width\n \n300\n\n\n\n\n\n\nphoto.repository.thumb-height\n \n300\n\n\n\n\n\n\nphoto.repository.count-levels\n \n3\n\n\n\n\n\n\nphoto.repository.count-folders-per-level\n \n20\n\n\n\n\n\n\nvelocity.log\n \n/opt/tomcat/logs/velocity.log\n\n\n\n\n\n\nlogo.location\n \n/var/photos\n\n\n\n\n\n\ngluuSP.shared.attributes\n \nuid, mail, sn, givenName\n\n\n\n\n\n\ngluuSP.metadata\n \n/opt/idp/metadata\n\n\n\n\n\n\nshibboleth2.idp.root-dir\n \n/opt/idp\n\n\n\n\n\n\nshibboleth2.federation.root-dir\n \n/opt/shibboleth-federation\n\n\n\n\n\n\nshibboleth2.sp.conf-dir\n \n/etc/shibboleth\n\n\n\n\n\n\nconfigGeneration\n \nenabled | DISABLED\n\n\n\n\n\n\nidp.securityCert\n \n\n\n\n\n\n\nidp.securityKey\n \n\n\n\n\n\n\n.securityCert\n \n\n\n\n\n\n\nidp.securityKeyPassword\n \n\n\n\n\n\n\nidp.bindDN\n \n\n\n\n\n\n\nidp.bindPassword\n \n\n\n\n\n\n\nidp.useSSL\n \nTRUE | false\n\n\n\n\n\n\nidp.ldap.server\n \n\n\n\n\n\n\nmysql.url\n \njdbc:mysql:///localhost\n\n\n\n\n\n\nmysql.user\n \nidp\n\n\n\n\n\n\nmysql.password\n \n\n\n\n\n\n\nldifStoreDir\n \n/var/removedldif/\n\n\n\n\n\n\ncacertsLocation\n \n/usr/java/latest/jre/lib/security/cacerts\n This option defines keystore to use for SSL download certificate verification. It is a good idea to have all truster root CA at this keystore Defaults to tomcat SSL keystore (one defined in server.xml)\n\n\n\n\n\n\ncacertsPassphrase\n If this option is present it will be used as a passphrase to keystore \ndefined in the cacertsLocation. It is only needed if cacertsLocation is \ndefined and is protected by password. For default jre cacerts behavior (empty\npassword) - leace commented.  \n\n\n\n\n\n\ncertDir\n \n/etc/certs/\n location of certificates used in configuration files\n\n\n\n\n\n\ncertDirTemp\n \n/etc/certs/temp\n temporary location for certificates while user performs update procedures \n\n\n\n\n\n\nservicesRestartTrigger\n \n/opt/gluu/trigger_restart_of_services_delete_me_to_do_so\n File to \nbe deleted to trigger restart of appliance services.\n\n\n\n\n\n\noxtrust.auth.mode\n  set this to \"basic\" without the quotation to use basic authentication or leave it blank to use oxAuth\n\n\n\n\n\n\noxauth.authorize.url\n \n\n\n\n\noxauth.token.url\n \n\n\noxauth.token.validation.url\n \n\n\noxauth.checksession.url\n \n\n\noxauth.userinfo.url\n \n\n\n\n\noxauth.logout.url\n \n\n\n\n\n\n\noxauth.client.id\n \n\n\n\n\noxauth.client.credentials\n \n\n\noxauth.client.password\n \n\n\noxauth.client.scope\n \nopenid+profile+address+email\n\n\n\n\noxTrustLdap.properties\n\n\nThese are the properties oxTrust uses to connect to LDAP\n\n\n\n\n\n\nbindDN\n \n\n\n\n\n\n\nbindPassword\n \n\n\n\n\n\n\nservers\n \nlocalhost:1636\n\n\n\n\n\n\nuseSSL\n \nTRUE | false\n\n\n\n\n\n\nmaxconnections\n \n3\n\n\n\n\n\n\nbaseConfigurationDN\n \n\n\n\n\n\n\ncreateLdapConfigurationEntryIfNotExist\n \nTRUE | false", 
            "title": "OxTrust"
        }, 
        {
            "location": "/reference/oxTrust/#oxtrust-configuration", 
            "text": "oxTrust is a JBoss Seam application that provides organizational cloud identity\nmanagement services, including REST service endpoints and a user friendly cloud\nidentity management console (aka a GUI).   oxTrust is tightly coupled with oxAuth. oxAuth configuration is stored in LDAP,\nand it would be hard to generate the right configuration entries without\noxTrust. The projects are separate projects because in a high throughput cluster\ndeployment, many oxAuth servers are needed versus a few oxTrust instances.", 
            "title": "oxTrust Configuration"
        }, 
        {
            "location": "/reference/oxTrust/#oxtrustproperties", 
            "text": "applianceInum      orgInum      orgDisplayName      orgShortName      idp.url      appliance.url      keystore.path      keystore.password      person-objectClass-types   inetOrgPerson, gluuPerson    person-objectClass-displayNames   inetOrgPerson, gluuPerson    svn.configuration-store.root      svn.configuration-store.user      svn.configuration-store.password      person.allow-modification  `TRUE | false'    site.update-appliance-status  'true | FALSE`    persist-in-svn   true | FALSE    baseDN   o=gluu    schema.add.attribute.attributeTypes   ( %%s-oid NAME '%%s' EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 USAGE userApplications X-SCHEMA-FILE '100-user.ldif' X-ORIGIN 'gluu' )    schema.add-without-attribute-types.objectClass.objectClasses   ( %%s-oid NAME '%%s' SUP top STRUCTURAL MUST objectClass X-SCHEMA-FILE '100-user.ldif' X-ORIGIN 'gluu' )    schema.add-with-attribute-types.objectClass.objectClasses   ( %%s-oid NAME '%%s' SUP top STRUCTURAL MUST objectClass MAY ( %%s ) X-SCHEMA-FILE '100-user.ldif' X-ORIGIN 'gluu' )    photo.repository.root-dir   /var/photos    photo.repository.thumb-width   300    photo.repository.thumb-height   300    photo.repository.count-levels   3    photo.repository.count-folders-per-level   20    velocity.log   /opt/tomcat/logs/velocity.log    logo.location   /var/photos    gluuSP.shared.attributes   uid, mail, sn, givenName    gluuSP.metadata   /opt/idp/metadata    shibboleth2.idp.root-dir   /opt/idp    shibboleth2.federation.root-dir   /opt/shibboleth-federation    shibboleth2.sp.conf-dir   /etc/shibboleth    configGeneration   enabled | DISABLED    idp.securityCert      idp.securityKey      .securityCert      idp.securityKeyPassword      idp.bindDN      idp.bindPassword      idp.useSSL   TRUE | false    idp.ldap.server      mysql.url   jdbc:mysql:///localhost    mysql.user   idp    mysql.password      ldifStoreDir   /var/removedldif/    cacertsLocation   /usr/java/latest/jre/lib/security/cacerts  This option defines keystore to use for SSL download certificate verification. It is a good idea to have all truster root CA at this keystore Defaults to tomcat SSL keystore (one defined in server.xml)    cacertsPassphrase  If this option is present it will be used as a passphrase to keystore \ndefined in the cacertsLocation. It is only needed if cacertsLocation is \ndefined and is protected by password. For default jre cacerts behavior (empty\npassword) - leace commented.      certDir   /etc/certs/  location of certificates used in configuration files    certDirTemp   /etc/certs/temp  temporary location for certificates while user performs update procedures     servicesRestartTrigger   /opt/gluu/trigger_restart_of_services_delete_me_to_do_so  File to \nbe deleted to trigger restart of appliance services.    oxtrust.auth.mode   set this to \"basic\" without the quotation to use basic authentication or leave it blank to use oxAuth    oxauth.authorize.url     oxauth.token.url    oxauth.token.validation.url    oxauth.checksession.url    oxauth.userinfo.url     oxauth.logout.url      oxauth.client.id     oxauth.client.credentials    oxauth.client.password    oxauth.client.scope   openid+profile+address+email", 
            "title": "oxTrust.properties"
        }, 
        {
            "location": "/reference/oxTrust/#oxtrustldapproperties", 
            "text": "These are the properties oxTrust uses to connect to LDAP    bindDN      bindPassword      servers   localhost:1636    useSSL   TRUE | false    maxconnections   3    baseConfigurationDN      createLdapConfigurationEntryIfNotExist   TRUE | false", 
            "title": "oxTrustLdap.properties"
        }, 
        {
            "location": "/reference/mod_auth_oidc/", 
            "text": "mod_auth_oidc\n\n\nThis is an authentication and/or authorization module for the Apache 2.x HTTP server implementing OpenID Connect.\n\n\nWhat is OpenID Connect\n\n\nOpenID Connect is defined as \"a simple identity layer on top of the OAuth 2.0 Protocol\" according to \nOpenID Connect Wrbsite\n. It allows clients, including web-based, mobile and javascript, to authorize access by authenticating the user. The profile allows the clients to request and receive user infomation with encryption of identity data, discovery of OpenID Providers and session management.\n\n\nThe OpenID Connect 1.0 specification consists of six documents:  \nCore\n, \nDiscovery\n, \nDynamic Registration\n, \nOAuth2.0 Multiple Response Types\n, \nOAuth2.0 Form Post Response Mode\n, \nSession Management\n and \nHTTP-Based Logout\n.\n\n\nInstallation Instructions\n\n\nThe authoriztion module is available for install in Ubuntu and Centos. \nThe instruction outline how to install the the module with Gluu Server. \nPlease follow the instructions to install mod_auth_oidc in \nUbuntu\n or \nCentOS", 
            "title": "Apache Module"
        }, 
        {
            "location": "/reference/mod_auth_oidc/#mod_auth_oidc", 
            "text": "This is an authentication and/or authorization module for the Apache 2.x HTTP server implementing OpenID Connect.", 
            "title": "mod_auth_oidc"
        }, 
        {
            "location": "/reference/mod_auth_oidc/#what-is-openid-connect", 
            "text": "OpenID Connect is defined as \"a simple identity layer on top of the OAuth 2.0 Protocol\" according to  OpenID Connect Wrbsite . It allows clients, including web-based, mobile and javascript, to authorize access by authenticating the user. The profile allows the clients to request and receive user infomation with encryption of identity data, discovery of OpenID Providers and session management.  The OpenID Connect 1.0 specification consists of six documents:   Core ,  Discovery ,  Dynamic Registration ,  OAuth2.0 Multiple Response Types ,  OAuth2.0 Form Post Response Mode ,  Session Management  and  HTTP-Based Logout .", 
            "title": "What is OpenID Connect"
        }, 
        {
            "location": "/reference/mod_auth_oidc/#installation-instructions", 
            "text": "The authoriztion module is available for install in Ubuntu and Centos. \nThe instruction outline how to install the the module with Gluu Server. \nPlease follow the instructions to install mod_auth_oidc in  Ubuntu  or  CentOS", 
            "title": "Installation Instructions"
        }, 
        {
            "location": "/articles/cache-refresh/", 
            "text": "Cache Refresh Introduction\n\n\nThe Gluu Server has two LDAP integrations: (1) authentication and (2) identity mapping. Only sometimes is it the same LDAP server. To synchronize user accounts from an external LDAP directory server, you can use the \nbuilt-in oxTrust features for \u201dCache Refresh\u201d\n, which support mapping identities from n number of source directory servers.\n\n\nWhen configured for Cache Refresh, oxTrust acts as a metadirectory. It periodically retreives the full data set from each source LDAP server, hashes the values, and stores this hash on the disk\u2013a snapshot file. Subsequent results are compared with the last snapshot. Using set subtraction, oxTrust can calculate which entries have changed. Note: this method of syncrhonization requires periodic data integrity checking, as there is no assured messaging. Alternately, you can just remove the user data, and refresh it from the source. However, be careful if use updates are allowed for syncrhonized entries!\n\n\nThe interval between data refresh is configurable in the oxTrust GUI. You can also enable an attribute transformation script if you need to derive attributes. For example, let's say you need an attribute called \u201cpayingCustomer\u201d and that information is derived by calling an API. You also have access to the source values, and can use these to calculate new attributes, or even change the value of existing attributes.\n\n\nFor each source LDAP server, the Gluu Server deployer needs to know the LDAP connection details, and have credentials for a user with read access (as needed) to the LDAP tree. At a minimum: host, port, bind DN, bind password, base dn for search, objectclass of person entry. Note: LDAPS should always be used.\n\n\nAfter configuring cache refresh, you should give it some time to run, and populate the LDAP server. Here are some tips before you get started:\n\n\n\n\n\n\nEnable 'Keep External Person' during CR setup. This will allow your default user 'admin' to log into Gluu Server after initial Cache Refresh iteration. If you do not enable 'Keep External Person', your 'admin' user including all other test users will be gone after first Cache Refresh iteration.\n\n\n\n\n\n\nMake sure you are using LDAP authentication, not VDS. You'll only need VDS setting if you're using the Radiant Logic Virtual Directory Server.\n\n\n\n\n\n\nCheck the snapshots folder to see if files are being created.\n\n\n\n\n\n\nUse the oxTrust admin to browse users.\n\n\n\n\n\n\nUse ldapsearch to check to see if results are starting to come in. For example: \n\n\n/opt/opendj/bin/ldapsearch -h localhost -p 1636 -Z -X -D \"cn=directory manager\" -w 'pass_of_ldap_ -b 'ou=people,o=DA....,o=gluu' dn | grep \"dn\\:\" | wc -l\n\n\n\nwill search total number of users inside gluu ldap. \n\n\n\n\n\n\nTry to login with one of these users\u2026 assuming you've also setup your Gluu Server to use the correct LDAP server for authentication.\n\n\n\n\n\n\nCache Refresh Setup Overview\n\n\nTwo separate parts are included in Cache Refresh setup:\n\n\n\n\n\n\nConfiguring Cache Refresh Engine\n\n\n\n\n\n\nConfiguring Authentication Manager\n\n\n\n\n\n\nFor both configurations, the deployer should have a clear understanding of their own backend server (Active Directory or some other LDAP server) and their Gluu Server's integrated LDAP tree.\n\n\n\n\nAs you can see in the above diagram, 'Cache Refresh Engine' and 'Authentication Manager' are each connected separately to the backend AD/LDAP. Both Engine and Manager need to know how and where to search for a user when the user authenticates through the Gluu Server for any kind of single sign-on operation. Any failure in these two connections will halt the users ability to log into the system.\n\n\nWe are going to describe a bit on both parts below.\n\n\n1. Configuring 'Cache Refresh Engine' in Gluu Server:\n\n\nThe deployer needs to know various values of his own backend AD to configure this part. For example, host \n port, binDN user information, bindDN password, Objectclasses, attributes whose information will be pulled etc.\n\n\nIn addition, the deployer also needs to know generic information of his Gluu Server's LDAP. By default, deployer can use 'localhost:1636', 'cn=directory manager', 'password what he chose during installation', 'ou=people,o=site' as server information, binDN, bindDN password and baseDN respectively.\n\n\nAfter collecting this information, deployer can move forward with Cache Refresh Engine setup.\n\n\n2. Configuring 'Authentication Manager' in Gluu Server:\n\n\nThis manager knows where to search for users when a request comes in. The deployer needs to put his own backend AD's information here which will allow the Gluu Server to connect and search for specific users based on Username/UID/sAMAccountName.\n\n\nTo describe picture a bit:\n\n\n\n\n\n\nbackend AD and Cache Refresh Engine are always connected and talking to each other to check if any user's information are updated or not.\n\n\n\n\n\n\nCache Refresh Engine and Gluu LDAP are always connected. After getting information from #1 point, Gluu server updates user's information in 'Gluu LDAP'\n\n\n\n\n\n\nAuthentication Manager is also connected with backend AD and this manager has information of backend AD.\n\n\n\n\n\n\nHere's a real life scenario:\n\n\na. A user is trying to log into Gluu Server. \n\n\nb. After login, Gluu server takes this user's information and checks 'Gluu LDAP' to see if this user is available in Gluu Server or not. \n\n\nc. If the user is present in Gluu Server then the workflow goes to 'Authentication Manager' as it can check the user's password against customer's backend.\n\n\nAfter successful completion of b and c, user will be logged into the Gluu Server.\n\n\nWhat might be the best practice to complete this identity mapping successfully?\n\n\n\n\n\n\nConfigure Cache Refresh. Enable 'Keep External Person' during CR setup. This enabling will allow your default user 'admin' to log into the Gluu Server after initial Cache Refresh iteration. If you do not enable 'Keep External Person', your 'admin' user including all other test users will be gone after the first Cache Refresh iteration.\n\n\n\n\n\n\nTest if you were able to successfully import all your users information into the Gluu Server or not. After 10-30 mins, check user's information in the Gluu Server. If everything looks good you can move forward.\n\n\n\n\n\n\nConfigure Authentication Manager. Provide your backend information here. Test LDAP connection. If both look good and work as expected, you can 'Update' this setup.\n\n\n\n\n\n\nOpen a new browser and try to log into Gluu Server with you AD credential. If you fail, check logs for failure.", 
            "title": "Cache Refresh Introduction"
        }, 
        {
            "location": "/articles/cache-refresh/#cache-refresh-introduction", 
            "text": "The Gluu Server has two LDAP integrations: (1) authentication and (2) identity mapping. Only sometimes is it the same LDAP server. To synchronize user accounts from an external LDAP directory server, you can use the  built-in oxTrust features for \u201dCache Refresh\u201d , which support mapping identities from n number of source directory servers.  When configured for Cache Refresh, oxTrust acts as a metadirectory. It periodically retreives the full data set from each source LDAP server, hashes the values, and stores this hash on the disk\u2013a snapshot file. Subsequent results are compared with the last snapshot. Using set subtraction, oxTrust can calculate which entries have changed. Note: this method of syncrhonization requires periodic data integrity checking, as there is no assured messaging. Alternately, you can just remove the user data, and refresh it from the source. However, be careful if use updates are allowed for syncrhonized entries!  The interval between data refresh is configurable in the oxTrust GUI. You can also enable an attribute transformation script if you need to derive attributes. For example, let's say you need an attribute called \u201cpayingCustomer\u201d and that information is derived by calling an API. You also have access to the source values, and can use these to calculate new attributes, or even change the value of existing attributes.  For each source LDAP server, the Gluu Server deployer needs to know the LDAP connection details, and have credentials for a user with read access (as needed) to the LDAP tree. At a minimum: host, port, bind DN, bind password, base dn for search, objectclass of person entry. Note: LDAPS should always be used.  After configuring cache refresh, you should give it some time to run, and populate the LDAP server. Here are some tips before you get started:    Enable 'Keep External Person' during CR setup. This will allow your default user 'admin' to log into Gluu Server after initial Cache Refresh iteration. If you do not enable 'Keep External Person', your 'admin' user including all other test users will be gone after first Cache Refresh iteration.    Make sure you are using LDAP authentication, not VDS. You'll only need VDS setting if you're using the Radiant Logic Virtual Directory Server.    Check the snapshots folder to see if files are being created.    Use the oxTrust admin to browse users.    Use ldapsearch to check to see if results are starting to come in. For example:   /opt/opendj/bin/ldapsearch -h localhost -p 1636 -Z -X -D \"cn=directory manager\" -w 'pass_of_ldap_ -b 'ou=people,o=DA....,o=gluu' dn | grep \"dn\\:\" | wc -l  will search total number of users inside gluu ldap.     Try to login with one of these users\u2026 assuming you've also setup your Gluu Server to use the correct LDAP server for authentication.", 
            "title": "Cache Refresh Introduction"
        }, 
        {
            "location": "/articles/cache-refresh/#cache-refresh-setup-overview", 
            "text": "Two separate parts are included in Cache Refresh setup:    Configuring Cache Refresh Engine    Configuring Authentication Manager    For both configurations, the deployer should have a clear understanding of their own backend server (Active Directory or some other LDAP server) and their Gluu Server's integrated LDAP tree.   As you can see in the above diagram, 'Cache Refresh Engine' and 'Authentication Manager' are each connected separately to the backend AD/LDAP. Both Engine and Manager need to know how and where to search for a user when the user authenticates through the Gluu Server for any kind of single sign-on operation. Any failure in these two connections will halt the users ability to log into the system.  We are going to describe a bit on both parts below.", 
            "title": "Cache Refresh Setup Overview"
        }, 
        {
            "location": "/articles/cache-refresh/#1-configuring-cache-refresh-engine-in-gluu-server", 
            "text": "The deployer needs to know various values of his own backend AD to configure this part. For example, host   port, binDN user information, bindDN password, Objectclasses, attributes whose information will be pulled etc.  In addition, the deployer also needs to know generic information of his Gluu Server's LDAP. By default, deployer can use 'localhost:1636', 'cn=directory manager', 'password what he chose during installation', 'ou=people,o=site' as server information, binDN, bindDN password and baseDN respectively.  After collecting this information, deployer can move forward with Cache Refresh Engine setup.", 
            "title": "1. Configuring 'Cache Refresh Engine' in Gluu Server:"
        }, 
        {
            "location": "/articles/cache-refresh/#2-configuring-authentication-manager-in-gluu-server", 
            "text": "This manager knows where to search for users when a request comes in. The deployer needs to put his own backend AD's information here which will allow the Gluu Server to connect and search for specific users based on Username/UID/sAMAccountName.  To describe picture a bit:    backend AD and Cache Refresh Engine are always connected and talking to each other to check if any user's information are updated or not.    Cache Refresh Engine and Gluu LDAP are always connected. After getting information from #1 point, Gluu server updates user's information in 'Gluu LDAP'    Authentication Manager is also connected with backend AD and this manager has information of backend AD.    Here's a real life scenario:  a. A user is trying to log into Gluu Server.   b. After login, Gluu server takes this user's information and checks 'Gluu LDAP' to see if this user is available in Gluu Server or not.   c. If the user is present in Gluu Server then the workflow goes to 'Authentication Manager' as it can check the user's password against customer's backend.  After successful completion of b and c, user will be logged into the Gluu Server.  What might be the best practice to complete this identity mapping successfully?    Configure Cache Refresh. Enable 'Keep External Person' during CR setup. This enabling will allow your default user 'admin' to log into the Gluu Server after initial Cache Refresh iteration. If you do not enable 'Keep External Person', your 'admin' user including all other test users will be gone after the first Cache Refresh iteration.    Test if you were able to successfully import all your users information into the Gluu Server or not. After 10-30 mins, check user's information in the Gluu Server. If everything looks good you can move forward.    Configure Authentication Manager. Provide your backend information here. Test LDAP connection. If both look good and work as expected, you can 'Update' this setup.    Open a new browser and try to log into Gluu Server with you AD credential. If you fail, check logs for failure.", 
            "title": "2. Configuring 'Authentication Manager' in Gluu Server:"
        }, 
        {
            "location": "/articles/apache-saml/", 
            "text": "Apache SAML\n\n\nConfiguring Apache Shibboleth SP in CentOS\n\n\nSystem Preparation\n\n\nAdd Shibboleth repo for CentOS\n\n\n\n\nContents of shib.repo\n\n\n\n\n[security_shibboleth]\nname=Shibboleth (CentOS_CentOS-6)\ntype=rpm-md\nbaseurl=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/\ngpgcheck=1\ngpgkey=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/repodata/repomd.xml.key\nenabled=1\n\n\n\n\n\n\nhttp://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo\n\n\n\n\nShibboleth SP Installation\n\n\nPlease run the following commands to install the Shibboleth SP.\n\n\n\n\nyum install shibboleth\n\n\nservice shibd start\n\n\nchkconfig shibd on\n\n\n\n\nInstall and Configure httpd\n\n\nInstallation\n\n\nThe following commands will install and start the Apache server on your machine/linux environment.\n\n\n\n\nyum install httpd\n\n\nservice httpd start\n\n\nStop the firewall\n\n\n\n\nConfiguration\n\n\nEdit 'httpd.conf' with following changes.\n\n\n\n\n\n\nChange ServerName directive to the server name of the SP\n\n\n\n\n\n\nUseCanonicalName = On\n\n\n\n\n\n\nRestart httpd\n\n\n\n\n\n\nHttpd Testing\n\n\n\n\n\n\nCreate a \"index.html\" file inside /var/www/html\n\n\n\n\n\n\nRestart httpd\n\n\n\n\n\n\nCheck from your browser\n\n\n\n\n\n\nSP Key Certificate\n\n\n\n\n\n\nCreate private key and certificate and place those in /etc/shibboleth\n\n\n\n\n\n\nChange permission\n\n\n\n\n\n\nShibboleth SP Configuration\n\n\nThis section describes how to configure \"shibboleth2.xml\" file.\n\n\n\n\n\n\nProvide \"entityID\" of SP in:\n\n\n\n\nApplicationDefaults entityID=\"http://sp.example.org/Shibboleth\"\n section\n\n\n\n\n\n\n\n\nProvide \"entityID\" of IdP in:\n\n\n\n\nSSO entityID=\"https://idp.gluu.org/idp/shibboleth\"\n section\n\n\n\n\n\n\n\n\nPoint the metadata provider, in most cases it is Gluu IdP metadata link:\n\n\n\n\nMetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"\n section\n\n\n\n\n\n\n\n\nProvide the key and cert of SP in:\n\n\n\n\nCredentialResolver type=\"File\" key=\"spkey.key\" certificate=\"spcrt.crt\"\n section\n\n\n\n\n\n\n\n\nConfiguring Apache Shibboleth SP in Ubuntu\n\n\nSystem Preparation\n\n\n\n\n\n\nInstall Curl\n\n\n\n\n\n\napt-get install curl\n\n\n\n\n\n\nGrab Shibboleth repository from SWITCH: \n\n\n\n\n\n\ncurl -k -O http://pkg.switch.ch/switchaai/SWITCHaai-swdistrib.asc\n\n\n\n\n\n\ngpg --with-fingerprint SWITCHaai-swdistrib.asc\n\n\n\n\n\n\napt-key add SWITCHaai-swdistrib.asc\n\n\n\n\n\n\necho 'deb http://pkg.switch.ch/switchaai/ubuntu precise main' | sudo tee /etc/apt/sources.list.d/SWITCHaai-swdistrib.list\n /dev/null\n\n\n\n\n\n\napt-get update\n\n\n\n\n\n\nShibboleth SP Installation\n\n\n\n\n\n\napt-get install shibboleth\n\n\n\n\n\n\nQuick test: \nshibd -t [Important is the last line: overall configuration is loadable, check console for non-fatal problems]\n\n\n\n\n\n\nApache Testing\n\n\n\n\napache2ctl configtest\n\n\n\n\nTest Shibboleth\n\n\n\n\nhttps://hostname_of_sp/Shobboleth.sso/Session\n\n\n\n\nIt will say: \"A valid session was not found.\"\n\n\nShibboleth Manual Configuration (one Physical SP):\n\n\n\n\n\n\nCreate a directory named \"secure\" under /var/www/\n\n\n\n\n\n\nChange permission for directory \"secure\" to www-data:www-data\n\n\n\n\n\n\nhttpd.conf\n\n\n\n\n\n\nServerName \nhostname_of_server\n\n\n\n\n\n\nSet Location:\n\n\nLocation /secure\n\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    ShibUseHeaders on\n    Require valid-user\n\n/Location\n\n\n\n\n\n\n\n\n\n\nshibboleth2.xml configuration\n\n\n\n\n\n\nEntityID of SP: \nApplicationDefaults entityID=\"http://hostname/secure\"\n\n\n\n\n\n\nPrivide EntityID of IDP: \nSSO entityID=\"https://idp.gluu.org/idp/shibboleth\"\n\n\n\n\n\n\nMetadata Provider, IDP: \nMetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"\n\n\n\n\n\n\n\n\n\n\nRestart shibd and apache2\n\n\n\n\n\n\nCreate Trust Relationship for this SP in your desired IdP.\n\n\n\n\n\n\nConfiguring Apache Shibboleth SP in Windows\n\n\nShibboleth SP Installation\n\n\n\n\n\n\nDownload the MSI of Shibboleth-SP from :http://www.shibboleth.net/downloads/service-provider/latest/\n\n\n\n\n\n\nStart the installation\n\n\n\n\n\n\n\n\n\n\nDestination folder (by default it is: C:\\opt\\shibboleth-sp).\n\n\n\n\n\n\n\n\nSelect Shibboleth Daemon port: default is 1600, you can keep it for local testing\n\n\n\n\n\n\n\n\n\n\nNow, there are two options here. You have to follow either one (but not both) according to your target.\n\n\n\n\n\n\nOption 1: If you are installing Shibboleth for Apache Web Server\n\n\n\n\n\n\nOption 2: If you are installing Shibboleth for Microsoft IIS Web Server\n\n\na. For Microsoft IIS Web Server, CHECK \u201cInstall ISAPI filter and configure IIS\u201d, remember to put the file Extension \u201d.sso\u201d; this            is necessary\n\n\n\n\n\n\n\n\n\n\n\n\n    b. For Apache Web Server, UNCHECK \"Install ISAPI filter and configure IIS\".\n\n\n\n\n\n3. UAC of Windows 7 may block this program, so allow it.\n\n\n\n\n\nApache Configuration\n\n\n\n\nDownload the Apache HTTP server MSI Installer with OpenSSL: http://httpd.apache.org/download.cgi#apache22\n\n\n\n\n\n\n\n\nSelect Destination. You can keep the default destination for your local testing. But, make sure that there is no other \u201cApache Software Foundation\u201d directory in your current \u201cC:\\Program Files\\\u201d location.\n\n\n\n\n\n\n\n\nProvide Server Information. For local testing, you can use \u201clocaldomain/localhost\u201d\n\n\n\n\n\n\n\n\nTest whether Apache is installed or not. Open your web browser and use \u201clocalhost\u201d. If you see something like image shown below; you are done!\n\n\n\n\na\n\n\nShibboleth and Apache Configuration\n\n\n\n\n\n\nChange the permission of the Apache Installation Directory, provide \u201cwrite\u201d access\n\n\n\n\n\n\n'httpd.conf' configuration\n\n\n\n\n\n\nChange: \u201cServerName localhost:80\u201d (for your local testing)\n\n\n\n\n\n\nCopy apache22.conf from the Shibboleth directory to ~/apache/conf/extra/\n\n\n\n\n\n\n\n\n\n\n'Shibboleth2.xml' configuration\n\n\n\n\n\n\nChange: Host name=\u201clocalhost\u201d ( for local testging )\n\n\n\n\n\n\nChange: entityID=\u201chttps://localhost/shibboleth\u201d ( for local testing )\n\n\n\n\n\n\nChange: ApplicationOverride id=\u201cadmin\u201d entityID=\u201chttps://localhost/shibboleth/\u201d\n\n\n\n\n\n\n\n\n\n\nReboot your windows machine.\n\n\n\n\n\n\nTest SP Installation with Windows and Apache\n\n\n\n\nOpen Web browser and provide the address: localhost/Shibboleth.sso/Status\n\n\nIf you can see some XML page like the one shown below, you are done with your SP installation in Windows through Apache2.\n\n\n\n\na", 
            "title": "Apache SAML SP Config"
        }, 
        {
            "location": "/articles/apache-saml/#apache-saml", 
            "text": "", 
            "title": "Apache SAML"
        }, 
        {
            "location": "/articles/apache-saml/#configuring-apache-shibboleth-sp-in-centos", 
            "text": "System Preparation  Add Shibboleth repo for CentOS   Contents of shib.repo   [security_shibboleth]\nname=Shibboleth (CentOS_CentOS-6)\ntype=rpm-md\nbaseurl=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/\ngpgcheck=1\ngpgkey=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/repodata/repomd.xml.key\nenabled=1   http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo   Shibboleth SP Installation  Please run the following commands to install the Shibboleth SP.   yum install shibboleth  service shibd start  chkconfig shibd on   Install and Configure httpd  Installation  The following commands will install and start the Apache server on your machine/linux environment.   yum install httpd  service httpd start  Stop the firewall   Configuration  Edit 'httpd.conf' with following changes.    Change ServerName directive to the server name of the SP    UseCanonicalName = On    Restart httpd    Httpd Testing    Create a \"index.html\" file inside /var/www/html    Restart httpd    Check from your browser    SP Key Certificate    Create private key and certificate and place those in /etc/shibboleth    Change permission    Shibboleth SP Configuration  This section describes how to configure \"shibboleth2.xml\" file.    Provide \"entityID\" of SP in:   ApplicationDefaults entityID=\"http://sp.example.org/Shibboleth\"  section     Provide \"entityID\" of IdP in:   SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"  section     Point the metadata provider, in most cases it is Gluu IdP metadata link:   MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"  section     Provide the key and cert of SP in:   CredentialResolver type=\"File\" key=\"spkey.key\" certificate=\"spcrt.crt\"  section", 
            "title": "Configuring Apache Shibboleth SP in CentOS"
        }, 
        {
            "location": "/articles/apache-saml/#configuring-apache-shibboleth-sp-in-ubuntu", 
            "text": "System Preparation    Install Curl    apt-get install curl    Grab Shibboleth repository from SWITCH:     curl -k -O http://pkg.switch.ch/switchaai/SWITCHaai-swdistrib.asc    gpg --with-fingerprint SWITCHaai-swdistrib.asc    apt-key add SWITCHaai-swdistrib.asc    echo 'deb http://pkg.switch.ch/switchaai/ubuntu precise main' | sudo tee /etc/apt/sources.list.d/SWITCHaai-swdistrib.list  /dev/null    apt-get update    Shibboleth SP Installation    apt-get install shibboleth    Quick test:  shibd -t [Important is the last line: overall configuration is loadable, check console for non-fatal problems]    Apache Testing   apache2ctl configtest   Test Shibboleth   https://hostname_of_sp/Shobboleth.sso/Session   It will say: \"A valid session was not found.\"  Shibboleth Manual Configuration (one Physical SP):    Create a directory named \"secure\" under /var/www/    Change permission for directory \"secure\" to www-data:www-data    httpd.conf    ServerName  hostname_of_server    Set Location:  Location /secure \n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    ShibUseHeaders on\n    Require valid-user /Location      shibboleth2.xml configuration    EntityID of SP:  ApplicationDefaults entityID=\"http://hostname/secure\"    Privide EntityID of IDP:  SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"    Metadata Provider, IDP:  MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"      Restart shibd and apache2    Create Trust Relationship for this SP in your desired IdP.", 
            "title": "Configuring Apache Shibboleth SP in Ubuntu"
        }, 
        {
            "location": "/articles/apache-saml/#configuring-apache-shibboleth-sp-in-windows", 
            "text": "Shibboleth SP Installation    Download the MSI of Shibboleth-SP from :http://www.shibboleth.net/downloads/service-provider/latest/    Start the installation      Destination folder (by default it is: C:\\opt\\shibboleth-sp).     Select Shibboleth Daemon port: default is 1600, you can keep it for local testing      Now, there are two options here. You have to follow either one (but not both) according to your target.    Option 1: If you are installing Shibboleth for Apache Web Server    Option 2: If you are installing Shibboleth for Microsoft IIS Web Server  a. For Microsoft IIS Web Server, CHECK \u201cInstall ISAPI filter and configure IIS\u201d, remember to put the file Extension \u201d.sso\u201d; this            is necessary           b. For Apache Web Server, UNCHECK \"Install ISAPI filter and configure IIS\".   3. UAC of Windows 7 may block this program, so allow it.   Apache Configuration   Download the Apache HTTP server MSI Installer with OpenSSL: http://httpd.apache.org/download.cgi#apache22     Select Destination. You can keep the default destination for your local testing. But, make sure that there is no other \u201cApache Software Foundation\u201d directory in your current \u201cC:\\Program Files\\\u201d location.     Provide Server Information. For local testing, you can use \u201clocaldomain/localhost\u201d     Test whether Apache is installed or not. Open your web browser and use \u201clocalhost\u201d. If you see something like image shown below; you are done!   a  Shibboleth and Apache Configuration    Change the permission of the Apache Installation Directory, provide \u201cwrite\u201d access    'httpd.conf' configuration    Change: \u201cServerName localhost:80\u201d (for your local testing)    Copy apache22.conf from the Shibboleth directory to ~/apache/conf/extra/      'Shibboleth2.xml' configuration    Change: Host name=\u201clocalhost\u201d ( for local testging )    Change: entityID=\u201chttps://localhost/shibboleth\u201d ( for local testing )    Change: ApplicationOverride id=\u201cadmin\u201d entityID=\u201chttps://localhost/shibboleth/\u201d      Reboot your windows machine.    Test SP Installation with Windows and Apache   Open Web browser and provide the address: localhost/Shibboleth.sso/Status  If you can see some XML page like the one shown below, you are done with your SP installation in Windows through Apache2.   a", 
            "title": "Configuring Apache Shibboleth SP in Windows"
        }, 
        {
            "location": "/articles/google-saml/", 
            "text": "Using SAML to get SSO with Google Apps\n\n\nGoogle Apps will work as Service Provide ( SP ) and we need to \"introduce\" Gluu Server with Google Apps as Gluu Server can work as Identity Provider ( IDP ).\n\n\nNOTE: It is highly recommended to use Google staging apps setup before Google\nproduction migration. If you have any question or confusion, please feel free to\nlet us know.\n\n\nWe need to configure both parties ( Google Apps and Gluu Server ) as they can talk to each other.\n\n\nConfiguring Google Apps with Google dashboard:\n\n\n\n\nLogin to dashboard.\n\n\n\n\n\n\n\n\n\n\nClick \"Security\" tab.\n\n\n\n\n\n\nA new page will appear from where you need to select \nSet up single sign-on(SSO)\n\n\n\n\n\n\n\n\n\n\nThe final Single Sign-On setting page will appear. \n\n\n\n\n\n\n\n\n\n\nEnable\n \nSetup SSO with third party Identity Provider\n, this case your Gluu Server. \n\n\n\n\n\n\nSign-in Page URL: https://idp_hostname/profile/SAML2/Redirect/SSO\n\n\n\n\n\n\nSign-out Page URL: https://idp_hostname/idp/logout.jsp\n\n\n\n\n\n\nChange Password URL: Organization should provide this link if they have any link for end users.\n\n\n\n\n\n\nVerification certificate: Upload the  SAML certificate of your Gluu Server\n\n\n\n\nHow to get the SAML cert of your Gluu Server? \nHere\n it is. \n\n\n\n\n\n\n\n\nEnable\n \nUse a domain specific issuer\n\n\n\n\n\n\nSave it\n\n\n\n\n\n\nIf you want to know more about Google SSO. \nThis\n might help you. \n\n\nConfiguration in Gluu Server:\n\n\nNow we need to create a Trust Relationship in Gluu Server as IDP can start its\nSAML transaction with SP ( in this case: Google Apps ). \n\n\nIn order to create a Trust Relationship, we need to grab the metadata of Google\nApps. This metadata can be collected from Google. It's generally specific to\norganization account. \n\n\nGot the metadata? Great, we are ready to move forward. \n\n\n\n\n\n\nCreate Trust Relationship for Google Apps: \n\n\n\n\n\n\nHow to create a trust relationship can be found \nhere\n. We need to follow the \"File\" method for Google Apps trust relationship.\n\n\n\n\nRequired attributes: Generally a nameID attributes is required. Please talk to us to generate this nameID in your Gluu Server. \n\n\nRelying Party Configuration: Yes, SAML2SSO should be configured. \n\n\nincludeAttributeStatement: check\n\n\nassertionLifetime: default \n\n\nassertionProxyCount: default\n\n\nsignResponses: conditional\n\n\nsignAssertions: never\n\n\nsignRequests: conditional\n\n\nencryptAssertions: never\n\n\nencryptNameIds: never", 
            "title": "SAML SSO with Google"
        }, 
        {
            "location": "/articles/google-saml/#using-saml-to-get-sso-with-google-apps", 
            "text": "Google Apps will work as Service Provide ( SP ) and we need to \"introduce\" Gluu Server with Google Apps as Gluu Server can work as Identity Provider ( IDP ).  NOTE: It is highly recommended to use Google staging apps setup before Google\nproduction migration. If you have any question or confusion, please feel free to\nlet us know.  We need to configure both parties ( Google Apps and Gluu Server ) as they can talk to each other.", 
            "title": "Using SAML to get SSO with Google Apps"
        }, 
        {
            "location": "/articles/google-saml/#configuring-google-apps-with-google-dashboard", 
            "text": "Login to dashboard.      Click \"Security\" tab.    A new page will appear from where you need to select  Set up single sign-on(SSO)      The final Single Sign-On setting page will appear.       Enable   Setup SSO with third party Identity Provider , this case your Gluu Server.     Sign-in Page URL: https://idp_hostname/profile/SAML2/Redirect/SSO    Sign-out Page URL: https://idp_hostname/idp/logout.jsp    Change Password URL: Organization should provide this link if they have any link for end users.    Verification certificate: Upload the  SAML certificate of your Gluu Server   How to get the SAML cert of your Gluu Server?  Here  it is.      Enable   Use a domain specific issuer    Save it    If you want to know more about Google SSO.  This  might help you.", 
            "title": "Configuring Google Apps with Google dashboard:"
        }, 
        {
            "location": "/articles/google-saml/#configuration-in-gluu-server", 
            "text": "Now we need to create a Trust Relationship in Gluu Server as IDP can start its\nSAML transaction with SP ( in this case: Google Apps ).   In order to create a Trust Relationship, we need to grab the metadata of Google\nApps. This metadata can be collected from Google. It's generally specific to\norganization account.   Got the metadata? Great, we are ready to move forward.     Create Trust Relationship for Google Apps:     How to create a trust relationship can be found  here . We need to follow the \"File\" method for Google Apps trust relationship.   Required attributes: Generally a nameID attributes is required. Please talk to us to generate this nameID in your Gluu Server.   Relying Party Configuration: Yes, SAML2SSO should be configured.   includeAttributeStatement: check  assertionLifetime: default   assertionProxyCount: default  signResponses: conditional  signAssertions: never  signRequests: conditional  encryptAssertions: never  encryptNameIds: never", 
            "title": "Configuration in Gluu Server:"
        }, 
        {
            "location": "/articles/salesforce-sso/", 
            "text": "SAML integration of Salesforce.com with Gluu Server\n\n\nBy default Salesforce suggest deployers to implement IDP-initiated SSO.\nThe initialization of IDP-initiated SSO is little complex as it require a big hostname\nwhich includes IDP's SSO link as well as SP's login url. So we prefer\nSP-initiated SSO and here in this documentation we are presenting a very simple\nSP-initiated SSO steps with Salesforce and Gluu Server. You can still go for IDP-initiated SSO if you prefer, documentation is available in Salesforce.com site. \n\n\nPrepare Salesforce.com\n\n\n\n\nLog into Salesforce.com with your administrative account. \n\n\nClick on \nSetup\n [ right upper corner ] \n\n\nYou need to add a custom Domain name for your salesforce site if you don't have any yet. \n\n\nGo to \nDomain Management\n \u2013\n \nMy Domain\n \n\n\nAdd your custom domain \n\n\n\n\nWait for some time. Salesforce will register this domain name for you. As for example we got something like 'testgluu-dev-ed.my.salesforce.com' for our testing. \n  \n \n\n\n\n\n\n\nRegister your 'Gluu Server' information here in Salesforce\n\n\n\n\nGo to \nSecurity Controls\n \u2013\n \nSingle Sign On Settings\n \n\n\nClick \nNew\n \n  \n\n\nNow you need to add your Gluu Server's information here\n\n\nName\n: Anything, whichever is easier for you to recognize this setup. i.e. 'Gluu Server'\n\n\nAPI Name\n: Gluu Server. \n\n\nIssuer\n: EntityID of your Gluu Server. i.e. https://test.gluu.org/idp/shibboleth \n\n\nEntityID\n: Your Salesforce custom domain name. i.e. https://testgluu-dev-ed.my.salesforce.com\n\n\nIdentity Provider Certificate\n: Grab your Gluu Server's SAML certificate. SAML certificate can be grabbed from your Gluu Sever's \nmetadata\n. Save the certificate and upload it. \n\n\nRequest Signing Certificate\n: Default Certificate\n\n\nRequest Signature Method\n: RSA-SHA1\n\n\nAssertion Decryption Certificate\n: Assertion not encrypted. \n\n\nSAML Identity Type\n: Assertion contains User's salesforce.com username\n\n\nSAML Identity Location\n: Identity is in an Attribute element\n\n\nAttribute Name\n: Provide 'SAML2 URI' of your attribute. For our test case we are using Gluu Server's Email attribute. How to check the information of your attribute is available \nhere\n.\n\n\nNameID Format\n: Keep it blank\n\n\nIdentity Provider Login URL\n: https://test.gluu.org/idp/profile/SAML2/Redirect/SSO\n\n\nService Provider Initiated Request Binding\n: HTTP-Redirect\n\n\nHere is how our final setup looks like: \n \n\n\n\n\n\n\n\n\nPrepare Gluu Server\n\n\n\n\nHow to create SAML trust relationship is available \nhere\n. \n\n\nGrab Salesforce metadata from Salesforce site. There is an option named 'Download Metadata' there. \n\n\nModify Salesforce metadata a bit: \n\n\nRemove \nAuthnRequestsSigned=\u201ctrue\u201d\n from metadata. \n\n\nSave metadata\n\n\n\n\n\n\nCreate Trust Relationship: \n\n\nDisplay Name\n: Anything, whichever is easier for you to recognize this trust relationship. \n\n\nDescription\n: Anything, whichever is easier for you to recognize this trust relationship\n\n\nMetadata Type\n: 'File' \n\n\nUpload salesforce's metadata ( your modified one )\n\n\nReleases attributes: TransientID and Email\n\n\n'Add' this trust\n\n\nConfigure Specific Relying: It can be done from Gluu Server's GUI ( named: oxTrust )\n\n\nSelect 'SAML2SSO'\n\n\nincludeAttributeStatement: Enabled\n\n\nassertionLifetime: keep the default one\n\n\nassertionProxyCount: keep the default one\n\n\nsignResponses: conditional\n\n\nsignAssertions: never\n\n\nsignRequests: conditional\n\n\nencryptAssertions: never\n\n\nencryptNameIds: never\n\n\nSave it\n\n\n\n\n\n\n\n\n\n\n'Update' the trust relationship\n\n\nHere is how it looks like for our test setup: \n  \n\n\n\n\nTest SSO\n\n\n\n\nGo back to Salesforce.com setup\n\n\nSecurity Controls \u2013\n Single Sign On Settings\n\n\nEnable 'Federated Single Sign-On Using SAML' \n\n\nGo to 'Domain Management'\n\n\nConfigure 'Authentication Configuration'\n\n\nSelect 'Gluu Server' \n\n\nSave it\n\n\nHere is how 'Authentication Configuration' looks like: \n\n\n\nThis is SP-initiate SSO. So hit your Salesforce website link to initiate the SSO. \n\n\nHere\n is video link of this SSO.", 
            "title": "SAML SSO with Salesforce"
        }, 
        {
            "location": "/articles/salesforce-sso/#saml-integration-of-salesforcecom-with-gluu-server", 
            "text": "By default Salesforce suggest deployers to implement IDP-initiated SSO.\nThe initialization of IDP-initiated SSO is little complex as it require a big hostname\nwhich includes IDP's SSO link as well as SP's login url. So we prefer\nSP-initiated SSO and here in this documentation we are presenting a very simple\nSP-initiated SSO steps with Salesforce and Gluu Server. You can still go for IDP-initiated SSO if you prefer, documentation is available in Salesforce.com site.", 
            "title": "SAML integration of Salesforce.com with Gluu Server"
        }, 
        {
            "location": "/articles/salesforce-sso/#prepare-salesforcecom", 
            "text": "Log into Salesforce.com with your administrative account.   Click on  Setup  [ right upper corner ]   You need to add a custom Domain name for your salesforce site if you don't have any yet.   Go to  Domain Management  \u2013   My Domain    Add your custom domain    Wait for some time. Salesforce will register this domain name for you. As for example we got something like 'testgluu-dev-ed.my.salesforce.com' for our testing. \n        Register your 'Gluu Server' information here in Salesforce   Go to  Security Controls  \u2013   Single Sign On Settings    Click  New  \n    Now you need to add your Gluu Server's information here  Name : Anything, whichever is easier for you to recognize this setup. i.e. 'Gluu Server'  API Name : Gluu Server.   Issuer : EntityID of your Gluu Server. i.e. https://test.gluu.org/idp/shibboleth   EntityID : Your Salesforce custom domain name. i.e. https://testgluu-dev-ed.my.salesforce.com  Identity Provider Certificate : Grab your Gluu Server's SAML certificate. SAML certificate can be grabbed from your Gluu Sever's  metadata . Save the certificate and upload it.   Request Signing Certificate : Default Certificate  Request Signature Method : RSA-SHA1  Assertion Decryption Certificate : Assertion not encrypted.   SAML Identity Type : Assertion contains User's salesforce.com username  SAML Identity Location : Identity is in an Attribute element  Attribute Name : Provide 'SAML2 URI' of your attribute. For our test case we are using Gluu Server's Email attribute. How to check the information of your attribute is available  here .  NameID Format : Keep it blank  Identity Provider Login URL : https://test.gluu.org/idp/profile/SAML2/Redirect/SSO  Service Provider Initiated Request Binding : HTTP-Redirect  Here is how our final setup looks like:", 
            "title": "Prepare Salesforce.com"
        }, 
        {
            "location": "/articles/salesforce-sso/#prepare-gluu-server", 
            "text": "How to create SAML trust relationship is available  here .   Grab Salesforce metadata from Salesforce site. There is an option named 'Download Metadata' there.   Modify Salesforce metadata a bit:   Remove  AuthnRequestsSigned=\u201ctrue\u201d  from metadata.   Save metadata    Create Trust Relationship:   Display Name : Anything, whichever is easier for you to recognize this trust relationship.   Description : Anything, whichever is easier for you to recognize this trust relationship  Metadata Type : 'File'   Upload salesforce's metadata ( your modified one )  Releases attributes: TransientID and Email  'Add' this trust  Configure Specific Relying: It can be done from Gluu Server's GUI ( named: oxTrust )  Select 'SAML2SSO'  includeAttributeStatement: Enabled  assertionLifetime: keep the default one  assertionProxyCount: keep the default one  signResponses: conditional  signAssertions: never  signRequests: conditional  encryptAssertions: never  encryptNameIds: never  Save it      'Update' the trust relationship  Here is how it looks like for our test setup:", 
            "title": "Prepare Gluu Server"
        }, 
        {
            "location": "/articles/salesforce-sso/#test-sso", 
            "text": "Go back to Salesforce.com setup  Security Controls \u2013  Single Sign On Settings  Enable 'Federated Single Sign-On Using SAML'   Go to 'Domain Management'  Configure 'Authentication Configuration'  Select 'Gluu Server'   Save it  Here is how 'Authentication Configuration' looks like:   This is SP-initiate SSO. So hit your Salesforce website link to initiate the SSO.   Here  is video link of this SSO.", 
            "title": "Test SSO"
        }, 
        {
            "location": "/articles/hobsons-saml/", 
            "text": "SAML Trust Relationship with Hobsons Education Solutions Co\n\n\nThis guide has been prepared to connect the Hobsons Service Provider (SP) with the Gluu Server for SP-inititated SSO.\nThe connection is extablished through the creation of a Trust Relationship using the Gluu Server UI, oxTrust.\n\n\nCreating Hobsons Trust Relationship\n\n\n\n\n\n\nLog in to your Gluu Server using admin credentials.\n\n\n\n\n\n\nClick on the SAML tab and select Trust Relationships. Then click on the Add Relationship button.\n\n\n\n\n\n\n\n\n\n\nThe add relationship button will open the following page, the trust relationship can be created easily using the following form.\n\n\n\n\n\n\n1. Display Name: This field contains the display name of the trust relationship. We have used \u201cTest Hobsons-Radius TR\u201d as an example.\n\n2. Description: A small description of Hobsons can be input here.\n\n3. Metadata Type: Please select URI from the dropdown menu.\n\n4. SP Metadata URL: The metadata URL provided by Hobsons goes in this field.\n\n5. SP Logout URL: This should be ideally supplied by the Hobsons staff; if you have not received any logout URL, then leave it blank.\n\n4. Released: The necessary attributes, Transientid and the eduPersonPrincipalName, were selected from the attribute list.\n\n\n\n\n\n5. Finally click on \"Add\" to finish creating the trust relationship.\n\n\n\nConfiguring Hobsons Trust Relationship\n\n\nPlease ensure that the new trust relationship status is \"active\", else click on the trust relationship and activate it before configuring it.\n\n\n\n\nThe configuration screen can be accessed by clicking on the Hobsons Trust Relationship.\n\n\n\n\n\n\nConfigure Metadata Filters: Do not make any changes.\n\n\n\n\n\n\nConfigure specific Relying Pary: Check this option and a link \"Configure Relying Party\" will appear.\n\n\n\n\n\n\nConfigure Relying Party: Click the link and a new window shall appear.\n\n\n\n\n\n\nSelect SAML2SSO from the list and click the \"Add\" button.\n\n\n\n\n\n\nSet \"signResponses\", \"signAssertions\", \"signRequests\" and \"encryptAssertions\" to Conditional from the drop-down menu.\n\n\n\n\n\n\nSet \"encryptNameIds\" to Never from the drop-down menu and click \"Save\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick \"Update\" to finish the Trust Relationship.", 
            "title": "SAML SSO with Hobsons"
        }, 
        {
            "location": "/articles/hobsons-saml/#saml-trust-relationship-with-hobsons-education-solutions-co", 
            "text": "This guide has been prepared to connect the Hobsons Service Provider (SP) with the Gluu Server for SP-inititated SSO.\nThe connection is extablished through the creation of a Trust Relationship using the Gluu Server UI, oxTrust.", 
            "title": "SAML Trust Relationship with Hobsons Education Solutions Co"
        }, 
        {
            "location": "/articles/hobsons-saml/#creating-hobsons-trust-relationship", 
            "text": "Log in to your Gluu Server using admin credentials.    Click on the SAML tab and select Trust Relationships. Then click on the Add Relationship button.      The add relationship button will open the following page, the trust relationship can be created easily using the following form.    1. Display Name: This field contains the display name of the trust relationship. We have used \u201cTest Hobsons-Radius TR\u201d as an example.\n\n2. Description: A small description of Hobsons can be input here.\n\n3. Metadata Type: Please select URI from the dropdown menu.\n\n4. SP Metadata URL: The metadata URL provided by Hobsons goes in this field.\n\n5. SP Logout URL: This should be ideally supplied by the Hobsons staff; if you have not received any logout URL, then leave it blank.\n\n4. Released: The necessary attributes, Transientid and the eduPersonPrincipalName, were selected from the attribute list.   5. Finally click on \"Add\" to finish creating the trust relationship.", 
            "title": "Creating Hobsons Trust Relationship"
        }, 
        {
            "location": "/articles/hobsons-saml/#configuring-hobsons-trust-relationship", 
            "text": "Please ensure that the new trust relationship status is \"active\", else click on the trust relationship and activate it before configuring it.   The configuration screen can be accessed by clicking on the Hobsons Trust Relationship.    Configure Metadata Filters: Do not make any changes.    Configure specific Relying Pary: Check this option and a link \"Configure Relying Party\" will appear.    Configure Relying Party: Click the link and a new window shall appear.    Select SAML2SSO from the list and click the \"Add\" button.    Set \"signResponses\", \"signAssertions\", \"signRequests\" and \"encryptAssertions\" to Conditional from the drop-down menu.    Set \"encryptNameIds\" to Never from the drop-down menu and click \"Save\".        Click \"Update\" to finish the Trust Relationship.", 
            "title": "Configuring Hobsons Trust Relationship"
        }, 
        {
            "location": "/articles/iis-saml/", 
            "text": "IIS SAML Configuration\n\n\nIIS Configuration in Windows 7\n\n\n\n\n\n\nStart --\n Control Panel --\n Programs --\n \"Turn Windows features on or off\"\n\n\n\n\n\n\nSelect (i) IIS (ii) Web Management Tools (iii) II6 Management Compatiability (iv) IIS Management Console (v) IIS Management Scripts and Tools (vi) IIS Management Service\n\n\n\n\n\n\nSelect (i) World Wide Web Services (ii) CGI (iii) ISAPI Filters (iv) ISAPI Extensions --\n Press OK.\n\n\n\n\n\n\n\nTest IIS to see if it is installed in your system with \"127.0.0.1\" in the web browser. For our test case, we used IIS7.\n\n\n\n\n\n\n\nISAPI Filter Configuration\n\n\n\n\n\n\nOpen IIS Manager (Start --\n Administrative Tools --\n Internet Information Service/IIS Manager)\n\n\n\n\n\n\nDouble click on \"ISAPI and CGI Restrictions\"\n\n\n\n\n\n\n\nAdd a new Filter\n\n\n\n\n\n\na. Click Actions --\n Add (upper right corner)\n\n\nb. Select \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"\n\n\nc. Description: \"Shibboleth\"\n\n\nd. Click \"Allow\" (from the right hand side)\n\n\n\n\ne. Back to IIS Manager --\n ISAPI Filters\n\n\n\n\n    1. Click \"Add\" (upper right corner)\n\n    2. Filter Name: Shibboleth\n\n    3. Executable: \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"\n\n\n\n\n\nf. SSO file extension mapping\n\n\n    1. Click on \"Handler Mapping\" from main page\n\n\n\n\n\n    2. Click \"Add Script Map\" from Action\n\n\n\n\n\n    3. Request Path :\".sso\"\n\n    4. Executable should be pointed to \"isapi_shib.dll\"\n\n\n\n\n\ng. Restart IIS\n\n\nh. Check Status\n\n\nCheck Status by typing in \"http://127.0.0.1/Shibboleth.sso/Status\" in the web browser. If it displays an XML document, then the Shibboleth SP Installation in Windows IIS7 in complete.\n\n\n\nShibboleth SP Setup in Windows 2008 R2 with IIS7\n\n\n\n\nOpen up \"Server Manager\", scroll down and click on \"Add Roles\".\n\n\n\n\n\n\n\n\nHit \"Next\"\n\n\n\n\n\n\n\n\nSelect \"Web Server (IIS)\", hit \"Next\"\n\n\n\n\n\n\n\n\nSelect (i) CGI\n\n\n\n\n(ii) ISAPI Extensions\n\n\n(iii) ISAPI Filters\n\n\n(iv) Management Tools\n\n\n(a) IIS Management Console\n\n\n(b) IIS Management Scripts and Tools\n\n\n(c) Management Service\n\n\n(v) All IIS6 Management Compatibility\n\n\n\n\n\n\n\n\nHit \"Next\", for the confirmation, check the list of plugins.\n\n\n\n\n\n\n\n\n\n\nHit \"Install\" and Windows 2008 will complete the installation. A confirmation window shall appear which resembles the screenshot below.\n\n\n\n\n\n\n7.Test IIS7 setup from the Internet.\n\n\n\n\nShibboleth SP 2.5.x Setup\n\n\n\n\n\n\nDown the \nShibboleth SP 2.5.x\n\n\n\n\n\n\nStart the installation, keep the default path, Select \"Install ISAPI modules into IIS\", IIS Script Extension must be \".sso\" and Hit \"Next\".\n\n\n\n\n\n\n\n\n\n\nAfter the completion of the installation, the system will ask to reboot the system; hit \"Yes\".\n\n\n\n\n\n\n\n\nTest the Shibboleth SP installation from the SP VM using the URL \"localhost/Shibboleth.sso/Status\" in the address bar of the Web Browser.\n\n\n\n\n\n\nTrust Relationship in IdP\n\n\n\n\nCreate a Trust Relationship for the new SP in the IdP. It is necessary to upload the Public Certificate of the new SP in teh IdP. Please note that the CN of the public certificate MUST BE the same as \nHostname\n of the SP. Hit \"Add\".\n\n\n\n\n\n\n\n\nDownload the IdP generated configuration files for Shib SP modification.\n\n\n\n\n\n\nSP Configuration\n\n\n\n\n\n\nThe files from the IdP must be placed in the SP Configuration.\n\n\n\n\n\n\nBefore placing them inside the SP Configuration please check\n\n\n\n\n\n\n(a) The \"spcert.crt\" file has the CN same as the SP hostname.\n\n\n(b) The \"spcert.crt\" and \"spkey.key\" has the same \nmd5sum\n value.\n\n\n(c) The IdP-metadata is perfectly placed inside the SP Configuration.\n\n\n(d) The downloaded \"shibboleth2.xml\" file has values resembling the file content below.\n\n\n\n\nFor testing purpose, we are going to protect a directory named \"secure\" with the IdP.  Create a folder/directory in the IIS Root Directory and restart Shibd and IIS.\n\n\n\n\n\n\nSSO Testing\n\n\n\n\n\n\nPlace the following URL in the web browser: \"https://SP_Name/secure\"\n\n\n\n\n\n\nIt will redirect the user to the IdP for authentication.\n\n\n\n\n\n\nAfter the authentication is complete, the user will be shown the protected page. For this case, the page is the IIS7 index page.\n\n\n      xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n      logger=\"syslog.logger\" clockSkew=\"180\">\n\n\n\n      \n\n      \n\n\n\n      \n\n        \n\n              \n\n        \n\n      \n\n\n\n      \n\n      \n\n\n\n      \n\n      \n\n      \n\n      \n\n\n\n      \n\n        \n\n                \n\n                \n\n                \n\n        \n\n      \n\n\n\n  \n\n\n!--\n    Controls session lifetimes, address checks, cookie handling, and the protocol handlers.\n    You MUST supply an effectively unique handlerURL value for each of your applications.\n    The value can be a relative path, a URL with no hostname (https:///path) or a full URL.\n    The system can compute a relative value based on the virtual host. Using handlerSSL=\"true\"\n    will force the protocol to be https. You should also add a cookieProps setting of \"; path=/; secure\"\n    in that case. Note that while we default checkAddress to \"false\", this has a negative\n    impact on the security of the SP. Stealing cookies/sessions is much easier with this disabled.\n    --\n\n\nSessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"false\"\n            handlerURL=\"https://SP_HOSTNAME/Shibboleth.sso\" handlerSSL=\"false\"\n            exportLocation=\"http://localhost/Shibboleth.sso/GetAssertion\" exportACL=\"127.0.0.1\"\n            idpHistory=\"false\" idpHistoryDays=\"7\" cookieProps=\"; path=/; secure; httpOnly\"\n\n\n    \n!--\n            SessionInitiators handle session requests and relay them to a Discovery page,\n            or to an IdP if possible. Automatic session setup will use the default or first\n            element (or requireSessionWith can specify a specific id to use).\n            --\n\n\n    \n!-- Default example directs to a specific IdPs SSO service (favoring SAML 2 over Shib 1). --\n\n            \nSessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"gluu\"\n                    relayState=\"cookie\" entityID=\"https://IDP_HOSTNAME/idp/shibboleth\"\n\n               \nSessionInitiator type=\"SAML2\" acsIndex=\"1\" template=\"bindingTemplate.html\"/\n\n               \nSessionInitiator type=\"Shib1\" acsIndex=\"5\"/\n\n            \n/SessionInitiator\n\n\n    \n!--\n            md:AssertionConsumerService locations handle specific SSO protocol bindings,\n            such as SAML 2.0 POST or SAML 1.1 Artifact. The isDefault and index attributes\n            are used when sessions are initiated to determine how to tell the IdP where and\n            how to return the response.\n            --\n\n    \nmd:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/\n\n            \nmd:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/\n\n            \nmd:AssertionConsumerService Location=\"/SAML2/Artifact\" index=\"3\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/\n\n            \nmd:AssertionConsumerService Location=\"/SAML2/ECP\" index=\"4\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:PAOS\"/\n\n            \nmd:AssertionConsumerService Location=\"/SAML/POST\" index=\"5\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:browser-post\"/\n\n            \nmd:AssertionConsumerService Location=\"/SAML/Artifact\" index=\"6\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:artifact-01\"/\n\n\n    \n!-- LogoutInitiators enable SP-initiated local or global/single logout of sessions. --\n\n            \nLogoutInitiator type=\"Chaining\" Location=\"/Logout\" relayState=\"cookie\"\n\n            \nLogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/\n\n            \nLogoutInitiator type=\"Local\"/\n\n            \n/LogoutInitiator\n\n\n    \n!-- md:SingleLogoutService locations handle single logout (SLO) protocol messages. --\n\n            \nmd:SingleLogoutService Location=\"/SLO/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/\n\n            \nmd:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/\n\n            \nmd:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/\n\n            \nmd:SingleLogoutService Location=\"/SLO/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/\n\n\n    \n!-- md:ManageNameIDService locations handle NameID management (NIM) protocol messages. --\n\n            \nmd:ManageNameIDService Location=\"/NIM/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/\n\n            \nmd:ManageNameIDService Location=\"/NIM/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/\n\n            \nmd:ManageNameIDService Location=\"/NIM/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/\n\n            \nmd:ManageNameIDService Location=\"/NIM/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/\n\n\n    \n!--\n            md:ArtifactResolutionService locations resolve artifacts issued when using the\n            SAML 2.0 HTTP-Artifact binding on outgoing messages, generally uses SOAP.\n            --\n\n            \nmd:ArtifactResolutionService Location=\"/Artifact/SOAP\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/\n\n\n    \n!-- Extension service that generates \"approximate\" metadata based on SP configuration. --\n\n            \nHandler type=\"MetadataGenerator\" Location=\"/Metadata\" signing=\"false\"/\n\n\n            \n!-- Status reporting service. --\n\n            \nHandler type=\"Status\" Location=\"/Status\" acl=\"127.0.0.1\"/\n\n\n            \n!-- Session diagnostic service. --\n\n            \nHandler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/\n\n\n\n/Sessions\n\n\n\n!--\n    Allows overriding of error template filenames. You can also add attributes with values\n    that can be plugged into the templates.\n    --\n\n    \nErrors supportContact=\"support@gluu.org\"\n            logoLocation=\"/shibboleth-sp/logo.jpg\"\n            styleSheet=\"/shibboleth-sp/main.css\"/\n\n\n\n!-- Uncomment and modify to tweak settings for specific IdPs or groups. --\n\n    \nRelyingParty Name=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\" keyName=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\"/\n\n\n\n!-- Chains together all your metadata sources. --\n\n    \nMetadataProvider type=\"Chaining\"\n\n    \nMetadataProvider type=\"XML\" file=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\idp-metadata.xml\"/\n\n    \n/MetadataProvider\n\n\n\n!-- Chain the two built-in trust engines together. --\n\n    \nTrustEngine type=\"Chaining\"\n\n            \nTrustEngine type=\"ExplicitKey\"/\n\n            \nTrustEngine type=\"PKIX\"/\n\n    \n/TrustEngine\n\n\n\n!-- Map to extract attributes from SAML assertions. --\n\n    \nAttributeExtractor type=\"XML\" validate=\"true\" path=\"attribute-map.xml\"/\n\n\n    \n!-- Use a SAML query if no attributes are supplied during SSO. --\n\n    \nAttributeResolver type=\"Query\" subjectMatch=\"true\"/\n\n\n    \n!-- Default filtering policy for recognized attributes, lets other data pass. --\n\n    \nAttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/\n\n\n\n!-- Simple file-based resolver for using a single keypair. --\n\n    \n!-- \nCredentialResolver type=\"File\" key=\"sp-key.pem\" certificate=\"sp-cert.pem\"/\n --\n\n\n    \n!-- TODO is password needed? --\n\n    \nCredentialResolver type=\"File\" key=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spkey.key\"\n                    certificate=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spcert.crt\" /\n\n\n\n/ApplicationDefaults\n\n\n\n!-- Each policy defines a set of rules to use to secure messages. --\n\n    \nSecurityPolicies\n\n    \n!--\n    The predefined policy enforces replay/freshness, standard\n    condition processing, and permits signing and client TLS.\n    --\n\n\nPolicy id=\"default\" validate=\"false\"\n\n            \nPolicyRule type=\"MessageFlow\" checkReplay=\"true\" expires=\"60\"/\n\n            \nPolicyRule type=\"Conditions\"\n\n                \nPolicyRule type=\"Audience\"/\n\n                \n!-- Enable Delegation rule to permit delegated access. --\n\n                \n!-- \nPolicyRule type=\"Delegation\"/\n --\n\n            \n/PolicyRule\n\n            \nPolicyRule type=\"ClientCertAuth\" errorFatal=\"true\"/\n\n            \nPolicyRule type=\"XMLSigning\" errorFatal=\"true\"/\n\n            \nPolicyRule type=\"SimpleSigning\" errorFatal=\"true\"/\n\n    \n/Policy\n\n    \n/SecurityPolicies", 
            "title": "IIS SAML Config"
        }, 
        {
            "location": "/articles/iis-saml/#iis-saml-configuration", 
            "text": "", 
            "title": "IIS SAML Configuration"
        }, 
        {
            "location": "/articles/iis-saml/#iis-configuration-in-windows-7", 
            "text": "Start --  Control Panel --  Programs --  \"Turn Windows features on or off\"    Select (i) IIS (ii) Web Management Tools (iii) II6 Management Compatiability (iv) IIS Management Console (v) IIS Management Scripts and Tools (vi) IIS Management Service    Select (i) World Wide Web Services (ii) CGI (iii) ISAPI Filters (iv) ISAPI Extensions --  Press OK.    Test IIS to see if it is installed in your system with \"127.0.0.1\" in the web browser. For our test case, we used IIS7.", 
            "title": "IIS Configuration in Windows 7"
        }, 
        {
            "location": "/articles/iis-saml/#isapi-filter-configuration", 
            "text": "Open IIS Manager (Start --  Administrative Tools --  Internet Information Service/IIS Manager)    Double click on \"ISAPI and CGI Restrictions\"    Add a new Filter    a. Click Actions --  Add (upper right corner)  b. Select \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"  c. Description: \"Shibboleth\"  d. Click \"Allow\" (from the right hand side)   e. Back to IIS Manager --  ISAPI Filters       1. Click \"Add\" (upper right corner)\n\n    2. Filter Name: Shibboleth\n\n    3. Executable: \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"   f. SSO file extension mapping      1. Click on \"Handler Mapping\" from main page       2. Click \"Add Script Map\" from Action       3. Request Path :\".sso\"\n\n    4. Executable should be pointed to \"isapi_shib.dll\"   g. Restart IIS  h. Check Status  Check Status by typing in \"http://127.0.0.1/Shibboleth.sso/Status\" in the web browser. If it displays an XML document, then the Shibboleth SP Installation in Windows IIS7 in complete.", 
            "title": "ISAPI Filter Configuration"
        }, 
        {
            "location": "/articles/iis-saml/#shibboleth-sp-setup-in-windows-2008-r2-with-iis7", 
            "text": "Open up \"Server Manager\", scroll down and click on \"Add Roles\".     Hit \"Next\"     Select \"Web Server (IIS)\", hit \"Next\"     Select (i) CGI   (ii) ISAPI Extensions  (iii) ISAPI Filters  (iv) Management Tools  (a) IIS Management Console  (b) IIS Management Scripts and Tools  (c) Management Service  (v) All IIS6 Management Compatibility     Hit \"Next\", for the confirmation, check the list of plugins.      Hit \"Install\" and Windows 2008 will complete the installation. A confirmation window shall appear which resembles the screenshot below.    7.Test IIS7 setup from the Internet.   Shibboleth SP 2.5.x Setup    Down the  Shibboleth SP 2.5.x    Start the installation, keep the default path, Select \"Install ISAPI modules into IIS\", IIS Script Extension must be \".sso\" and Hit \"Next\".      After the completion of the installation, the system will ask to reboot the system; hit \"Yes\".     Test the Shibboleth SP installation from the SP VM using the URL \"localhost/Shibboleth.sso/Status\" in the address bar of the Web Browser.    Trust Relationship in IdP   Create a Trust Relationship for the new SP in the IdP. It is necessary to upload the Public Certificate of the new SP in teh IdP. Please note that the CN of the public certificate MUST BE the same as  Hostname  of the SP. Hit \"Add\".     Download the IdP generated configuration files for Shib SP modification.    SP Configuration    The files from the IdP must be placed in the SP Configuration.    Before placing them inside the SP Configuration please check    (a) The \"spcert.crt\" file has the CN same as the SP hostname.  (b) The \"spcert.crt\" and \"spkey.key\" has the same  md5sum  value.  (c) The IdP-metadata is perfectly placed inside the SP Configuration.  (d) The downloaded \"shibboleth2.xml\" file has values resembling the file content below.   For testing purpose, we are going to protect a directory named \"secure\" with the IdP.  Create a folder/directory in the IIS Root Directory and restart Shibd and IIS.    SSO Testing    Place the following URL in the web browser: \"https://SP_Name/secure\"    It will redirect the user to the IdP for authentication.    After the authentication is complete, the user will be shown the protected page. For this case, the page is the IIS7 index page.        xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n      logger=\"syslog.logger\" clockSkew=\"180\">  \n       \n        \n       \n         \n               \n         \n        \n       \n        \n       \n       \n       \n        \n       \n         \n                 \n                 \n                 \n         \n        \n    !--\n    Controls session lifetimes, address checks, cookie handling, and the protocol handlers.\n    You MUST supply an effectively unique handlerURL value for each of your applications.\n    The value can be a relative path, a URL with no hostname (https:///path) or a full URL.\n    The system can compute a relative value based on the virtual host. Using handlerSSL=\"true\"\n    will force the protocol to be https. You should also add a cookieProps setting of \"; path=/; secure\"\n    in that case. Note that while we default checkAddress to \"false\", this has a negative\n    impact on the security of the SP. Stealing cookies/sessions is much easier with this disabled.\n    --  Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"false\"\n            handlerURL=\"https://SP_HOSTNAME/Shibboleth.sso\" handlerSSL=\"false\"\n            exportLocation=\"http://localhost/Shibboleth.sso/GetAssertion\" exportACL=\"127.0.0.1\"\n            idpHistory=\"false\" idpHistoryDays=\"7\" cookieProps=\"; path=/; secure; httpOnly\" \n\n     !--\n            SessionInitiators handle session requests and relay them to a Discovery page,\n            or to an IdP if possible. Automatic session setup will use the default or first\n            element (or requireSessionWith can specify a specific id to use).\n            -- \n\n     !-- Default example directs to a specific IdPs SSO service (favoring SAML 2 over Shib 1). -- \n             SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"gluu\"\n                    relayState=\"cookie\" entityID=\"https://IDP_HOSTNAME/idp/shibboleth\" \n                SessionInitiator type=\"SAML2\" acsIndex=\"1\" template=\"bindingTemplate.html\"/ \n                SessionInitiator type=\"Shib1\" acsIndex=\"5\"/ \n             /SessionInitiator \n\n     !--\n            md:AssertionConsumerService locations handle specific SSO protocol bindings,\n            such as SAML 2.0 POST or SAML 1.1 Artifact. The isDefault and index attributes\n            are used when sessions are initiated to determine how to tell the IdP where and\n            how to return the response.\n            -- \n     md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/ \n             md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/ \n             md:AssertionConsumerService Location=\"/SAML2/Artifact\" index=\"3\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/ \n             md:AssertionConsumerService Location=\"/SAML2/ECP\" index=\"4\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:PAOS\"/ \n             md:AssertionConsumerService Location=\"/SAML/POST\" index=\"5\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:browser-post\"/ \n             md:AssertionConsumerService Location=\"/SAML/Artifact\" index=\"6\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:artifact-01\"/ \n\n     !-- LogoutInitiators enable SP-initiated local or global/single logout of sessions. -- \n             LogoutInitiator type=\"Chaining\" Location=\"/Logout\" relayState=\"cookie\" \n             LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/ \n             LogoutInitiator type=\"Local\"/ \n             /LogoutInitiator \n\n     !-- md:SingleLogoutService locations handle single logout (SLO) protocol messages. -- \n             md:SingleLogoutService Location=\"/SLO/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/ \n             md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/ \n             md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/ \n             md:SingleLogoutService Location=\"/SLO/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/ \n\n     !-- md:ManageNameIDService locations handle NameID management (NIM) protocol messages. -- \n             md:ManageNameIDService Location=\"/NIM/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/ \n             md:ManageNameIDService Location=\"/NIM/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/ \n             md:ManageNameIDService Location=\"/NIM/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/ \n             md:ManageNameIDService Location=\"/NIM/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/ \n\n     !--\n            md:ArtifactResolutionService locations resolve artifacts issued when using the\n            SAML 2.0 HTTP-Artifact binding on outgoing messages, generally uses SOAP.\n            -- \n             md:ArtifactResolutionService Location=\"/Artifact/SOAP\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/ \n\n     !-- Extension service that generates \"approximate\" metadata based on SP configuration. -- \n             Handler type=\"MetadataGenerator\" Location=\"/Metadata\" signing=\"false\"/ \n\n             !-- Status reporting service. -- \n             Handler type=\"Status\" Location=\"/Status\" acl=\"127.0.0.1\"/ \n\n             !-- Session diagnostic service. -- \n             Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/  /Sessions  !--\n    Allows overriding of error template filenames. You can also add attributes with values\n    that can be plugged into the templates.\n    -- \n     Errors supportContact=\"support@gluu.org\"\n            logoLocation=\"/shibboleth-sp/logo.jpg\"\n            styleSheet=\"/shibboleth-sp/main.css\"/  !-- Uncomment and modify to tweak settings for specific IdPs or groups. -- \n     RelyingParty Name=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\" keyName=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\"/  !-- Chains together all your metadata sources. -- \n     MetadataProvider type=\"Chaining\" \n     MetadataProvider type=\"XML\" file=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\idp-metadata.xml\"/ \n     /MetadataProvider  !-- Chain the two built-in trust engines together. -- \n     TrustEngine type=\"Chaining\" \n             TrustEngine type=\"ExplicitKey\"/ \n             TrustEngine type=\"PKIX\"/ \n     /TrustEngine  !-- Map to extract attributes from SAML assertions. -- \n     AttributeExtractor type=\"XML\" validate=\"true\" path=\"attribute-map.xml\"/ \n\n     !-- Use a SAML query if no attributes are supplied during SSO. -- \n     AttributeResolver type=\"Query\" subjectMatch=\"true\"/ \n\n     !-- Default filtering policy for recognized attributes, lets other data pass. -- \n     AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/  !-- Simple file-based resolver for using a single keypair. -- \n     !--  CredentialResolver type=\"File\" key=\"sp-key.pem\" certificate=\"sp-cert.pem\"/  -- \n\n     !-- TODO is password needed? -- \n     CredentialResolver type=\"File\" key=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spkey.key\"\n                    certificate=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spcert.crt\" /  /ApplicationDefaults  !-- Each policy defines a set of rules to use to secure messages. -- \n     SecurityPolicies \n     !--\n    The predefined policy enforces replay/freshness, standard\n    condition processing, and permits signing and client TLS.\n    --  Policy id=\"default\" validate=\"false\" \n             PolicyRule type=\"MessageFlow\" checkReplay=\"true\" expires=\"60\"/ \n             PolicyRule type=\"Conditions\" \n                 PolicyRule type=\"Audience\"/ \n                 !-- Enable Delegation rule to permit delegated access. -- \n                 !--  PolicyRule type=\"Delegation\"/  -- \n             /PolicyRule \n             PolicyRule type=\"ClientCertAuth\" errorFatal=\"true\"/ \n             PolicyRule type=\"XMLSigning\" errorFatal=\"true\"/ \n             PolicyRule type=\"SimpleSigning\" errorFatal=\"true\"/ \n     /Policy \n     /SecurityPolicies", 
            "title": "Shibboleth SP Setup in Windows 2008 R2 with IIS7"
        }, 
        {
            "location": "/articles/benchmarking/", 
            "text": "Gluu Server Benchmark\n\n\nPerformance Tuning\n\n\nGluu Server has stateless architecture, it scales quite easy. However to get high-performant server it must be tuned accordingly.\n\n\nTuning consists of:\n\n\n\n\nLDAP Server (OpenDJ, OpenLDAP)\n\n\nWeb Application Container (Tomcat, Jetty, JBoss)\n\n\nGluu Server configuration Tuning\n\n\n\n\nLDAP Server\n\n\n(For convenience all samples sticks to OpenDJ however general recommendations are the same for other LDAP Servers)\n\n\n\n\nMaximum allowed connections\n\n\n\n\nIf there is not enough connections to serve the client, connection is put \"on hold\" and waits. To avoid delays it's recommended to provide expected maximum allowed connections.\n\n\n max-allowed-client-connections=1000\n\n\n\n\n\n\nProvide enough resources to LDAP Server\n\n\n\n\nFor example OpenDJ use JVM for running, for high performance it's recommended to give enough memory via JVM system properties.\n\n\n\n\nAllow LDAP Server use cache as much as possible.\n\n\n\n\n    dsconfig -n set-backed-prop --backend-name userRoot --set db-cache-percent:50\n\n\n\n\nTomcat\n\n\n\n\nSet maxmimum for parallel requests.\n\n\n\n\nConnector parameters in server.xml:\n\n\n\n\nmaxThreads=\"10000\"\n\n\n\n\nmaxConnections=\"10000\"\n\n\n\n\n\n\nSet memory settings via JAVA_OPTS\n\n\n\n\n\n\nset \"JAVA_OPTS=-Xms1456m -Xmx7512m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\"\n\n\n\n\nOperating time\n\n\n\n\nCheck via Tomcat monitor whether requests are handled or just \"hangs\" because there no enough resources\n\n\nHere is sample when processing time increase due to lack of resources:\n\n\n\n\nGluu Server\n\n\n\n\n\n\noxauth-ldap.properties - Increase ldap connection pool size\n\n\nmaxconnections: 1000\n\n\n\n\n\n\nGluu Server Benchmark\n\n\nBenchmarking based on Authentication Implicit Flow: http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth\n\n\nMeasures were made on single machine with Gluu Server, LDAP Server and test runner (clients). Therefore here is quite \nsubjective\n results\n\n\n\n  \n\n    \nInvocations \n\n    \nParallel threads \n\n    \nTime\n\n    \nComments\n\n  \n\n  \n\n    \n100\n\n    \n100\n\n    \n8 seconds \n\n    \n\n  \n\n  \n\n    \n1000\n\n    \n100\n\n    \n-\n\n    \n\n  \n\n  \n\n    \n1000\n\n    \n200\n\n    \n-\n\n    \nNot representable: CPU 100%\n\n  \n\n  \n\n    \n2000\n\n    \n100\n\n    \n-\n\n    \nNot representable: CPU 100%\n\n  \n\n  \n\n    \n2000\n\n    \n200\n\n    \n-\n\n    \nNot representable: CPU 100%\n\n  \n\n  \n\n    \n10000\n\n    \n300\n\n    \n-\n\n    \nNot representable: CPU 100%\n\n  \n\n  \n\n    \n1000000\n\n    \n300\n\n    \n-\n\n    \nNot representable: CPU 100%\n\n  \n\n\n\n\n\nUseful Links\n\n\n\n\nOpenDJ Performance Tuning\n\n\nOpenDJ Global configuration", 
            "title": "Benchmarking"
        }, 
        {
            "location": "/articles/benchmarking/#gluu-server-benchmark", 
            "text": "", 
            "title": "Gluu Server Benchmark"
        }, 
        {
            "location": "/articles/benchmarking/#performance-tuning", 
            "text": "Gluu Server has stateless architecture, it scales quite easy. However to get high-performant server it must be tuned accordingly.  Tuning consists of:   LDAP Server (OpenDJ, OpenLDAP)  Web Application Container (Tomcat, Jetty, JBoss)  Gluu Server configuration Tuning   LDAP Server  (For convenience all samples sticks to OpenDJ however general recommendations are the same for other LDAP Servers)   Maximum allowed connections   If there is not enough connections to serve the client, connection is put \"on hold\" and waits. To avoid delays it's recommended to provide expected maximum allowed connections.   max-allowed-client-connections=1000   Provide enough resources to LDAP Server   For example OpenDJ use JVM for running, for high performance it's recommended to give enough memory via JVM system properties.   Allow LDAP Server use cache as much as possible.       dsconfig -n set-backed-prop --backend-name userRoot --set db-cache-percent:50  Tomcat   Set maxmimum for parallel requests.   Connector parameters in server.xml:   maxThreads=\"10000\"   maxConnections=\"10000\"    Set memory settings via JAVA_OPTS    set \"JAVA_OPTS=-Xms1456m -Xmx7512m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\"   Operating time   Check via Tomcat monitor whether requests are handled or just \"hangs\" because there no enough resources  Here is sample when processing time increase due to lack of resources:", 
            "title": "Performance Tuning"
        }, 
        {
            "location": "/articles/benchmarking/#gluu-server", 
            "text": "oxauth-ldap.properties - Increase ldap connection pool size  maxconnections: 1000", 
            "title": "Gluu Server"
        }, 
        {
            "location": "/articles/benchmarking/#gluu-server-benchmark_1", 
            "text": "Benchmarking based on Authentication Implicit Flow: http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth  Measures were made on single machine with Gluu Server, LDAP Server and test runner (clients). Therefore here is quite  subjective  results  \n   \n     Invocations  \n     Parallel threads  \n     Time \n     Comments \n   \n   \n     100 \n     100 \n     8 seconds  \n     \n   \n   \n     1000 \n     100 \n     - \n     \n   \n   \n     1000 \n     200 \n     - \n     Not representable: CPU 100% \n   \n   \n     2000 \n     100 \n     - \n     Not representable: CPU 100% \n   \n   \n     2000 \n     200 \n     - \n     Not representable: CPU 100% \n   \n   \n     10000 \n     300 \n     - \n     Not representable: CPU 100% \n   \n   \n     1000000 \n     300 \n     - \n     Not representable: CPU 100%", 
            "title": "Gluu Server Benchmark"
        }, 
        {
            "location": "/articles/benchmarking/#useful-links", 
            "text": "OpenDJ Performance Tuning  OpenDJ Global configuration", 
            "title": "Useful Links"
        }, 
        {
            "location": "/articles/custom-attributes/", 
            "text": "Custom Attributes\n\n\nLDAP attributes, SAML attributes, OpenID Connect user claims--whatever you call\nthem--many organizations have business-specific information about people that needs\nto be shared with applications. For simplicity, this article will refer to them as\n\"attributes.\" Existing standard schemas like the LDAP \ninetOrgPerson\n standard, or\nthe OpenID Connect \nid_token\n user claims define attributes like first name, last\nname and email address. Where possible, we recommend you use these. But what if\nthere is an attribute that is just not in any standard schema? This article will\nexplain what you need to do to configure the Gluu Server to support your new\nattributes, and give you some advice along the way with regard to best practices.\nWe'll use fictional Company Acme Inc., which has requirements\nfor \"acmeCustNumber\" and \"acmeStateLicenseNumber\"\n\n\nLDAP Schema\n\n\nThe first step is to make sure that your LDAP server can persist these attributes.\nEach LDAP server implementation manages schema in its own way. The most common\nLDAP server backend for the Gluu Server is OpenDJ, so this article will use this\nplatform as an example. This schema should also work for 389DS. If you are using\nOpenLDAP or another platform, just refer to the respective documentation.\n\n\nIn LDAP, \"schema\" refers to the \nattribute\n and \nobjectclass\n definitions.\nIn OpenDJ, schema is stored in \n{opendj-home}/config/schema\n. If your company has\ncustom schema, it may be simpler to make a separate file that contains your\ndefinitions (rather than using the built-in attribute management features, which\nwould store the schema in a default file, \n100-user.ldif\n in OpenDJ. Don't stress\nabout the OID value in the schema definition. If your company has a standard\nOID management process in place, by all means use it. But otherwise just make\nsure the OID is unique. Be careful about defining attributes as single-value\n(you may change your mind later). Also, in your objectclasses, avoid\nrequiring attributes with \nMUST\n.\n\n\nBelow is a sample schema file for fictional OpenDJ. For more information see\nthe \ndocumentation\n\n\n101-acme.ldif\n\n\ndn: cn=schema\nobjectClass: top\nobjectClass: ldapSubentry\nobjectClass: subschema\ncn: schema\nattributeTypes: ( acmeCustNumber-oid NAME 'acmeCustNumber' EQUALITY\n  caseIgnoreMatch ORDERING caseIgnoreOrderingMatch SUBSTR caseIgnoreSubstringsMatch\n  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )\nattributeTypes: ( acmeStateLicenseNumber-oid NAME 'acmeStateLicenseNumber' EQUALITY\n  caseIgnoreMatch ORDERING caseIgnoreOrderingMatch SUBSTR caseIgnoreSubstringsMatch\n  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15)\nobjectClasses:  ( teaperson-oid NAME 'teaPerson' SUP top\n  MAY ( acmeCustNumber $ acmeStateLicenseNumber ) )\n\n\n\nRegister Attribute in the Gluu Server\n\n\nThe Gluu Server needs to know which attributes are available. Each attribute that\nyou want to make available must have a corresponding LDAP entry under\n\nou=attributes,o=\norg-inum\n,o=gluu\n. If you browse your LDAP server after\nperforming a Gluu Server base installation, you will see that many commonly\nused attributes are already there. When an LDAP entry exists for your attribute,\nit is considered to be \"registered.\"\n\n\nThere are two ways you can regsiter an attribute. If you are an LDAP geek, you\ncan just create an LDIF file with the correct information, and load it in the\nLDAP server that is storing your configuration. If you want to quickly spool\nup new Gluu Servers, this is probably the quickest way to handle it.\n\n\ndn: inum=@!1111!0005!2B29,ou=attributes,o=@!1111,o=gluu\nobjectClass: top\nobjectClass: gluuAttribute\ninum: @!1111!0005!2B29\ndescription: How a person would want their name to be presented in writing.\ndisplayName: Display Name\nurn: urn:mace:dir:attribute-def:displayName\ngluuAttributeName: displayName\ngluuAttributeOrigin: gluuPerson\ngluuAttributeType: string\ngluuStatus: active\ngluuAttributeEditType: user\ngluuAttributeEditType: admin\ngluuAttributeViewType: user\ngluuAttributeViewType: admin\n\n\n\nIf you just have a couple of attributes, you can also use the oxTrust Web\ninterface to add the attributes. See screenshot below, and refer to the\noxTrust \ndocumentation\n for an explanation of all these fields.\n\n\nOpenID Scopes\n\n\nIn SAML, attributes are released directly to websites, so there is not much\nyou need to do. In OpenID Connect, there is a little more complexity. OpenID\nConnect defines scopes, which let you group attributes together, and to provide\na human understandable description of the attributes. This improves usability\nwhen you need to prompt a person to approve the disclosure of attributes to\na third party. For example, instead of asking the user if its ok to release\nher address, city, state, and country, and providing a description of each\nattribute, it may be easier to ask the person if its ok to release \"mailing\naddress information.\" In situations where the attributes may confuse the person,\nOpenID Scopes are a really good thing.\n\n\nAn example of the default Gluu Server authorization request:\n\n\n\n\nSo if you have custom attributes, you may need to define a custom OpenID Scope.\nThis is pretty easy to do using the oxTrust user interface, and you can just\nselect the attributes that you previously registered.\n\n\nWhat attributes to put in what scopes depends on your privacy requirements.\nIf there is an attribute that is particularly sensitive, it may need its own\nscope (i.e. a scope with just one attribute). A good example of this is\n'dateOfBirth.' For minors, this can be sensitive information, and your\norganization may need more control about which OpenID Connect clients with\nwhich to share this scope.\n\n\nIn oxTrust configuration, be careful about making a scope available by\ndefault. This would mean that any client that registers via Dynamic Client\nRegistration could request this scope. The OpenID Connect specification only\nrequires the release of the \nopenid\n scope, which should just contain the\nperson identifier in the domain (i.e. for Google, this would be your Google id).\nHowever, rules were meant to be broken, so if you have a reason to release\na scope by default, go for it!\n\n\noxAuth Discovery configuration\n\n\nDiscovery enables clients to discover which attributes are available at an\nOpenID Provider. Ideally, this would be controlled also from oxTrust and this\ninformation would be persisted in the attribute LDAP data. At some point this\nwill happen (see \nJira issue\n). But \nin the meantime, this is controlled by oxauth.xml. So if you want to publish \nthat a claim is available, you'll need to update this section:\n\n\nclaims-supported\n\n    \nclaim\nuid\n/claim\n\n    \nclaim\ngivenName\n/claim\n\n    \nclaim\nsn\n/claim\n\n    \nclaim\ndisplayName\n/claim\n\n    \nclaim\nmail\n/claim\n\n\n/claims-supported\n\n\n\n\nLetting the world know about your custom schema\n\n\nWhile OpenID Connect Discovery provides one place where you can publish\ninformation about your claims, and which scopes are must be requested\nto get a certain claim, its meant for computers to read, not people.\nFor this reason, its a good idea to publish a schema definition guide\nthat people can refer to. Gluu has a \n\nsample federation public site\n\nthat you may want to look at if you needs some ideas about how to present\nthe information.", 
            "title": "Custom Attributes"
        }, 
        {
            "location": "/articles/custom-attributes/#custom-attributes", 
            "text": "LDAP attributes, SAML attributes, OpenID Connect user claims--whatever you call\nthem--many organizations have business-specific information about people that needs\nto be shared with applications. For simplicity, this article will refer to them as\n\"attributes.\" Existing standard schemas like the LDAP  inetOrgPerson  standard, or\nthe OpenID Connect  id_token  user claims define attributes like first name, last\nname and email address. Where possible, we recommend you use these. But what if\nthere is an attribute that is just not in any standard schema? This article will\nexplain what you need to do to configure the Gluu Server to support your new\nattributes, and give you some advice along the way with regard to best practices.\nWe'll use fictional Company Acme Inc., which has requirements\nfor \"acmeCustNumber\" and \"acmeStateLicenseNumber\"", 
            "title": "Custom Attributes"
        }, 
        {
            "location": "/articles/custom-attributes/#ldap-schema", 
            "text": "The first step is to make sure that your LDAP server can persist these attributes.\nEach LDAP server implementation manages schema in its own way. The most common\nLDAP server backend for the Gluu Server is OpenDJ, so this article will use this\nplatform as an example. This schema should also work for 389DS. If you are using\nOpenLDAP or another platform, just refer to the respective documentation.  In LDAP, \"schema\" refers to the  attribute  and  objectclass  definitions.\nIn OpenDJ, schema is stored in  {opendj-home}/config/schema . If your company has\ncustom schema, it may be simpler to make a separate file that contains your\ndefinitions (rather than using the built-in attribute management features, which\nwould store the schema in a default file,  100-user.ldif  in OpenDJ. Don't stress\nabout the OID value in the schema definition. If your company has a standard\nOID management process in place, by all means use it. But otherwise just make\nsure the OID is unique. Be careful about defining attributes as single-value\n(you may change your mind later). Also, in your objectclasses, avoid\nrequiring attributes with  MUST .  Below is a sample schema file for fictional OpenDJ. For more information see\nthe  documentation  101-acme.ldif  dn: cn=schema\nobjectClass: top\nobjectClass: ldapSubentry\nobjectClass: subschema\ncn: schema\nattributeTypes: ( acmeCustNumber-oid NAME 'acmeCustNumber' EQUALITY\n  caseIgnoreMatch ORDERING caseIgnoreOrderingMatch SUBSTR caseIgnoreSubstringsMatch\n  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )\nattributeTypes: ( acmeStateLicenseNumber-oid NAME 'acmeStateLicenseNumber' EQUALITY\n  caseIgnoreMatch ORDERING caseIgnoreOrderingMatch SUBSTR caseIgnoreSubstringsMatch\n  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15)\nobjectClasses:  ( teaperson-oid NAME 'teaPerson' SUP top\n  MAY ( acmeCustNumber $ acmeStateLicenseNumber ) )", 
            "title": "LDAP Schema"
        }, 
        {
            "location": "/articles/custom-attributes/#register-attribute-in-the-gluu-server", 
            "text": "The Gluu Server needs to know which attributes are available. Each attribute that\nyou want to make available must have a corresponding LDAP entry under ou=attributes,o= org-inum ,o=gluu . If you browse your LDAP server after\nperforming a Gluu Server base installation, you will see that many commonly\nused attributes are already there. When an LDAP entry exists for your attribute,\nit is considered to be \"registered.\"  There are two ways you can regsiter an attribute. If you are an LDAP geek, you\ncan just create an LDIF file with the correct information, and load it in the\nLDAP server that is storing your configuration. If you want to quickly spool\nup new Gluu Servers, this is probably the quickest way to handle it.  dn: inum=@!1111!0005!2B29,ou=attributes,o=@!1111,o=gluu\nobjectClass: top\nobjectClass: gluuAttribute\ninum: @!1111!0005!2B29\ndescription: How a person would want their name to be presented in writing.\ndisplayName: Display Name\nurn: urn:mace:dir:attribute-def:displayName\ngluuAttributeName: displayName\ngluuAttributeOrigin: gluuPerson\ngluuAttributeType: string\ngluuStatus: active\ngluuAttributeEditType: user\ngluuAttributeEditType: admin\ngluuAttributeViewType: user\ngluuAttributeViewType: admin  If you just have a couple of attributes, you can also use the oxTrust Web\ninterface to add the attributes. See screenshot below, and refer to the\noxTrust  documentation  for an explanation of all these fields.", 
            "title": "Register Attribute in the Gluu Server"
        }, 
        {
            "location": "/articles/custom-attributes/#openid-scopes", 
            "text": "In SAML, attributes are released directly to websites, so there is not much\nyou need to do. In OpenID Connect, there is a little more complexity. OpenID\nConnect defines scopes, which let you group attributes together, and to provide\na human understandable description of the attributes. This improves usability\nwhen you need to prompt a person to approve the disclosure of attributes to\na third party. For example, instead of asking the user if its ok to release\nher address, city, state, and country, and providing a description of each\nattribute, it may be easier to ask the person if its ok to release \"mailing\naddress information.\" In situations where the attributes may confuse the person,\nOpenID Scopes are a really good thing.  An example of the default Gluu Server authorization request:   So if you have custom attributes, you may need to define a custom OpenID Scope.\nThis is pretty easy to do using the oxTrust user interface, and you can just\nselect the attributes that you previously registered.  What attributes to put in what scopes depends on your privacy requirements.\nIf there is an attribute that is particularly sensitive, it may need its own\nscope (i.e. a scope with just one attribute). A good example of this is\n'dateOfBirth.' For minors, this can be sensitive information, and your\norganization may need more control about which OpenID Connect clients with\nwhich to share this scope.  In oxTrust configuration, be careful about making a scope available by\ndefault. This would mean that any client that registers via Dynamic Client\nRegistration could request this scope. The OpenID Connect specification only\nrequires the release of the  openid  scope, which should just contain the\nperson identifier in the domain (i.e. for Google, this would be your Google id).\nHowever, rules were meant to be broken, so if you have a reason to release\na scope by default, go for it!", 
            "title": "OpenID Scopes"
        }, 
        {
            "location": "/articles/custom-attributes/#oxauth-discovery-configuration", 
            "text": "Discovery enables clients to discover which attributes are available at an\nOpenID Provider. Ideally, this would be controlled also from oxTrust and this\ninformation would be persisted in the attribute LDAP data. At some point this\nwill happen (see  Jira issue ). But \nin the meantime, this is controlled by oxauth.xml. So if you want to publish \nthat a claim is available, you'll need to update this section:  claims-supported \n     claim uid /claim \n     claim givenName /claim \n     claim sn /claim \n     claim displayName /claim \n     claim mail /claim  /claims-supported", 
            "title": "oxAuth Discovery configuration"
        }, 
        {
            "location": "/articles/custom-attributes/#letting-the-world-know-about-your-custom-schema", 
            "text": "While OpenID Connect Discovery provides one place where you can publish\ninformation about your claims, and which scopes are must be requested\nto get a certain claim, its meant for computers to read, not people.\nFor this reason, its a good idea to publish a schema definition guide\nthat people can refer to. Gluu has a  sample federation public site \nthat you may want to look at if you needs some ideas about how to present\nthe information.", 
            "title": "Letting the world know about your custom schema"
        }, 
        {
            "location": "/articles/gluu-server-ce/", 
            "text": "Gluu Server CE QuickStart\n\n\nSo you want to try out the Gluu Server. The Community Edition (CE) is a great place to start. This article will provide an overview of deployment and testing so you'll be ready to start using your new Gluu Server ASAP. \n\n\nWhat's included in CE?\n\n\nWhen you deploy CE, you have the option to include the following components:\n\n\n\n\nCAS\n is an enterprise Single Sign-On solution for web services. CAS should only be used to connect legacy applications. OpenID Connect and SAML are preferred for new application integrations.\n\n\nShibboleth\n one of the most dependable and heavily tested open source SAML single sign-on servers available. Shibboleth is used in production environments at more than 5,000 organization\u2019s worldwide.\n\n\noxAuth:\n an inter-op leading \nOpenID Connect\n Provider and a production ready implementation of \nUMA\n, a new profile of OAuth2 that defines RESTful, JSON-based, standardized flows and constructs for coordinating the protection of any API or web resource.\n\n\noxTrust:\n the server management interface.\n\n\nLDAP:\n included for local storage of user information and configuration data.\n\n\n\n\nInclusion of the Asimba SAML proxy is in progress. \n\n\nLicenses\n\n\nEach component of the Gluu Server is free to use in production. All OX products are MIT License. Learn more  \nhere\n. \n\n\nInstallation\n\n\nGluu will publish binaries for as many OS's as possible. Currently, the \neasiest installation option is:  \n\n\n\n\nCentOS\n\n\nUbuntu\n\n\n\n\nOpenID Connect RP Libraries\n\n\nIn order to protect your app with OpenID Connect, you will need to call the OpenID Connect APIs from within your application. Depending on what language your using, you'll need to implement those \nclient libraries\n. Here's Gluu's \njava libraries\n.\n\n\nSupport\n\n\nIf you have questions or issues, you can browse our \npublic knowledge base\n and \nregister\n to create public tickets. \nVIP support\n can be purchased for priority assistance, private support and ad hoc consultations.", 
            "title": "Gluu CE"
        }, 
        {
            "location": "/articles/gluu-server-ce/#gluu-server-ce-quickstart", 
            "text": "So you want to try out the Gluu Server. The Community Edition (CE) is a great place to start. This article will provide an overview of deployment and testing so you'll be ready to start using your new Gluu Server ASAP.", 
            "title": "Gluu Server CE QuickStart"
        }, 
        {
            "location": "/articles/gluu-server-ce/#whats-included-in-ce", 
            "text": "When you deploy CE, you have the option to include the following components:   CAS  is an enterprise Single Sign-On solution for web services. CAS should only be used to connect legacy applications. OpenID Connect and SAML are preferred for new application integrations.  Shibboleth  one of the most dependable and heavily tested open source SAML single sign-on servers available. Shibboleth is used in production environments at more than 5,000 organization\u2019s worldwide.  oxAuth:  an inter-op leading  OpenID Connect  Provider and a production ready implementation of  UMA , a new profile of OAuth2 that defines RESTful, JSON-based, standardized flows and constructs for coordinating the protection of any API or web resource.  oxTrust:  the server management interface.  LDAP:  included for local storage of user information and configuration data.   Inclusion of the Asimba SAML proxy is in progress.", 
            "title": "What's included in CE?"
        }, 
        {
            "location": "/articles/gluu-server-ce/#licenses", 
            "text": "Each component of the Gluu Server is free to use in production. All OX products are MIT License. Learn more   here .", 
            "title": "Licenses"
        }, 
        {
            "location": "/articles/gluu-server-ce/#installation", 
            "text": "Gluu will publish binaries for as many OS's as possible. Currently, the \neasiest installation option is:     CentOS  Ubuntu", 
            "title": "Installation"
        }, 
        {
            "location": "/articles/gluu-server-ce/#openid-connect-rp-libraries", 
            "text": "In order to protect your app with OpenID Connect, you will need to call the OpenID Connect APIs from within your application. Depending on what language your using, you'll need to implement those  client libraries . Here's Gluu's  java libraries .", 
            "title": "OpenID Connect RP Libraries"
        }, 
        {
            "location": "/articles/gluu-server-ce/#support", 
            "text": "If you have questions or issues, you can browse our  public knowledge base  and  register  to create public tickets.  VIP support  can be purchased for priority assistance, private support and ad hoc consultations.", 
            "title": "Support"
        }, 
        {
            "location": "/articles/operations/", 
            "text": "Table of Contents\n \n\n\n\n\nStarting Gluu Server chroot environment\n\n\nStopping Gluu Server chroot environment\n\n\nRestarting OpenDJ service\n\n\nRestarting Apache service\n\n\nRestart apache in Ubuntu\n\n\nRestart apache in CentOS\n\n\n\n\n\n\nRestarting Tomcat service\n\n\n\n\nStarting Gluu Server chroot environment\n\n\nTo start the the Gluu Server chroot environment, use the command:\n\n\n/etc/init.d/gluu-chroot start\n \n\n\nSample result of running the command is as follows:\n\n\nroot@gluu:~# /etc/init.d/gluu-chroot start\nStarting Gluu Chroot Server: Starting OpenDJ: \nRather than invoking init scripts through /etc/init.d, use the service(8)\nutility, e.g. service S20cron start\ninitctl: Unknown job: S20cron\n\nSince the script you are attempting to invoke has been converted to an\nUpstart job, you may also use the start(8) utility, e.g. start S20cron\nStarting Tomcat Servlet Container...\nWaiting for Tomcat Servlet Container......\nrunning: PID:11767\n* Starting NTP server ntpd                                                                                                                                      [ OK ] \n* Starting web server apache2                                                                                                                                          AH00557: apache2: apr_sockaddr_info_get() failed for DA855F9895A1CA3B00020B185D7A.gluu.info\nAH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.0.1. Set the 'ServerName' directive globally to suppress this message\n*\n\n\n\nStopping Gluu Server chroot environment\n\n\nTo stop Gluu Server chroot environment, we simply issue the command::\n\n\n/etc/init.d/gluu-chroot stop\n\n\nSample result of running the command is as follows:\n\n\nroot@gluu:~# /etc/init.d/gluu-chroot stop\nShutting down Gluu Chroot Server: Shutting down OpenDJ: [25/Aug/2014:11:33:13 +0000] category=BACKEND severity=NOTICE msgID=9896306 msg=The backend inumDB is now taken offline\n[25/Aug/2014:11:33:13 +0000] category=BACKEND severity=NOTICE msgID=9896306 msg=The backend userRoot is now taken offline\n[25/Aug/2014:11:33:13 +0000] category=CORE severity=NOTICE msgID=458955 msg=The Directory Server is now stopped\n\nRather than invoking init scripts through /etc/init.d, use the service(8)\nutility, e.g. service S80cron stop\ninitctl: Unknown job: S80cron\n\nSince the script you are attempting to invoke has been converted to an\nUpstart job, you may also use the stop(8) utility, e.g. stop S80cron\nStopping Tomcat Servlet Container...\nStopped Tomcat Servlet Container.\n* Stopping NTP server ntpd                                                                                                                                      [ OK ] \n* Stopping web server apache2                                                                                                                                           *\n\n\n\nRestarting OpenDJ service\n\n\nTo restart the opendj service, use the command:\n\n\n/etc/init.d/opendj restart\n \n\n\nSample result of running the command is as follows:\n\n\nGLUU.root@DA855F9895A1CA3B00020B185D7A:~# /etc/init.d/opendj restart\n[26/Aug/2014:20:12:00 +0000] category=BACKEND severity=NOTICE msgID=9896306 msg=The backend inumDB is now taken offline\n[26/Aug/2014:20:12:00 +0000] category=BACKEND severity=NOTICE msgID=9896306 msg=The backend userRoot is now taken offline\n[26/Aug/2014:20:12:00 +0000] category=CORE severity=NOTICE msgID=458955 msg=The Directory Server is now stopped\n\nGLUU.root@DA855F9895A1CA3B00020B185D7A:~# telnet localhost 1636\nTrying ::1...\nConnected to localhost.\nEscape character is '^]'.\nquit\nConnection closed by foreign host.\nGLUU.root@DA855F9895A1CA3B00020B185D7A:~#\n\n\n\nRestarting Apache service\n\n\nThe apache service in ubuntu is known as apache2 and for CentOS it's called httpd.\n\n\nRestart apache in Ubuntu\n\n\n/etc/init.d/apache2 restart\n\n\nRestart apache in CentOS\n\n\n/etc/init.d/httpd restart\n\n\nRestarting Tomcat service\n\n\nThe tomcat service is restarted in same way in both CentOS and Ubuntu.\nBelow is the command:\n\n/etc/init.d/tomcat  restart\n \n\n\nThe sample run is as follow:\n\n\nGLUU.root@DA855F9895A1CA3B00020B185D7A:~# /etc/init.d/tomcat restart\nStopping Tomcat Servlet Container...\nStopped Tomcat Servlet Container.\nStarting Tomcat Servlet Container...\nWaiting for Tomcat Servlet Container......\nrunning: PID:6967\nGLUU.root@DA855F9895A1CA3B00020B185D7A:~#", 
            "title": "Gluu CE Operations"
        }, 
        {
            "location": "/articles/operations/#starting-gluu-server-chroot-environment", 
            "text": "To start the the Gluu Server chroot environment, use the command:  /etc/init.d/gluu-chroot start    Sample result of running the command is as follows:  root@gluu:~# /etc/init.d/gluu-chroot start\nStarting Gluu Chroot Server: Starting OpenDJ: \nRather than invoking init scripts through /etc/init.d, use the service(8)\nutility, e.g. service S20cron start\ninitctl: Unknown job: S20cron\n\nSince the script you are attempting to invoke has been converted to an\nUpstart job, you may also use the start(8) utility, e.g. start S20cron\nStarting Tomcat Servlet Container...\nWaiting for Tomcat Servlet Container......\nrunning: PID:11767\n* Starting NTP server ntpd                                                                                                                                      [ OK ] \n* Starting web server apache2                                                                                                                                          AH00557: apache2: apr_sockaddr_info_get() failed for DA855F9895A1CA3B00020B185D7A.gluu.info\nAH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.0.1. Set the 'ServerName' directive globally to suppress this message\n*", 
            "title": "Starting Gluu Server chroot environment"
        }, 
        {
            "location": "/articles/operations/#stopping-gluu-server-chroot-environment", 
            "text": "To stop Gluu Server chroot environment, we simply issue the command::  /etc/init.d/gluu-chroot stop  Sample result of running the command is as follows:  root@gluu:~# /etc/init.d/gluu-chroot stop\nShutting down Gluu Chroot Server: Shutting down OpenDJ: [25/Aug/2014:11:33:13 +0000] category=BACKEND severity=NOTICE msgID=9896306 msg=The backend inumDB is now taken offline\n[25/Aug/2014:11:33:13 +0000] category=BACKEND severity=NOTICE msgID=9896306 msg=The backend userRoot is now taken offline\n[25/Aug/2014:11:33:13 +0000] category=CORE severity=NOTICE msgID=458955 msg=The Directory Server is now stopped\n\nRather than invoking init scripts through /etc/init.d, use the service(8)\nutility, e.g. service S80cron stop\ninitctl: Unknown job: S80cron\n\nSince the script you are attempting to invoke has been converted to an\nUpstart job, you may also use the stop(8) utility, e.g. stop S80cron\nStopping Tomcat Servlet Container...\nStopped Tomcat Servlet Container.\n* Stopping NTP server ntpd                                                                                                                                      [ OK ] \n* Stopping web server apache2                                                                                                                                           *", 
            "title": "Stopping Gluu Server chroot environment"
        }, 
        {
            "location": "/articles/operations/#restarting-opendj-service", 
            "text": "To restart the opendj service, use the command:  /etc/init.d/opendj restart    Sample result of running the command is as follows:  GLUU.root@DA855F9895A1CA3B00020B185D7A:~# /etc/init.d/opendj restart\n[26/Aug/2014:20:12:00 +0000] category=BACKEND severity=NOTICE msgID=9896306 msg=The backend inumDB is now taken offline\n[26/Aug/2014:20:12:00 +0000] category=BACKEND severity=NOTICE msgID=9896306 msg=The backend userRoot is now taken offline\n[26/Aug/2014:20:12:00 +0000] category=CORE severity=NOTICE msgID=458955 msg=The Directory Server is now stopped\n\nGLUU.root@DA855F9895A1CA3B00020B185D7A:~# telnet localhost 1636\nTrying ::1...\nConnected to localhost.\nEscape character is '^]'.\nquit\nConnection closed by foreign host.\nGLUU.root@DA855F9895A1CA3B00020B185D7A:~#", 
            "title": "Restarting OpenDJ service"
        }, 
        {
            "location": "/articles/operations/#restarting-apache-service", 
            "text": "The apache service in ubuntu is known as apache2 and for CentOS it's called httpd.", 
            "title": "Restarting Apache service"
        }, 
        {
            "location": "/articles/operations/#restart-apache-in-ubuntu", 
            "text": "/etc/init.d/apache2 restart", 
            "title": "Restart apache in Ubuntu"
        }, 
        {
            "location": "/articles/operations/#restart-apache-in-centos", 
            "text": "/etc/init.d/httpd restart", 
            "title": "Restart apache in CentOS"
        }, 
        {
            "location": "/articles/operations/#restarting-tomcat-service", 
            "text": "The tomcat service is restarted in same way in both CentOS and Ubuntu.\nBelow is the command: /etc/init.d/tomcat  restart    The sample run is as follow:  GLUU.root@DA855F9895A1CA3B00020B185D7A:~# /etc/init.d/tomcat restart\nStopping Tomcat Servlet Container...\nStopped Tomcat Servlet Container.\nStarting Tomcat Servlet Container...\nWaiting for Tomcat Servlet Container......\nrunning: PID:6967\nGLUU.root@DA855F9895A1CA3B00020B185D7A:~#", 
            "title": "Restarting Tomcat service"
        }, 
        {
            "location": "/articles/java-connect/", 
            "text": "Using OpenID Connect to authenticate a person in Java\n\n\nThe \nhttp://openid.net/connect\n Protocol offers Java developers a way to authenticate a person at any Internet domain that supports the standard. To accomplish this, the domain must provide a way to register clients--the website and mobile applications that use the authentication API offered by the domain.\n\n\nDiscovery\n\n\nDiscovery is the first step! Luckily, its super-easy! All you have to \ndo is make a get request to \nhttps://{domain}/.well-known/openid-configuration\n\n\nThis will return a JSON object, as described in the \nspecification\n. For example, you can see Gluu's OpenID Connect discovery \nurl\n.\n\n\nThis will tell you everything you need to know about this OpenID Connect provider, like what are the endpoints (URLs), what crypto is supported, and what user claims can you ask for.\n\n\nAn \nexample\n of a Discovery Request, using the oxAuth RP library.\n\n\nClient Registration\n\n\nIn SAML, the website was called a \"Service Provider.\" In OpenID Connect, the website (or mobile application) is called a \"Client.\" Clients can be registered manually by the OP, but more frequently, clients use the \nDynamic Registration API\n to automate the process. \n\n\nObtaining the id_token\n\n\nAfter your client is registered, it is time to get down to business. OpenID Connect offers two common workflows for authentication: basic (where the person is using a browser, and can be re-directed) and implicit where the client sends the credentials, including the secret. There is a userful implements guide for \nbasic\n and \nimplicit\n\n\nLogout\n\n\nOpenID Connect defines a mechanism for \nSession Management\n. The idea is that javascript in a web tab can detect that another tab has logged out. One detection of a logout event, the Web application can cleanup sessions in any backend systems as necessary. Its not 100% effective. If the tab is closed when the logout occurs in another tab, the event may not be detected, and the backend systems are advised to timeout sessions.", 
            "title": "OpenID in Java"
        }, 
        {
            "location": "/articles/java-connect/#using-openid-connect-to-authenticate-a-person-in-java", 
            "text": "The  http://openid.net/connect  Protocol offers Java developers a way to authenticate a person at any Internet domain that supports the standard. To accomplish this, the domain must provide a way to register clients--the website and mobile applications that use the authentication API offered by the domain.", 
            "title": "Using OpenID Connect to authenticate a person in Java"
        }, 
        {
            "location": "/articles/java-connect/#discovery", 
            "text": "Discovery is the first step! Luckily, its super-easy! All you have to \ndo is make a get request to  https://{domain}/.well-known/openid-configuration  This will return a JSON object, as described in the  specification . For example, you can see Gluu's OpenID Connect discovery  url .  This will tell you everything you need to know about this OpenID Connect provider, like what are the endpoints (URLs), what crypto is supported, and what user claims can you ask for.  An  example  of a Discovery Request, using the oxAuth RP library.", 
            "title": "Discovery"
        }, 
        {
            "location": "/articles/java-connect/#client-registration", 
            "text": "In SAML, the website was called a \"Service Provider.\" In OpenID Connect, the website (or mobile application) is called a \"Client.\" Clients can be registered manually by the OP, but more frequently, clients use the  Dynamic Registration API  to automate the process.", 
            "title": "Client Registration"
        }, 
        {
            "location": "/articles/java-connect/#obtaining-the-id_token", 
            "text": "After your client is registered, it is time to get down to business. OpenID Connect offers two common workflows for authentication: basic (where the person is using a browser, and can be re-directed) and implicit where the client sends the credentials, including the secret. There is a userful implements guide for  basic  and  implicit", 
            "title": "Obtaining the id_token"
        }, 
        {
            "location": "/articles/java-connect/#logout", 
            "text": "OpenID Connect defines a mechanism for  Session Management . The idea is that javascript in a web tab can detect that another tab has logged out. One detection of a logout event, the Web application can cleanup sessions in any backend systems as necessary. Its not 100% effective. If the tab is closed when the logout occurs in another tab, the event may not be detected, and the backend systems are advised to timeout sessions.", 
            "title": "Logout"
        }, 
        {
            "location": "/articles/js-connect/", 
            "text": "Using OpenID Connect from JavaScript\n\n\nSee \nOpenID Connect plugin for Passport", 
            "title": "OpenID from JavaScript"
        }, 
        {
            "location": "/articles/js-connect/#using-openid-connect-from-javascript", 
            "text": "See  OpenID Connect plugin for Passport", 
            "title": "Using OpenID Connect from JavaScript"
        }, 
        {
            "location": "/articles/java-saml/", 
            "text": "Java SAML\n\n\nLibraries\n\n\nGluu SAML Library\n provides a simple Java SP implementation without request signing.", 
            "title": "Java SAML Library"
        }, 
        {
            "location": "/articles/java-saml/#java-saml", 
            "text": "", 
            "title": "Java SAML"
        }, 
        {
            "location": "/articles/java-saml/#libraries", 
            "text": "Gluu SAML Library  provides a simple Java SP implementation without request signing.", 
            "title": "Libraries"
        }, 
        {
            "location": "/articles/scim-client/", 
            "text": "How to use the SCIM API to manage users\n\n\nHow to enable oxAuth for SCIM user management\n\n\nGluu Server Admin Guide SCIM oxAuth docs\n\n\nHow to enable UMA for SCIM user management\n\n\nGluu Server Admin Guide SCIM UMA docs\n\n\nHow to build the SCIM client\n\n\nSee \nBuild SCIM Wiki Page\n\n\nLearn the 1.1 API\n\n\n\n\nOfficial Website\n\n\nGluu SCIM Library Docs\n\n\n\n\nA simple example: Change a person's password\n\n\n\n\nOX Wiki Change Password Post", 
            "title": "SCIM API"
        }, 
        {
            "location": "/articles/scim-client/#how-to-use-the-scim-api-to-manage-users", 
            "text": "", 
            "title": "How to use the SCIM API to manage users"
        }, 
        {
            "location": "/articles/scim-client/#how-to-enable-oxauth-for-scim-user-management", 
            "text": "Gluu Server Admin Guide SCIM oxAuth docs", 
            "title": "How to enable oxAuth for SCIM user management"
        }, 
        {
            "location": "/articles/scim-client/#how-to-enable-uma-for-scim-user-management", 
            "text": "Gluu Server Admin Guide SCIM UMA docs", 
            "title": "How to enable UMA for SCIM user management"
        }, 
        {
            "location": "/articles/scim-client/#how-to-build-the-scim-client", 
            "text": "See  Build SCIM Wiki Page", 
            "title": "How to build the SCIM client"
        }, 
        {
            "location": "/articles/scim-client/#learn-the-11-api", 
            "text": "Official Website  Gluu SCIM Library Docs", 
            "title": "Learn the 1.1 API"
        }, 
        {
            "location": "/articles/scim-client/#a-simple-example-change-a-persons-password", 
            "text": "OX Wiki Change Password Post", 
            "title": "A simple example: Change a person's password"
        }, 
        {
            "location": "/articles/mod-auth-oidc/", 
            "text": "mod_auth_oidc Installation Guide\n\n\nmod_auth_openidc\n is an authentication/authorization module for the Apache 2.x HTTP server. It is widely being used to \nauthenticate users\n against an OpenID Connect Provider. It can also serve as an OAuth 2.0 Resource Server, validating access tokens presented by OAuth 2.0 clients against an OAuth 2.0 Authorization Server. (mod_auth_openidc Github)\n\n\nGenerally, following steps are involved in installation:\n\n\n\n\nSetup Apache2\n\n\nClient Registration\n\n\nGetting DN from Client ID\n\n\n\n\nHere, you can find complete guide for installing \nmod-auth-openidc\n in \nUbuntu\n and \nCentOS\n.", 
            "title": "mod_auth_oidc Installation Guide"
        }, 
        {
            "location": "/articles/mod-auth-oidc/#mod_auth_oidc-installation-guide", 
            "text": "mod_auth_openidc  is an authentication/authorization module for the Apache 2.x HTTP server. It is widely being used to  authenticate users  against an OpenID Connect Provider. It can also serve as an OAuth 2.0 Resource Server, validating access tokens presented by OAuth 2.0 clients against an OAuth 2.0 Authorization Server. (mod_auth_openidc Github)  Generally, following steps are involved in installation:   Setup Apache2  Client Registration  Getting DN from Client ID   Here, you can find complete guide for installing  mod-auth-openidc  in  Ubuntu  and  CentOS .", 
            "title": "mod_auth_oidc Installation Guide"
        }, 
        {
            "location": "/articles/test-shib2/", 
            "text": "TestShib2 Testing For Gluu Server\n\n\nTrust Relationship in IdP\n\n\nIt is necessary to create a Trust Relationship in the IdP for TestShib2.\n\n\n\n\n\n\nLog into the Gluu IdP as an admin user.\n\n\n\n\n\n\nClick on SAML --\n Trust Relationships\n\n\n\n\n\n\n\n\n\n\nTo create a new Trust Relationship, click on the \"Add Relationship\" button.\n\n\n\n\n\n\n(a) Configuration\n\n\n  i. Display Name: TestShib2 testing\n\n ii. Description: TestShib2 TR\n\niii. Metadata type: URL\n\n iv. Provide TestShib2 XML metadata link: http://www.testshib.org/metadata/testshib-providers.xml\n\n  v. Release Attributes: First Name, Username, \"eduPerson TargetedID\" if required and released in IdP.\n\n vi. Click \"Add\".\n\n\n\n\n\nGluu IdP Configuration in Testshib Site\n\n\n\n\n\n\nGo to the TestShib website by typing \"http://www.testshib.org/\" in the web browser.\n\n\n\n\n\n\nClick on \"Register\".\n\n\n\n\n\n\nUpload the metadata of the IdP in the testshib webpage.\n\n\n(a) To collect the metadata of Gluu IdP, please go to \"https://support.gluu.org/view/application-integration/how-can-i-get-my-idps-metadata/216\".\n\n\n\n\n\n\n\n\n(b) After successful update, TestShib will present a confirmation page.\n\n\n\n\n\nIdP SSO Testing\n\n\n\n\n\n\nClick on \"TEST\" in the TestShib website.\n\n\n\n\n\n\nHit the \"https://sp.testshib.org\" link.\n\n\n\n\n\n\n\n\n\n\nProvide the entityID of the IdP in the input box. The entityID for Gluu IdP is \"https://host_name_of_IdP/idp/shibboleth\".\n\n\n\n\n\n\n\n\nClick \"Go\" and the user will be forwarded to the IdP for authentication. If the authentication is successful, then the browser will show a shibboleth protected TestShib page.", 
            "title": "Testing Shib2"
        }, 
        {
            "location": "/articles/test-shib2/#testshib2-testing-for-gluu-server", 
            "text": "", 
            "title": "TestShib2 Testing For Gluu Server"
        }, 
        {
            "location": "/articles/test-shib2/#trust-relationship-in-idp", 
            "text": "It is necessary to create a Trust Relationship in the IdP for TestShib2.    Log into the Gluu IdP as an admin user.    Click on SAML --  Trust Relationships      To create a new Trust Relationship, click on the \"Add Relationship\" button.    (a) Configuration    i. Display Name: TestShib2 testing\n\n ii. Description: TestShib2 TR\n\niii. Metadata type: URL\n\n iv. Provide TestShib2 XML metadata link: http://www.testshib.org/metadata/testshib-providers.xml\n\n  v. Release Attributes: First Name, Username, \"eduPerson TargetedID\" if required and released in IdP.\n\n vi. Click \"Add\".", 
            "title": "Trust Relationship in IdP"
        }, 
        {
            "location": "/articles/test-shib2/#gluu-idp-configuration-in-testshib-site", 
            "text": "Go to the TestShib website by typing \"http://www.testshib.org/\" in the web browser.    Click on \"Register\".    Upload the metadata of the IdP in the testshib webpage.  (a) To collect the metadata of Gluu IdP, please go to \"https://support.gluu.org/view/application-integration/how-can-i-get-my-idps-metadata/216\".     (b) After successful update, TestShib will present a confirmation page.", 
            "title": "Gluu IdP Configuration in Testshib Site"
        }, 
        {
            "location": "/articles/test-shib2/#idp-sso-testing", 
            "text": "Click on \"TEST\" in the TestShib website.    Hit the \"https://sp.testshib.org\" link.      Provide the entityID of the IdP in the input box. The entityID for Gluu IdP is \"https://host_name_of_IdP/idp/shibboleth\".     Click \"Go\" and the user will be forwarded to the IdP for authentication. If the authentication is successful, then the browser will show a shibboleth protected TestShib page.", 
            "title": "IdP SSO Testing"
        }, 
        {
            "location": "/articles/social-login-google/", 
            "text": "Social Login with Google\n\n\nSo you want to use Google for authentication? Its a nice option to offer to your customers\nwho may not want to maintain a password in your domain. Sometimes you may even want to let\nemployees use Google for authentication--everyone's got a Google account right?\n\n\nGoogle is an external \"identity provider\" or IDP. You need to consider the situation that there\nmay be users who have Google credentials, but don't yet have an account in your domain. You have\ntwo options: (1) don't let the users login; (2) dynamically add the users to your Gluu\nServer LDAP server, which is what we call \"dynamic enrollment.\"\n\n\nUsing a Gluu Server\n\nauthentication interception script\n,\nyou can implement any kind of business logic. Gluu has contributed an interception script to handle\nGoogle login on\n\nGithub\n.\nThis article will provide step-by-step instructions on howto install and configure this script.\n\n\nConfigure Google\n\n\nIn order to call Google API's, you need to register as a developer and create client credentials.\nHere are some \ninstructions\n\n\nThe first thing you'll need to do is Create a Project on Google to obtain\nclient credentials. Click \"Create project\" and enter project name\n\n\n\n\nThen click on your newly created project from the listing on the dashboard, and under the Credentials section,\nyou'll need to create a new \"OAuth2 2.0 client ID.\"\n\n\n\n\nGoogle will ask you to configure your consent screen, to add your logo and other information displayed to the\nuser to authorize Google to release information.\n\n\n\n\nFill out the form...\n\n\n\n\nNow you're ready to create the credentials. Enter \"Authorized JavaScript origins\". It should be\nthe URL of your Gluu Server for example \nhttps://idp.example.com\n\n\n\n\nGoogle will display the client-id and secret... ignore it. What you want to do is download the JSON which\nyou are going to upload into your Gluu Server.\n\n\n\n\nMove this file to \n/opt/tomcat/conf/google.json\n The JSON will look something like this\n(no... these aren't aren't valid creds!):\n\n\n{\n  \nweb\n: {\n    \nclient_id\n: \n7a64e55f-724d4e8c91823d5f1f18a0b2.apps.googleusercontent.com\n,\n    \nauth_uri\n: \nhttps:\\/\\/accounts.google.com\\/o\\/oauth2\\/auth\n,\n    \ntoken_uri\n: \nhttps:\\/\\/accounts.google.com\\/o\\/oauth2\\/token\n,\n    \nauth_provider_x509_cert_url\n: \nhttps:\\/\\/www.googleapis.com\\/oauth2\\/v1\\/certs\n,\n    \nclient_secret\n: \nbb76a2c99be94e35b874\n,\n    \njavascript_origins\n: [\n      \nhttps:\\/\\/brookie.gluu.info\n\n    ]\n  }\n}\n\n\n\n\nThe last step is to enable Google+ API's:\n - Navigate back to the Google API \nconsole\n\n - Select project and enter project name\n - Open new project \"API \n auth -\n API\" menu item in configuration navigation tree\n - Click \"Google+ API\"\n - Click \"Enable API\" button\n\n\nConfigure Gluu Server\n\n\nLogin to oxTrust and navigate to \"Configure Custom Scripts\"\n\n\n\n\nAnd at the bottom of the page, click on the little link for \"Add custom script configuration\"\n\n\n\n\nIn the main body of the \"Custom Script\" section, paste the\n\ncode from github\n\n\nYou'll also need to add some custom properties:\n\n\n\n\ngplus_client_secrets_file\n : /opt/tomcat/conf/google.json\n\n\ngplus_deployment_type\n : enroll\n\n\ngplus_remote_attributes_list\n : email, email, name, family_name, given_name, locale\n\n\n\n\ngplus_local_attributes_list\n : uid, mail, givenName, sn, cn, preferredLanguage\n\n\n\n\n\n\ngplus_client_secrets_file\n - It's mandatory property. It's path to application configuration file downloaded from Google console for application.\nExample: \n/etc/certs/gplus_client_secrets.json\n\nThese are steps needed to get it:\n    a) Log into: https://console.developers.google.com/project\n    b) Click \"Create project\" and enter project name\n    c) Open new project \"API \n auth -\n Credentials\" menu item in configuration navigation tree\n    d) Click \"Add credential\" with type \"OAuth 2.0 client ID\"\n    e) Select \"Web application\" application type\n    f) Enter \"Authorized JavaScript origins\". It should be CE server DNS name. Example: https://gluu.info\n    g) Click \"Create\" and Click \"OK\" in next dialog\n    h) Click \"Download JSON\" in order to download gplus_client_secrets.json file\nAlso it's mandatory to enable Google+ API:\n    a) Log into: https://console.developers.google.com/project\n    b) Select project and enter project name\n    c) Open new project \"API \n auth -\n API\" menu item in configuration navigation tree\n    d) Click \"Google+ API\"\n    e) Click \"Enable API\" button\n\n\n\n\n\n\ngplus_deployment_type\n - Specify deployment mode. It's optional property. If this property isn't specified script\n   tries to find user in local LDAP by 'subject_identifier' claim specified in id_token. If this property has 'map' value script\n   allow to map 'subject_identifier' to local user account. If this property has 'enroll' value script should add new user to local LDAP\n   with status 'acrtive'. In order to map IDP attributes to local attributes it uses properties gplus_remote_attributes_list and\n   gplus_local_attributes_list.\n   Allowed values: map/enroll\n   Example: enroll\n\n\n\n\n\n\ngplus_remote_attributes_list\n - Comma separated list of attribute names (user claims) that Google+\n   returns which map to local attributes attributes in the \ngplus_local_attributes_list\n property.\n   It's mandatory only if \ngplus_deployment_type\n is 'enroll'.\n\n\n\n\n\n\ngplus_local_attributes_list\n - Comma separated list of Gluu Server ldap attribute names\n   returns are mapped to Google user claims from the \ngplus_remote_attributes_list\n property.\n   It's mandatory only if \ngplus_deployment_type\n is 'enroll'.\n\n\n\n\n\n\nextension_module\n - Optional property to specify the full path of an external module that\nimplements two methods:\n\n\n\n\n\n\n    # This is called when the authentication script initializes\n    def init(conf_attr):\n        # Code here\n        return True/False\n\n    # This is called after authentication\n    def postLogin(conf_attr, user):\n        # Code here\n        return True    # or return False\n\n\n\n\n\n\ngplus_client_configuration_attribute\n - Optional property to specify client entry attribute name\n    which can override \ngplus_client_secrets_file file\n content. It can be used in cases when all\n    clients should use separate \ngplus_client_secrets.json\n configuration.\n\n\n\n\nTesting\n\n\nOne simple way to test is to use oxTrust for testing. In the \"Configure Authentication\" menu dropdown, select\n\"Google\" (or whatever you entered as the \"Name\" of the custom authentication script--as the default\nauthentication method.\n\n\n\n\nAfter you login and logout, you should be presented with a new login form that has the Google Login button:\n\n\n\n\nAfter clicking the Google Login button, you should be presented for authorization--Google needs to make sure\nits ok to release attributes to the Gluu Server:\n\n\n\n\nIf the script doesn't work, and you locked yourself out of oxTrust, don't worry! You can create an ldif file,\nfor example \nrevert.ldif\n, to set back the default authentication method, like this:\n\n\ndn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal\n\n\n\noxAuthenticationMode corresponds to the 'Name' of the customer authentication script in oxTrust, use\n\ninternal\n to revert to the default ldap authentication. You'll have to change the \ninum\n with the \ninum\n\nfor your installation. You can find it an ldapsearch like this:\n\n\n/opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw \\\n-b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" inum\n\n\n\nwhere \n~/.pw\n is a file with your Directory Manager password. If you don't remember it, try\n    grep ldapPass= /install/community-edition-setup/setup.properties.last\n\n\nOnce your ldif looks ok, then use ldapmodify to revert back to password authentication:\n\n\n/opt/opendj/bin/ldapmodify -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw -f revert.ldif\n\n\n\nIf things go wrong, it can leave the sessions in your browswer in a bad state. If things get really weird,\nremove the cookies in your browser for the hostname of your Gluu Server.", 
            "title": "Social Login with Google"
        }, 
        {
            "location": "/articles/social-login-google/#social-login-with-google", 
            "text": "So you want to use Google for authentication? Its a nice option to offer to your customers\nwho may not want to maintain a password in your domain. Sometimes you may even want to let\nemployees use Google for authentication--everyone's got a Google account right?  Google is an external \"identity provider\" or IDP. You need to consider the situation that there\nmay be users who have Google credentials, but don't yet have an account in your domain. You have\ntwo options: (1) don't let the users login; (2) dynamically add the users to your Gluu\nServer LDAP server, which is what we call \"dynamic enrollment.\"  Using a Gluu Server authentication interception script ,\nyou can implement any kind of business logic. Gluu has contributed an interception script to handle\nGoogle login on Github .\nThis article will provide step-by-step instructions on howto install and configure this script.", 
            "title": "Social Login with Google"
        }, 
        {
            "location": "/articles/social-login-google/#configure-google", 
            "text": "In order to call Google API's, you need to register as a developer and create client credentials.\nHere are some  instructions  The first thing you'll need to do is Create a Project on Google to obtain\nclient credentials. Click \"Create project\" and enter project name   Then click on your newly created project from the listing on the dashboard, and under the Credentials section,\nyou'll need to create a new \"OAuth2 2.0 client ID.\"   Google will ask you to configure your consent screen, to add your logo and other information displayed to the\nuser to authorize Google to release information.   Fill out the form...   Now you're ready to create the credentials. Enter \"Authorized JavaScript origins\". It should be\nthe URL of your Gluu Server for example  https://idp.example.com   Google will display the client-id and secret... ignore it. What you want to do is download the JSON which\nyou are going to upload into your Gluu Server.   Move this file to  /opt/tomcat/conf/google.json  The JSON will look something like this\n(no... these aren't aren't valid creds!):  {\n   web : {\n     client_id :  7a64e55f-724d4e8c91823d5f1f18a0b2.apps.googleusercontent.com ,\n     auth_uri :  https:\\/\\/accounts.google.com\\/o\\/oauth2\\/auth ,\n     token_uri :  https:\\/\\/accounts.google.com\\/o\\/oauth2\\/token ,\n     auth_provider_x509_cert_url :  https:\\/\\/www.googleapis.com\\/oauth2\\/v1\\/certs ,\n     client_secret :  bb76a2c99be94e35b874 ,\n     javascript_origins : [\n       https:\\/\\/brookie.gluu.info \n    ]\n  }\n}  The last step is to enable Google+ API's:\n - Navigate back to the Google API  console \n - Select project and enter project name\n - Open new project \"API   auth -  API\" menu item in configuration navigation tree\n - Click \"Google+ API\"\n - Click \"Enable API\" button", 
            "title": "Configure Google"
        }, 
        {
            "location": "/articles/social-login-google/#configure-gluu-server", 
            "text": "Login to oxTrust and navigate to \"Configure Custom Scripts\"   And at the bottom of the page, click on the little link for \"Add custom script configuration\"   In the main body of the \"Custom Script\" section, paste the code from github  You'll also need to add some custom properties:   gplus_client_secrets_file  : /opt/tomcat/conf/google.json  gplus_deployment_type  : enroll  gplus_remote_attributes_list  : email, email, name, family_name, given_name, locale   gplus_local_attributes_list  : uid, mail, givenName, sn, cn, preferredLanguage    gplus_client_secrets_file  - It's mandatory property. It's path to application configuration file downloaded from Google console for application.\nExample:  /etc/certs/gplus_client_secrets.json \nThese are steps needed to get it:\n    a) Log into: https://console.developers.google.com/project\n    b) Click \"Create project\" and enter project name\n    c) Open new project \"API   auth -  Credentials\" menu item in configuration navigation tree\n    d) Click \"Add credential\" with type \"OAuth 2.0 client ID\"\n    e) Select \"Web application\" application type\n    f) Enter \"Authorized JavaScript origins\". It should be CE server DNS name. Example: https://gluu.info\n    g) Click \"Create\" and Click \"OK\" in next dialog\n    h) Click \"Download JSON\" in order to download gplus_client_secrets.json file\nAlso it's mandatory to enable Google+ API:\n    a) Log into: https://console.developers.google.com/project\n    b) Select project and enter project name\n    c) Open new project \"API   auth -  API\" menu item in configuration navigation tree\n    d) Click \"Google+ API\"\n    e) Click \"Enable API\" button    gplus_deployment_type  - Specify deployment mode. It's optional property. If this property isn't specified script\n   tries to find user in local LDAP by 'subject_identifier' claim specified in id_token. If this property has 'map' value script\n   allow to map 'subject_identifier' to local user account. If this property has 'enroll' value script should add new user to local LDAP\n   with status 'acrtive'. In order to map IDP attributes to local attributes it uses properties gplus_remote_attributes_list and\n   gplus_local_attributes_list.\n   Allowed values: map/enroll\n   Example: enroll    gplus_remote_attributes_list  - Comma separated list of attribute names (user claims) that Google+\n   returns which map to local attributes attributes in the  gplus_local_attributes_list  property.\n   It's mandatory only if  gplus_deployment_type  is 'enroll'.    gplus_local_attributes_list  - Comma separated list of Gluu Server ldap attribute names\n   returns are mapped to Google user claims from the  gplus_remote_attributes_list  property.\n   It's mandatory only if  gplus_deployment_type  is 'enroll'.    extension_module  - Optional property to specify the full path of an external module that\nimplements two methods:        # This is called when the authentication script initializes\n    def init(conf_attr):\n        # Code here\n        return True/False\n\n    # This is called after authentication\n    def postLogin(conf_attr, user):\n        # Code here\n        return True    # or return False   gplus_client_configuration_attribute  - Optional property to specify client entry attribute name\n    which can override  gplus_client_secrets_file file  content. It can be used in cases when all\n    clients should use separate  gplus_client_secrets.json  configuration.", 
            "title": "Configure Gluu Server"
        }, 
        {
            "location": "/articles/social-login-google/#testing", 
            "text": "One simple way to test is to use oxTrust for testing. In the \"Configure Authentication\" menu dropdown, select\n\"Google\" (or whatever you entered as the \"Name\" of the custom authentication script--as the default\nauthentication method.   After you login and logout, you should be presented with a new login form that has the Google Login button:   After clicking the Google Login button, you should be presented for authorization--Google needs to make sure\nits ok to release attributes to the Gluu Server:   If the script doesn't work, and you locked yourself out of oxTrust, don't worry! You can create an ldif file,\nfor example  revert.ldif , to set back the default authentication method, like this:  dn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal  oxAuthenticationMode corresponds to the 'Name' of the customer authentication script in oxTrust, use internal  to revert to the default ldap authentication. You'll have to change the  inum  with the  inum \nfor your installation. You can find it an ldapsearch like this:  /opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw \\\n-b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" inum  where  ~/.pw  is a file with your Directory Manager password. If you don't remember it, try\n    grep ldapPass= /install/community-edition-setup/setup.properties.last  Once your ldif looks ok, then use ldapmodify to revert back to password authentication:  /opt/opendj/bin/ldapmodify -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw -f revert.ldif  If things go wrong, it can leave the sessions in your browswer in a bad state. If things get really weird,\nremove the cookies in your browser for the hostname of your Gluu Server.", 
            "title": "Testing"
        }, 
        {
            "location": "/admin-guide/deployment/centos/", 
            "text": "Gluu Server Community Edition (CE) CentOS Configuration Guide\n\n\nchroot\n is a pre-Docker OS level container technology. Like Docker, the \nchroot\n distribution includes a full linux distribution. As a file system based \"jail\", when you login to the Gluu Server from the host linux system, the \n/\n directory in the Gluu Server is actually \n/home/gluu-server\n on the host. \n\n\nThis strategy has its pluses and minuses. In certain circumstances, there are ways for a hacker to \u201cbreak out of the jail\u201d, and escalate to the host file system. (You don't want to make any file system links from the chroot'd server to the main host!) The benefit is ease of deployment (Docker not required...). We wanted a simple package that people could install and uninstall quickly.\n\n\nTo report issues or provide feedback about the installation process, please use \nGitHub\n or register for an account on \nhttps://support.gluu.org\n.\n\n\nSystem Requirements\n\n\nThe Gluu Server Community Edition should be deployed on a VM with:\n\n\n\n\nCentOS 6.5 \n\n\n2 CPU Units and at least 2GB Physical Memory (more is always better, though)\n\n\n\n\nAvailable Components\n\n\nWhen you deploy the Gluu Server, you will have the opportunity to specify which of the following softwares you want deployed on your server: \n\n\noxAuth:*\n oxAuth provides endpoints for an OpenID Connect Identity Provider (IDP) and an UMA Authorization Server (AS). Both OpenID Connect and UMA are standard profiles of OAuth 2.0, used for single sign-on (SSO) and web and API access management, respectively.  \n\n\noxTrust:*\n oxTrust is the graphical user interface that is used for server management. \n\n\nLDAP:*\n The Gluu Server ships with a fork of the OpenDJ LDAP server. It is used to store attributes and server configurations locally. \n\n\nApache 2 web server:*\n Apache 2 serves the web server for the Gluu Server. Without Apache 2, it's not possible to see the hostname from a browser. \n\n\nShibboleth 2 SAML IDP:\n The Shibboleth server provides endpoints for a SAML Identity Provider (IDP). If you want to create single sign-on (SSO) to a SAML SP, you'll need a SAML IDP. \n\n\nAsimba SAML Proxy:\n The Asimba SAML proxy should be deployed on if your organization needs to consolidate inbound SAML authentication from the IDPs of partners to a single website or app. \n\n\nCAS:\n CAS is legacy at this point and should only be deployed if your organization has existing apps that can only support CAS for single sign-on.   \n\n\nNote: * implies that the software should \nalways\n be deployed.\n\n\nInstalling GLUU Server with yum:\n\n\n# wget http://repo.gluu.org/centos/Gluu.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n# wget http://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n# yum clean all\n\n\n# yum install gluu-server\n\n\nStart Gluu-Server:\n\n\n# service gluu-server start\n\n\nGluu Server Configuration\n\n\nTo perform the final configuration of the Gluu Server you need to provide some instance specific information, like the DNS hostname, and the information required to generate certificates. Post rpm installation, run the Gluu Server \nsetup.py\n to complete the installation.  See \nsetup.py help\n or run \n./setup.py -h\n to see the latest installation options.  \n\n\n\n\nLogin to Gluu Server container: \n\n\n\n\n# service gluu-server login\n\n\n\n\nRun \"setup\" script to perform the final installation: \n\n\n\n\n# cd /install/community-edition-setup/\n\n\n# ./setup.py\n\n\nAfter setup.py script successful execution, point your browser to \nhttps://hostname\n Login with the\ndefault user name \u201cadmin\u201d and the LDAP password printed back in the confirmation (also \ncontained in \nsetup.properties.last\n). If you want to see the full LDIF for the admin user,\nit is contained in \n/opt/opendj/ldif/people.ldif\n\n\nMake sure you remove or encrypt \nsetup.properties.last\n It has the clear text passwords for everything: LDAP, admin user, keystores, and 3DES salt.\n\n\nIf something goes wrong, check \nsetup.log\n for a detailed step-by-step of the installation. Or check \n\nsetup_errors.log\n to just see the errors (or stderr output from the scripts).\n\n\n\n\n\nStarting | Stopping the Gluu Server\n\n\n# service gluu-server start\n\n\n# service gluu-server stop\n\n\nLogin to chroot environment\n\n\n# service gluu-server login\n\n\nGluu Server Uninstallation\n\n\nExit from chroot environment to main linux. Stop the chroot environment, remove the Gluu Server,\nthen remove the Gluu yum repository\n\n\n# service gluu-server stop\n\n\n# yum remove gluu-server\n\n\n# rm -f -r /opt/gluu-server.rpm.saved", 
            "title": "Centos"
        }, 
        {
            "location": "/admin-guide/deployment/centos/#gluu-server-community-edition-ce-centos-configuration-guide", 
            "text": "chroot  is a pre-Docker OS level container technology. Like Docker, the  chroot  distribution includes a full linux distribution. As a file system based \"jail\", when you login to the Gluu Server from the host linux system, the  /  directory in the Gluu Server is actually  /home/gluu-server  on the host.   This strategy has its pluses and minuses. In certain circumstances, there are ways for a hacker to \u201cbreak out of the jail\u201d, and escalate to the host file system. (You don't want to make any file system links from the chroot'd server to the main host!) The benefit is ease of deployment (Docker not required...). We wanted a simple package that people could install and uninstall quickly.  To report issues or provide feedback about the installation process, please use  GitHub  or register for an account on  https://support.gluu.org .", 
            "title": "Gluu Server Community Edition (CE) CentOS Configuration Guide"
        }, 
        {
            "location": "/admin-guide/deployment/centos/#system-requirements", 
            "text": "The Gluu Server Community Edition should be deployed on a VM with:   CentOS 6.5   2 CPU Units and at least 2GB Physical Memory (more is always better, though)", 
            "title": "System Requirements"
        }, 
        {
            "location": "/admin-guide/deployment/centos/#available-components", 
            "text": "When you deploy the Gluu Server, you will have the opportunity to specify which of the following softwares you want deployed on your server:   oxAuth:*  oxAuth provides endpoints for an OpenID Connect Identity Provider (IDP) and an UMA Authorization Server (AS). Both OpenID Connect and UMA are standard profiles of OAuth 2.0, used for single sign-on (SSO) and web and API access management, respectively.    oxTrust:*  oxTrust is the graphical user interface that is used for server management.   LDAP:*  The Gluu Server ships with a fork of the OpenDJ LDAP server. It is used to store attributes and server configurations locally.   Apache 2 web server:*  Apache 2 serves the web server for the Gluu Server. Without Apache 2, it's not possible to see the hostname from a browser.   Shibboleth 2 SAML IDP:  The Shibboleth server provides endpoints for a SAML Identity Provider (IDP). If you want to create single sign-on (SSO) to a SAML SP, you'll need a SAML IDP.   Asimba SAML Proxy:  The Asimba SAML proxy should be deployed on if your organization needs to consolidate inbound SAML authentication from the IDPs of partners to a single website or app.   CAS:  CAS is legacy at this point and should only be deployed if your organization has existing apps that can only support CAS for single sign-on.     Note: * implies that the software should  always  be deployed.", 
            "title": "Available Components"
        }, 
        {
            "location": "/admin-guide/deployment/centos/#installing-gluu-server-with-yum", 
            "text": "# wget http://repo.gluu.org/centos/Gluu.repo -O /etc/yum.repos.d/Gluu.repo  # wget http://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU  # rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU  # yum clean all  # yum install gluu-server", 
            "title": "Installing GLUU Server with yum:"
        }, 
        {
            "location": "/admin-guide/deployment/centos/#start-gluu-server", 
            "text": "# service gluu-server start", 
            "title": "Start Gluu-Server:"
        }, 
        {
            "location": "/admin-guide/deployment/centos/#gluu-server-configuration", 
            "text": "To perform the final configuration of the Gluu Server you need to provide some instance specific information, like the DNS hostname, and the information required to generate certificates. Post rpm installation, run the Gluu Server  setup.py  to complete the installation.  See  setup.py help  or run  ./setup.py -h  to see the latest installation options.     Login to Gluu Server container:    # service gluu-server login   Run \"setup\" script to perform the final installation:    # cd /install/community-edition-setup/  # ./setup.py  After setup.py script successful execution, point your browser to  https://hostname  Login with the\ndefault user name \u201cadmin\u201d and the LDAP password printed back in the confirmation (also \ncontained in  setup.properties.last ). If you want to see the full LDIF for the admin user,\nit is contained in  /opt/opendj/ldif/people.ldif  Make sure you remove or encrypt  setup.properties.last  It has the clear text passwords for everything: LDAP, admin user, keystores, and 3DES salt.  If something goes wrong, check  setup.log  for a detailed step-by-step of the installation. Or check  setup_errors.log  to just see the errors (or stderr output from the scripts).", 
            "title": "Gluu Server Configuration"
        }, 
        {
            "location": "/admin-guide/deployment/centos/#starting-stopping-the-gluu-server", 
            "text": "# service gluu-server start  # service gluu-server stop", 
            "title": "Starting | Stopping the Gluu Server"
        }, 
        {
            "location": "/admin-guide/deployment/centos/#login-to-chroot-environment", 
            "text": "# service gluu-server login", 
            "title": "Login to chroot environment"
        }, 
        {
            "location": "/admin-guide/deployment/centos/#gluu-server-uninstallation", 
            "text": "Exit from chroot environment to main linux. Stop the chroot environment, remove the Gluu Server,\nthen remove the Gluu yum repository  # service gluu-server stop  # yum remove gluu-server  # rm -f -r /opt/gluu-server.rpm.saved", 
            "title": "Gluu Server Uninstallation"
        }, 
        {
            "location": "/admin-guide/deployment/setup_py/", 
            "text": "setup.py command line options\n\n\nUse setup.py to configure your Gluu Server and to add initial data required for\noxAuth and oxTrust to start. If setup.properties is found in this folder, these\nproperties will automatically be used instead of the interactive setup.\nOptions:\n\n\n-a   Install Asimba\n-c   Install CAS\n-d   specify the directory where community-edition-setup is located. Defaults to '.'\n-f   specify setup.properties file\n-h   Help\n-l   Install LDAP\n-n   No interactive prompt before install starts. Run with -f\n-N   No apache httpd server\n-s   Install the Shibboleth IDP\n-u   Update hosts file with IP address / hostname\n-w   Get the development head war files", 
            "title": "Setup py"
        }, 
        {
            "location": "/admin-guide/deployment/setup_py/#setuppy-command-line-options", 
            "text": "Use setup.py to configure your Gluu Server and to add initial data required for\noxAuth and oxTrust to start. If setup.properties is found in this folder, these\nproperties will automatically be used instead of the interactive setup.\nOptions:  -a   Install Asimba\n-c   Install CAS\n-d   specify the directory where community-edition-setup is located. Defaults to '.'\n-f   specify setup.properties file\n-h   Help\n-l   Install LDAP\n-n   No interactive prompt before install starts. Run with -f\n-N   No apache httpd server\n-s   Install the Shibboleth IDP\n-u   Update hosts file with IP address / hostname\n-w   Get the development head war files", 
            "title": "setup.py command line options"
        }, 
        {
            "location": "/admin-guide/deployment/ubuntu/", 
            "text": "Table of Contents\n  \n\n\n\n\nGluu Server Ubuntu Installation Guide\n   \n\n\nSystem Requirements\n\n\nAvailable Components\n\n\nInstall\n   \n\n\nStarting and Stopping the Gluu Server\n   \n\n\nLogin to chroot environment\n   \n\n\nRunning the latest setup\n     \n\n\nUninstallation\n \n\n\n\n\n\n\n\n\nGluu Server Ubuntu Installation Guide\n\n\nSystem Requirements\n\n\nThe Gluu Server Community Edition should be deployed on a VM with:\n\n\n\n\nUbuntu Server 14.04(Trusty)   \n\n\n2 CPU Units and at least 2GB Physical Memory (more is always better, though)  \n\n\n\n\nAvailable Components\n\n\nWhen you deploy the Gluu Server, you will have the opportunity to specify which of the following softwares you want deployed on your server: \n\n\noxAuth:*\n oxAuth provides endpoints for an OpenID Connect Identity Provider (IDP) and an UMA Authorization Server (AS). Both OpenID Connect and UMA are standard profiles of OAuth 2.0, used for single sign-on (SSO) and web and API access management, respectively.  \n\n\noxTrust:*\n oxTrust is the graphical user interface that is used for server management. \n\n\nLDAP:*\n The Gluu Server ships with a fork of the OpenDJ LDAP server. It is used to store attributes and server configurations locally. \n\n\nApache 2 web server:*\n Apache 2 serves the web server for the Gluu Server. Without Apache 2, it's not possible to see the hostname from a browser. \n\n\nShibboleth 2 SAML IDP:\n The Shibboleth server provides endpoints for a SAML Identity Provider (IDP). If you want to create single sign-on (SSO) to a SAML SP, you'll need a SAML IDP. \n\n\nAsimba SAML Proxy:\n The Asimba SAML proxy should be deployed on if your organization needs to consolidate inbound SAML authentication from the IDPs of partners to a single website or app. \n\n\nCAS:\n CAS is legacy at this point and should only be deployed if your organization has existing apps that can only support CAS for single sign-on.   \n\n\nNote: * implies that the software should \nalways\n be deployed.\n\n\nInstall\n\n\nDownload and install Gluu-Server by following commands\n\n\nUse the .deb installation to perform a base chroot installation with following Gluu Server Base Ubuntu requirements\n\n\nNew alternative using our Gluu repo for ubuntu trusty:\n\n\n # echo \"deb http://repo.gluu.org/ubuntu/ trusty main\" \n /etc/apt/sources.list.d/gluu-repo.list \n\n\n # curl http://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add - \n\n\n # apt-get update \n\n\n # apt-get install gluu-server \n\n\n # service gluu-server start \n\n\n # service gluu-server login \n \n\n\n # cd /install/community-edition-setup/ \n\n\n ./setup.py \n\n\nAfter setup.py script successful execution, login to oxTrust, the policy\nadministration point for Gluu by pointing your browser to \nhttps://hostname\n\n\nNote: if you are not using a resolvable DNS host, you will need to add \nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in \nthe confirmation (also conatained in setup.properties.last (\ngrep -i pass\n)\nand look for the LDAP password which is the same as the admin password.\n\n\nStarting and Stopping the Gluu Server\n\n\n service gluu-server start \n\n\n service gluu-server stop \n\n\nLogin to chroot environment\n\n\n # service gluu-server login \n\n\nOr if you prefer... \n\n\n chroot /home/gluu-server/ su - \n\n\nRunning the latest setup\n\n\nTo perform the final configuration of the Gluu Server you need to provide \nsome Gluu Server appliance specific information, like the DNS hostname, and \nthe information required for an X.509 certificate. \nWe are always working to make the setup easier. After successful Gluu \nServer installation, run the Gluu Server \nsetup.py\n to complete the \ninstallation. The script is installed in \n/install\n\n\n ./setup.py \n\n\nMake sure you remove or encrypt setup.properties.last It has the clear text passwords for everything: LDAP, admin user, keystores, and 3DES salt.\n\n\nIf something goes wrong, check setup.log for a detailed step-by-step of the installation. Or check setup_errors.log to just see the errors (or stderr output from the scripts).\n\n\nScripted Installation\n\n\nIf you want to script the installation of the Gluu Server, here is what you can do to achieve your target: \n\n\n\n\nSave and backup your existing \nsetup.properties.last\n\n\nUninstall existing Gluu-Server installation\n\n\nFor new installation you can either grab a new VM or use existing one\n\n\nRun all commands till \nservice gluu-server login\n\n\nCopy your saved \nsetup.properties.last\n file into new server's  /install/community-edition-setup/ location\n\n\nRename \nsetup.properties.last\n to \nsetup.properties\n\n\nRun setup script with \n./setup.py\n command\n\n\n\n\nUninstallation\n\n\nExit from chroot environment to main linux.\n\n\nStop the chroot environment, which will unmount all chroot directories and after delete rpm. Please look at following commands.\n\n\n # service gluu-server stop \n\n\n # apt-get remove gluu-server \n\n\n # rm -rf /home/gluu-server \n\n\nOn installation, any modified files are saved in \n/home/gluu-server.save\n\nIf you want to blow away all remnants of the install, `rm -rf /home/gluu-server.save'\n\n\nIn some circumstances, the installation can be broken. In that case please \ntry following to force uninstall the package.\n\n\n # dpkg --purge --force-all gluu-server", 
            "title": "Ubuntu"
        }, 
        {
            "location": "/admin-guide/deployment/ubuntu/#gluu-server-ubuntu-installation-guide", 
            "text": "", 
            "title": "Gluu Server Ubuntu Installation Guide"
        }, 
        {
            "location": "/admin-guide/deployment/ubuntu/#system-requirements", 
            "text": "The Gluu Server Community Edition should be deployed on a VM with:   Ubuntu Server 14.04(Trusty)     2 CPU Units and at least 2GB Physical Memory (more is always better, though)", 
            "title": "System Requirements"
        }, 
        {
            "location": "/admin-guide/deployment/ubuntu/#available-components", 
            "text": "When you deploy the Gluu Server, you will have the opportunity to specify which of the following softwares you want deployed on your server:   oxAuth:*  oxAuth provides endpoints for an OpenID Connect Identity Provider (IDP) and an UMA Authorization Server (AS). Both OpenID Connect and UMA are standard profiles of OAuth 2.0, used for single sign-on (SSO) and web and API access management, respectively.    oxTrust:*  oxTrust is the graphical user interface that is used for server management.   LDAP:*  The Gluu Server ships with a fork of the OpenDJ LDAP server. It is used to store attributes and server configurations locally.   Apache 2 web server:*  Apache 2 serves the web server for the Gluu Server. Without Apache 2, it's not possible to see the hostname from a browser.   Shibboleth 2 SAML IDP:  The Shibboleth server provides endpoints for a SAML Identity Provider (IDP). If you want to create single sign-on (SSO) to a SAML SP, you'll need a SAML IDP.   Asimba SAML Proxy:  The Asimba SAML proxy should be deployed on if your organization needs to consolidate inbound SAML authentication from the IDPs of partners to a single website or app.   CAS:  CAS is legacy at this point and should only be deployed if your organization has existing apps that can only support CAS for single sign-on.     Note: * implies that the software should  always  be deployed.", 
            "title": "Available Components"
        }, 
        {
            "location": "/admin-guide/deployment/ubuntu/#install", 
            "text": "Download and install Gluu-Server by following commands  Use the .deb installation to perform a base chroot installation with following Gluu Server Base Ubuntu requirements  New alternative using our Gluu repo for ubuntu trusty:   # echo \"deb http://repo.gluu.org/ubuntu/ trusty main\"   /etc/apt/sources.list.d/gluu-repo.list    # curl http://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -    # apt-get update    # apt-get install gluu-server    # service gluu-server start    # service gluu-server login      # cd /install/community-edition-setup/    ./setup.py   After setup.py script successful execution, login to oxTrust, the policy\nadministration point for Gluu by pointing your browser to \nhttps://hostname  Note: if you are not using a resolvable DNS host, you will need to add \nthe hostname to your hosts file on the server which is running your browser.\nLogin with the default user name \u201cadmin\u201d and the password printed back in \nthe confirmation (also conatained in setup.properties.last ( grep -i pass )\nand look for the LDAP password which is the same as the admin password.", 
            "title": "Install"
        }, 
        {
            "location": "/admin-guide/deployment/ubuntu/#starting-and-stopping-the-gluu-server", 
            "text": "service gluu-server start    service gluu-server stop", 
            "title": "Starting and Stopping the Gluu Server"
        }, 
        {
            "location": "/admin-guide/deployment/ubuntu/#login-to-chroot-environment", 
            "text": "# service gluu-server login   Or if you prefer...    chroot /home/gluu-server/ su -", 
            "title": "Login to chroot environment"
        }, 
        {
            "location": "/admin-guide/deployment/ubuntu/#running-the-latest-setup", 
            "text": "To perform the final configuration of the Gluu Server you need to provide \nsome Gluu Server appliance specific information, like the DNS hostname, and \nthe information required for an X.509 certificate. \nWe are always working to make the setup easier. After successful Gluu \nServer installation, run the Gluu Server  setup.py  to complete the \ninstallation. The script is installed in  /install   ./setup.py   Make sure you remove or encrypt setup.properties.last It has the clear text passwords for everything: LDAP, admin user, keystores, and 3DES salt.  If something goes wrong, check setup.log for a detailed step-by-step of the installation. Or check setup_errors.log to just see the errors (or stderr output from the scripts).  Scripted Installation  If you want to script the installation of the Gluu Server, here is what you can do to achieve your target:    Save and backup your existing  setup.properties.last  Uninstall existing Gluu-Server installation  For new installation you can either grab a new VM or use existing one  Run all commands till  service gluu-server login  Copy your saved  setup.properties.last  file into new server's  /install/community-edition-setup/ location  Rename  setup.properties.last  to  setup.properties  Run setup script with  ./setup.py  command", 
            "title": "Running the latest setup"
        }, 
        {
            "location": "/admin-guide/deployment/ubuntu/#uninstallation", 
            "text": "Exit from chroot environment to main linux.  Stop the chroot environment, which will unmount all chroot directories and after delete rpm. Please look at following commands.   # service gluu-server stop    # apt-get remove gluu-server    # rm -rf /home/gluu-server   On installation, any modified files are saved in  /home/gluu-server.save \nIf you want to blow away all remnants of the install, `rm -rf /home/gluu-server.save'  In some circumstances, the installation can be broken. In that case please \ntry following to force uninstall the package.   # dpkg --purge --force-all gluu-server", 
            "title": "Uninstallation"
        }, 
        {
            "location": "/admin-guide/certificates/https/", 
            "text": "Manage SSL certificate for Apache\n\n\nThe Gluu Server has different certificates for Apache and SSO handling. For\nApache HTTPS the certificate must be a well known CA certified certificate. For\nSSO handling, it can be either a self signed certificate or a CA certified\ncertificate, there is no hard rule. But in either case, the CN of the\ncertificate MUST follow the HOSTNAME of the Gluu Server. \n\n\nIn order to access this feautre, go to Configuration --\n Manage Certificate\n\n\n\n\nTo update the Gluu Server's SSL certificate, Server admin need to upload both\nprivate key and certificate in upper section ( DA\u2026.-JAVA.crt ) of the \"Manage\nsever SSL certificates\" section.\n\n\nPlease note that, private key cannot be password protected and certificate\nshould be base64 with \"crt\" extension.  \n\n\nUpload private key and certificate with \"Upload Key\" and \"Upload cert\"\nrespectively. \"Update\" the configuration and wait for 10 mins. Our configuration\nmanagement system ( Puppet )  will place certificate in corresponding location\nautomatically.", 
            "title": "Https"
        }, 
        {
            "location": "/admin-guide/certificates/https/#manage-ssl-certificate-for-apache", 
            "text": "The Gluu Server has different certificates for Apache and SSO handling. For\nApache HTTPS the certificate must be a well known CA certified certificate. For\nSSO handling, it can be either a self signed certificate or a CA certified\ncertificate, there is no hard rule. But in either case, the CN of the\ncertificate MUST follow the HOSTNAME of the Gluu Server.   In order to access this feautre, go to Configuration --  Manage Certificate   To update the Gluu Server's SSL certificate, Server admin need to upload both\nprivate key and certificate in upper section ( DA\u2026.-JAVA.crt ) of the \"Manage\nsever SSL certificates\" section.  Please note that, private key cannot be password protected and certificate\nshould be base64 with \"crt\" extension.    Upload private key and certificate with \"Upload Key\" and \"Upload cert\"\nrespectively. \"Update\" the configuration and wait for 10 mins. Our configuration\nmanagement system ( Puppet )  will place certificate in corresponding location\nautomatically.", 
            "title": "Manage SSL certificate for Apache"
        }, 
        {
            "location": "/admin-guide/certificates/openid-connect/", 
            "text": "oxAuth Cryptographic Key Management\n\n\nThe Cryptographic keys are published in oxAUth in the JWK Endpoint. A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.\n\n\nYou can get JWK enpoint by using OpenID Connect Discovery and reading the OpenID Connect Configuration Endpoint. For example: \n\n\nhttp://seed.gluu.org/.well-known/openid-configuration\n\n\n{\n    ...\n    \"jwks_uri\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\",\n    ...\n}\n\n\n\nhttps://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\n\n\n{\"keys\": [\n    {\n        \"kty\": \"RSA\",\n        \"kid\": \"1\",\n        \"use\": \"sig\",\n        \"alg\": \"RS256\",\n        \"n\": \"...\",\n        \"e\": \"...\",\n        \"x5c\": [\"...\"]\n    },\n    {\n        \"kty\": \"RSA\",\n        \"kid\": \"2\",\n        \"use\": \"sig\",\n        \"alg\": \"RS384\",\n        \"n\": \"...\",\n        \"e\": \"...\",\n        \"x5c\": [\"...\"]\n    },\n    {\n        \"kty\": \"RSA\",\n        \"kid\": \"3\",\n        \"use\": \"sig\",\n        \"alg\": \"RS512\",\n        \"n\": \"...\",\n        \"e\": \"...\",\n        \"x5c\": [\"...\"]\n    },\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"4\",\n        \"use\": \"sig\",\n        \"alg\": \"EC\",\n        \"crv\": \"P-256\",\n        \"x\": \"...\",\n        \"y\": \"...\",\n        \"x5c\": [\"...\"]\n    },\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"5\",\n        \"use\": \"sig\",\n        \"alg\": \"EC\",\n        \"crv\": \"P-384\",\n        \"x\": \"...\",\n        \"y\": \"...\",\n        \"x5c\": [\"...\"]\n    },\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"6\",\n        \"use\": \"sig\",\n        \"alg\": \"EC\",\n        \"crv\": \"P-521\",\n        \"x\": \"...\",\n        \"y\": \"...\",\n        \"x5c\": [\"...\"]\n    }\n]}\n\n\n\nUpdating Cryptographic keys (JWS)\n\n\nIn order to generate new Cryptographic keys, go to the oxAuth source directory and run:\n\n\n$ mvn -Dtest=org.xdi.oxauth.ws.rs.SignatureTest -DfailIfNoTests=false test\n\n\n\nThe command output will generate Cryptographic keys for the algorithms: RS256, RS384, RS512, ES256, ES384 and ES512.\n\n\nUpdate or add the desired new Cryptographic keys in the configuration file at:\n\n\n/opt/tomcat/conf/oxauth-web-keys.json\n\n\n\nTo force oxAuth to reload the configuration files:\n\n\n\n\nDelete the LDAP configuration entries at: ou=configuration,o=ORGANIZATION_INUM,o=gluu        \n\n\nRestart Tomcat", 
            "title": "Openid connect"
        }, 
        {
            "location": "/admin-guide/certificates/openid-connect/#oxauth-cryptographic-key-management", 
            "text": "The Cryptographic keys are published in oxAUth in the JWK Endpoint. A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  You can get JWK enpoint by using OpenID Connect Discovery and reading the OpenID Connect Configuration Endpoint. For example:   http://seed.gluu.org/.well-known/openid-configuration  {\n    ...\n    \"jwks_uri\": \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\",\n    ...\n}  https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks  {\"keys\": [\n    {\n        \"kty\": \"RSA\",\n        \"kid\": \"1\",\n        \"use\": \"sig\",\n        \"alg\": \"RS256\",\n        \"n\": \"...\",\n        \"e\": \"...\",\n        \"x5c\": [\"...\"]\n    },\n    {\n        \"kty\": \"RSA\",\n        \"kid\": \"2\",\n        \"use\": \"sig\",\n        \"alg\": \"RS384\",\n        \"n\": \"...\",\n        \"e\": \"...\",\n        \"x5c\": [\"...\"]\n    },\n    {\n        \"kty\": \"RSA\",\n        \"kid\": \"3\",\n        \"use\": \"sig\",\n        \"alg\": \"RS512\",\n        \"n\": \"...\",\n        \"e\": \"...\",\n        \"x5c\": [\"...\"]\n    },\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"4\",\n        \"use\": \"sig\",\n        \"alg\": \"EC\",\n        \"crv\": \"P-256\",\n        \"x\": \"...\",\n        \"y\": \"...\",\n        \"x5c\": [\"...\"]\n    },\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"5\",\n        \"use\": \"sig\",\n        \"alg\": \"EC\",\n        \"crv\": \"P-384\",\n        \"x\": \"...\",\n        \"y\": \"...\",\n        \"x5c\": [\"...\"]\n    },\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"6\",\n        \"use\": \"sig\",\n        \"alg\": \"EC\",\n        \"crv\": \"P-521\",\n        \"x\": \"...\",\n        \"y\": \"...\",\n        \"x5c\": [\"...\"]\n    }\n]}", 
            "title": "oxAuth Cryptographic Key Management"
        }, 
        {
            "location": "/admin-guide/certificates/openid-connect/#updating-cryptographic-keys-jws", 
            "text": "In order to generate new Cryptographic keys, go to the oxAuth source directory and run:  $ mvn -Dtest=org.xdi.oxauth.ws.rs.SignatureTest -DfailIfNoTests=false test  The command output will generate Cryptographic keys for the algorithms: RS256, RS384, RS512, ES256, ES384 and ES512.  Update or add the desired new Cryptographic keys in the configuration file at:  /opt/tomcat/conf/oxauth-web-keys.json  To force oxAuth to reload the configuration files:   Delete the LDAP configuration entries at: ou=configuration,o=ORGANIZATION_INUM,o=gluu          Restart Tomcat", 
            "title": "Updating Cryptographic keys (JWS)"
        }, 
        {
            "location": "/admin-guide/certificates/saml/", 
            "text": "SAML certificate management in Gluu Server\n\n\nSAML Certificate is being used for SAML protocol based SSO. \nGenerally this is a self signed certificate with longer validity ( 1 year to 10\nyears ). \n\n\nIn order to get this feature: Configuration --\n Manage Certificates. \n\n\n\n\nGluu Server Administrator need to use both private key and certificate to\nupdate the SAML cert. Use \"DA..-SHIB.crt\" section (the lower box) of \"Manage\nserver SSL certificates\"  to perform this operation. \n\n\nPrivate key cannot be password protected and certificate should be base64 with\n\"crt\" extension. \n\n\nUpload the private key and public certificate with \"Upload Key\" and \"Upload\nCert\" button respectively. Update the configuration and wait for 10 mins. Our\nconfiguration management system ( Puppet ) will perform the rest of the\noperation to configure certificate inside IDP.", 
            "title": "Saml"
        }, 
        {
            "location": "/admin-guide/certificates/saml/#saml-certificate-management-in-gluu-server", 
            "text": "SAML Certificate is being used for SAML protocol based SSO. \nGenerally this is a self signed certificate with longer validity ( 1 year to 10\nyears ).   In order to get this feature: Configuration --  Manage Certificates.    Gluu Server Administrator need to use both private key and certificate to\nupdate the SAML cert. Use \"DA..-SHIB.crt\" section (the lower box) of \"Manage\nserver SSL certificates\"  to perform this operation.   Private key cannot be password protected and certificate should be base64 with\n\"crt\" extension.   Upload the private key and public certificate with \"Upload Key\" and \"Upload\nCert\" button respectively. Update the configuration and wait for 10 mins. Our\nconfiguration management system ( Puppet ) will perform the rest of the\noperation to configure certificate inside IDP.", 
            "title": "SAML certificate management in Gluu Server"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/", 
            "text": "Table of Contents\n \n\n\n\n\nInbound SAML in Gluu Server\n\n\nRequirements for Inbound SAML\n\n\nMetadata of Authentication Server\n\n\nMetadata of Service Provider\n\n\nSAML Certificate of Service Provider\n\n\nSSL Certificate of Authentication Server\n\n\nRequired Attributes\n\n\n\n\n\n\nAsimba Configuration\n\n\nBase Installation of Asimba Package\n\n\nAsimba Apache Configuration\n\n\nTest Asimba Setup\n\n\n\n\n\n\nAdd New Service Provider or Identity Provider\n\n\nConfigure Asimba SAML Proxy\n\n        - \nBase SAML Proxy Installation\n\n\nSAML Proxy Apache Configuration\n\n\n\n\n\n\nAdd New Identity Provider\n\n\nRequired Files\n\n\nConfigure asimba.xml:\n\n\nWork on IDP Keystore:\n\n\nIDP Restart Tomcat\n\n\n\n\n\n\nAdd New Service Provider\n\n\nConfigure asimba.xml:\n\n\nWork on SP Keystore\n\n\nSP Restart Tomcat\n\n\n\n\n\n\nConfigure SP\n\n\nConfigure Remote IDP\n\n\n\n\n\n\nHow to Test\n\n\n\n\nInbound SAML in Gluu Server\n\n\nThe main use case for Asimba is to enable websites to use a single IDP for single sign-on (SSO)\neven when the organization may have a number of IDPs that are trusted. For more\ninformation, please review the \nAsimba website\n.\n\n\nRequirements for Inbound SAML\n\n\n\n\nMetadata of Authentication Server\n\n\nMetadata of Service Provider\n\n\nSAML Certificate of Service Provider\n\n\nSSL Certificate of Authentication Server\n \n\n\nRequired Attributes\n\n\n\n\nAbove points are described breifly below. \n\n\nMetadata of Authentication Server\n\n\nAuthentication server can be any remote / native SAML IDP such as the Shibboleth IDP or Microsoft ADFS. You need the metadata of this server to configure Asimba. After configuration, end user will be able to select their desired authentication server from Asimba's discovery page. Or, you can configure the \"selector\" which will automatically redirect user to desired IDP / ADFS. \n\n\nMetadata of Service Provider\n\n\nJust like the authentication server metadata, you will also need metadata from all websites ( SPs ) which will be connected.\n\n\nSAML Certificate of Service Provider\n\n\nBase64 encoded certificates are required to configure the Asimba trust store to connect / allow the inbound SAML request from the remote SP. \n\n\nSSL Certificate of Authentication Server\n\n\nBase64 encoded certificates for the authentication server are also required. \n\n\nRequired Attributes\n\n\nEvery organization has their own policy to release / pass attributes to service providers. It can be a standard attribute like UID or email address or it can be any custom attribute.  \n\n\nAsimba Configuration\n\n\nBase Installation of Asimba Package\n\n\n\n\nGet the war for Asimba from \nhttp://asimba.org\n\n\nCopy the war file in \n/opt/tomcat/webapps\n\n\nRestart tomcat, it will extract the Asimba\n\n\nGet the \nasimba.conf\n template from Gluu\n\n\nGenerate the keystore for your Asimba server:\n\n\nCommand: \nkeytool -genkeypair -keyalg RSA -alias \"\nALIAS_OF_KEYSTORE\n\" -keypass \nPASSWORD\n -keystore \nNAME_OF_JKS\n.jks -storepass \nPASSWORD\n\n\nWhat is your first and last name?: Provide the hostname of Asimba server\n\n\nWhat is the name of your organizational unit?: IT\n\n\nWhat is the name of your organization?: Provide name\n\n\nWhat is the name of your City or Locality?: city name\n\n\nWhat is the name of your State or Province?: State name\n\n\nWhat is the two-letter country code for this unit?: US\n\n\n\n\n\n\n\n\n\n\n\n\nAdding IDP / ADFS in Asimba: \n\n\n\n\nGather metadata of IDP / ADFS and keep them in some place under /tomcat/webapps/asimba-saml-proxy/WEB-INF/ \n\n\nCollect certificate of IDP / ADFS and import them in Asimba truststore JKS\n\n\n\n\n\n\n\n\nAdding SP in Asimba: \n\n\n\n\nGather metadata of SP and keep them in some place under /tomcat/webapps/asimba-saml-proxy/WEB-INF/\n\n\nCollect certificate of SP and import them in Asimba truststore JKS\n\n\n\n\n\n\n\n\nRestart tomcat\n\n\n\n\n\n\nAsimba Apache Configuration\n\n\n\n\n\n\nConfigure \nidp.conf\n: \n\n\n    \nLocation /asimba-saml-proxy\n\n        ProxyPass ajp://\nASIMBA_HOSTNAME\n:8009/asimba-saml-proxy retry=5 disablereuse=On\n        ProxyPassReverse ajp://\nASIMBA_HOSTNAME\n:8009/asimba-saml-proxy\n\n        Order allow,deny\n        Allow from all\n    \n/Location\n\n\n\n\n\n\n\n\nRestart httpd \n\n\n\n\n\n\nTest Asimba Setup\n\n\n\n\nTry to download the metadata of Asimba server with: \nwget -c https://\nHOSTNAME\n/asimba-saml-proxy/profiles/saml2\n\n\n\n\nAdd New Service Provider or Identity Provider\n\n\nAll our configurations are based on one Asimba configuration file named\n\nasimba.xml\n. It's also possible to configure Asimba with JDBC. For more info\nAsimba \nwiki\n is availalbe.\n\n\n\n\n\n\nRequired tools\n\n\n\n\nMetadata of remote IDP\n\n\nSAML certificate of remote IDP\n\n\n\n\n\n\n\n\nConfiguring \nasimba.xml\n: \n\n\n\n\nGrab the metadata of remote IDP and save it in some place. Make sure that user tomcat can read this xml copy. \n\n\nSpecify this metadata in  \nwebsso\n\\\nmethod\n\\\nidps\n section. \n\n\nidp id\n must follow the entityID of this metadata.\n\n\nscoping\n should be \"false\"\n\n\nAdd the static path of metadata inside \nfile\n section. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sample configuration should look like below:\n\n\n        \nidp id=\"https://idp.gluu.org/idp/shibboleth\" friendlyname=\"Gluu IDP\" scoping=\"false\" \n            avoid_subjectconfirmation=\"false\"\n\n                \nnameidpolicy enabled=\"false\" /\n\n                    \nmetadata\n\n                        \nfile\n${webapp.root}/WEB-INF/metadata/idp/idp_gluu_org.xml\n/file\n\n                    \nmetadata\n\n        \n/idp\n\n\n\n\nConfigure Asimba SAML Proxy\n\n\n\n\nCollect the metadata of IDP / AD FS which will be connected with your Asimba Server. \n\n\nCollect SAML certificate of that IDP / AD FS server which will be connected with Asimba Proxy Server. \n\n\nCertificate must have to be a base64 encoded ASCII files which contain \n-----BEGIN CERTIFICATE-----\n and \n-----END CERTIFICATE-----\n. \n\n\nCertificate cannot be password protected. \n\n\n\n\n\n\nCollect the metadata of SP which will be connected with Asimba SAML Proxy. \n\n\nCollect the SAML certificate of SP. \n\n\nCertificate must have to be a base64 encoded ASCII files which contain \n-----BEGIN CERTIFICATE-----\n and \n-----END CERTIFICATE-----\n.\n\n\nCertificate cannot be password protected.\n\n\n\n\n\n\n\n\nBase SAML Proxy Installation\n\n\n\n\nGet Asimba from \nAsimba repository\n \n\n\nSend the war file in ~/tomcat/webapps/\n\n\nRestart tomcat, it will extract the asimba \n\n\nGenerate the keystore for your SAML Proxy Server:\n\n\nCommand: \nkeytool -genkeypair -keyalg RSA -alias \"\nALIAS_OF_KEYSTORE\n\" -keypass \nPASSWORD\n -keystore \nNAME_OF_JKS\n.jks -storepass \nPASSWORD\n\n\nWhat is your first and last name?: Provide the hostname of Asimba server\n\n\nWhat is the name of your organizational unit?: IT\n\n\nWhat is the name of your organization?: Provide name\n\n\nWhat is the name of your City or Locality?: city name\n\n\nWhat is the name of your State or Province?: State name\n\n\nWhat is the two-letter country code for this unit?: US\n\n\n\n\n\n\n\n\n\n\n\n\nSAML Proxy Apache Configuration\n\n\nConfigure \nidp.conf\n: \n\n\n        \nLocation /asimba-saml-proxy\n\n            ProxyPass ajp://\nASIMBA_HOSTNAME\n:8009/asimba-saml-proxy retry=5 disablereuse=On\n            ProxyPassReverse ajp://\nASIMBA_HOSTNAME\n:8009/asimba-saml-proxy\n\n            Order allow,deny\n            Allow from all\n        \n/Location\n\n\n\n\nAdd New Identity Provider\n\n\nAll our configurations are based on one Asimba configuration file named\n\nasimba.xml\n. It's also possible to configure Asimba with JDBC. For more info view the\nAsimba \nwiki\n.\n\n\nRequired Files\n\n\n\n\nMetadata of remote IDP\n\n\nSAML certificate of remote IDP\n\n\n\n\nConfigure \nasimba.xml\n:\n\n\n\n\nGrab the metadata of remote IDP and save it in some place. Make sure that user tomcat can read this xml copy. \n\n\nSpecify this metadata in  \nwebsso\n\\\nmethod\n\\\nidps\n section. \n\n\nidp id\n must follow the entityID of this metadata.\n\n\nscoping\n should be \"false\"\n\n\nAdd the static path of metadata inside \nfile\n section. \n\n\n\n\n\n\n\n\n\n\n\n\nA sample configuration should look like below:\n\n\n        \nidp id=\"https://idp.gluu.org/idp/shibboleth\" friendlyname=\"Gluu IDP\" scoping=\"false\" \n            avoid_subjectconfirmation=\"false\"\n\n                \nnameidpolicy enabled=\"false\" /\n\n                    \nmetadata\n\n                        \nfile\n${webapp.root}/WEB-INF/metadata/idp/idp_gluu_org.xml\n/file\n\n                    \nmetadata\n\n        \n/idp\n\n\n\n\nWork on IDP Keystore:\n\n\n\n\nImport the SAML certificate of IDP into Asimba's JKS\n\n\nConvert certificate into DER format\n\n\nImport this DER formatted certificate into Asimba's keystore\n\n\nPlease note that it's a good practice to follow the IDP's \nentityID\n as \nalias\n of this certificate.\n\n\n\n\n\n\n\n\nSample command would be: \n\n\n    keytool -import -trustcacerts -alias https://idp.gluu.org/idp/shibboleth \\ \n        -file idp_gluu_org.der -keystore asimba-keystore.jks\n\n\n\nIDP Restart Tomcat\n\n\nIf everything was done correctly, the new IDP is configured with Asimba\n\n\nAdd New Service Provider\n\n\nRequired Files: \n\n\n\n\nMetadata of SP\n\n\nSAML certificate of SP\n\n\n\n\nConfigure \nasimba.xml\n:\n\n\n\n\nCollect the metadata of SP and place in some location of your file system. Make sure that the metadata is in xml format and user tomcat readable.  \n\n\nAdd Requestor: Every SP is known as \nrequestor\n to Asimba. There are couple of place where we need to configure this SP inside Asimba's \nasimba.xml\n file. \n\n\nRequestor should be configured in \n\\\nrequestor\n\n\nrequestor id\n should be the \nentityID\n of SP\n\n\nfriendlyname\n can be anything which is unique\n\n\n\n\n\n\n\n\nA sample configuration should look like below: \n\n\n        \nrequestor id=\"http://sptest2.gluu.org/secure\"\n                friendlyname=\"Gluu Test SP\"\n                enabled=\"true\" /\n\n\n\n\n\n\nAdd profile of requestor: In this section the location of SP's metadata and some other configurations are done. \n\n\nThis configuration is configured in \n\\\nwebsso\\\nrequestors\\\nrequestor\n\n\nThe \nrequestor id\n is the entityID of SP\n\n\nmetadata\n location is a the absolute path\n\n\n\n\n\n\n\n\nA sample configuration of requestor's profile configuration: \n\n\n        \nrequestor id=\"http://sptest2.gluu.org/secure\"\n            signing=\"FALSE\"\n\n                \nmetadata\n\n                    \nfile\n${webapp.root}/WEB-INF/metadata/sp/sptest2_gluu_org.xml\n/file\n\n                \n/metadata\n\n        \n/requestor\n\n\n\n\nWork on SP Keystore\n\n\n\n\nImport the SAML certificate of SP into Asimba's JKS\n\n\nConvert certificate into DER format\n\n\nImport this der formatted certificate into Asimba's keystore\n\n\nPlease note that it's a good practice to follow the SP's \nentityID\n as \nalias\n of this certificate.\n\n\n\n\n\n\n\n\nSample command would be:\n\n\n    keytool -import -trustcacerts -alias https://sptest2.gluu.org/secure \\\n        -file sp_gluu_org.der -keystore asimba-keystore.jks\n\n\n\nSP Restart Tomcat\n\n\nIf everything was done correctly, the SP is now configured in Asimba. \n\n\nConfigure SP\n\n\nNow, it's time to configure your SP as it can send the request to Asimba server.\nThe primary item to configure Asimba server in SP's configuration is \nthe\nmetadata of Asimba\n. Which can be grabbed easily with \n\n\nwget -c https://\nHOSTNAME\n/asimba-saml-proxy/profiles/saml2\n\n\n\nConfigure Remote IDP\n\n\nRemote IDP / AD FS also need to be configured for Asimba server as they can talk\ntogether. \n\n\nIf the remote authentication server is a Shibboleth IDP, it just require three\nthings: \n\n\n\n\nMetadata of Asimba - which can be grabbed easily. \n\n\nName identifier attribute, which will be shared with Asimba - \npersistentID\n\n\nSAML2SSO\n relying party configuration for this trust relationship with Asimba. Values should be: \n\n\nincludeAttributeStatement\n : true\n\n\nassertionLifetime\n : 300000\n\n\nassertionProxyCount\n : 0\n\n\nsignResponses\n : conditional\n\n\nsignAssertions\n : never\n\n\nsignRequests\n : conditional\n\n\nencryptAssertions\n : never\n\n\nencryptNameIds\n : never \n\n\n\n\n\n\n\n\nHow to Test\n\n\nThe workflow of SAML Proxy is:\n\n\nEnd user hit the SP --\n SP will take user to Asimba's discovery page to select IDP --\n User will select IDP for authentication --\n After successful authentication user will be logged into SP\n\n\nGluu has an auto selector mechanism which automatically redirect user from specified SP to desired IDP for authentication. If you want have questions, please open a ticket on \nsupport\n.", 
            "title": "Inbound saml"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#inbound-saml-in-gluu-server", 
            "text": "The main use case for Asimba is to enable websites to use a single IDP for single sign-on (SSO)\neven when the organization may have a number of IDPs that are trusted. For more\ninformation, please review the  Asimba website .", 
            "title": "Inbound SAML in Gluu Server"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#requirements-for-inbound-saml", 
            "text": "Metadata of Authentication Server  Metadata of Service Provider  SAML Certificate of Service Provider  SSL Certificate of Authentication Server    Required Attributes   Above points are described breifly below.", 
            "title": "Requirements for Inbound SAML"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#metadata-of-authentication-server", 
            "text": "Authentication server can be any remote / native SAML IDP such as the Shibboleth IDP or Microsoft ADFS. You need the metadata of this server to configure Asimba. After configuration, end user will be able to select their desired authentication server from Asimba's discovery page. Or, you can configure the \"selector\" which will automatically redirect user to desired IDP / ADFS.", 
            "title": "Metadata of Authentication Server"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#metadata-of-service-provider", 
            "text": "Just like the authentication server metadata, you will also need metadata from all websites ( SPs ) which will be connected.", 
            "title": "Metadata of Service Provider"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#saml-certificate-of-service-provider", 
            "text": "Base64 encoded certificates are required to configure the Asimba trust store to connect / allow the inbound SAML request from the remote SP.", 
            "title": "SAML Certificate of Service Provider"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#ssl-certificate-of-authentication-server", 
            "text": "Base64 encoded certificates for the authentication server are also required.", 
            "title": "SSL Certificate of Authentication Server"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#required-attributes", 
            "text": "Every organization has their own policy to release / pass attributes to service providers. It can be a standard attribute like UID or email address or it can be any custom attribute.", 
            "title": "Required Attributes"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#asimba-configuration", 
            "text": "", 
            "title": "Asimba Configuration"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#base-installation-of-asimba-package", 
            "text": "Get the war for Asimba from  http://asimba.org  Copy the war file in  /opt/tomcat/webapps  Restart tomcat, it will extract the Asimba  Get the  asimba.conf  template from Gluu  Generate the keystore for your Asimba server:  Command:  keytool -genkeypair -keyalg RSA -alias \" ALIAS_OF_KEYSTORE \" -keypass  PASSWORD  -keystore  NAME_OF_JKS .jks -storepass  PASSWORD  What is your first and last name?: Provide the hostname of Asimba server  What is the name of your organizational unit?: IT  What is the name of your organization?: Provide name  What is the name of your City or Locality?: city name  What is the name of your State or Province?: State name  What is the two-letter country code for this unit?: US       Adding IDP / ADFS in Asimba:    Gather metadata of IDP / ADFS and keep them in some place under /tomcat/webapps/asimba-saml-proxy/WEB-INF/   Collect certificate of IDP / ADFS and import them in Asimba truststore JKS     Adding SP in Asimba:    Gather metadata of SP and keep them in some place under /tomcat/webapps/asimba-saml-proxy/WEB-INF/  Collect certificate of SP and import them in Asimba truststore JKS     Restart tomcat", 
            "title": "Base Installation of Asimba Package"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#asimba-apache-configuration", 
            "text": "Configure  idp.conf :        Location /asimba-saml-proxy \n        ProxyPass ajp:// ASIMBA_HOSTNAME :8009/asimba-saml-proxy retry=5 disablereuse=On\n        ProxyPassReverse ajp:// ASIMBA_HOSTNAME :8009/asimba-saml-proxy\n\n        Order allow,deny\n        Allow from all\n     /Location     Restart httpd", 
            "title": "Asimba Apache Configuration"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#test-asimba-setup", 
            "text": "Try to download the metadata of Asimba server with:  wget -c https:// HOSTNAME /asimba-saml-proxy/profiles/saml2", 
            "title": "Test Asimba Setup"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#add-new-service-provider-or-identity-provider", 
            "text": "All our configurations are based on one Asimba configuration file named asimba.xml . It's also possible to configure Asimba with JDBC. For more info\nAsimba  wiki  is availalbe.    Required tools   Metadata of remote IDP  SAML certificate of remote IDP     Configuring  asimba.xml :    Grab the metadata of remote IDP and save it in some place. Make sure that user tomcat can read this xml copy.   Specify this metadata in   websso \\ method \\ idps  section.   idp id  must follow the entityID of this metadata.  scoping  should be \"false\"  Add the static path of metadata inside  file  section.          A sample configuration should look like below:           idp id=\"https://idp.gluu.org/idp/shibboleth\" friendlyname=\"Gluu IDP\" scoping=\"false\" \n            avoid_subjectconfirmation=\"false\" \n                 nameidpolicy enabled=\"false\" / \n                     metadata \n                         file ${webapp.root}/WEB-INF/metadata/idp/idp_gluu_org.xml /file \n                     metadata \n         /idp", 
            "title": "Add New Service Provider or Identity Provider"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#configure-asimba-saml-proxy", 
            "text": "Collect the metadata of IDP / AD FS which will be connected with your Asimba Server.   Collect SAML certificate of that IDP / AD FS server which will be connected with Asimba Proxy Server.   Certificate must have to be a base64 encoded ASCII files which contain  -----BEGIN CERTIFICATE-----  and  -----END CERTIFICATE----- .   Certificate cannot be password protected.     Collect the metadata of SP which will be connected with Asimba SAML Proxy.   Collect the SAML certificate of SP.   Certificate must have to be a base64 encoded ASCII files which contain  -----BEGIN CERTIFICATE-----  and  -----END CERTIFICATE----- .  Certificate cannot be password protected.", 
            "title": "Configure Asimba SAML Proxy"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#base-saml-proxy-installation", 
            "text": "Get Asimba from  Asimba repository    Send the war file in ~/tomcat/webapps/  Restart tomcat, it will extract the asimba   Generate the keystore for your SAML Proxy Server:  Command:  keytool -genkeypair -keyalg RSA -alias \" ALIAS_OF_KEYSTORE \" -keypass  PASSWORD  -keystore  NAME_OF_JKS .jks -storepass  PASSWORD  What is your first and last name?: Provide the hostname of Asimba server  What is the name of your organizational unit?: IT  What is the name of your organization?: Provide name  What is the name of your City or Locality?: city name  What is the name of your State or Province?: State name  What is the two-letter country code for this unit?: US", 
            "title": "Base SAML Proxy Installation"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#saml-proxy-apache-configuration", 
            "text": "Configure  idp.conf :            Location /asimba-saml-proxy \n            ProxyPass ajp:// ASIMBA_HOSTNAME :8009/asimba-saml-proxy retry=5 disablereuse=On\n            ProxyPassReverse ajp:// ASIMBA_HOSTNAME :8009/asimba-saml-proxy\n\n            Order allow,deny\n            Allow from all\n         /Location", 
            "title": "SAML Proxy Apache Configuration"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#add-new-identity-provider", 
            "text": "All our configurations are based on one Asimba configuration file named asimba.xml . It's also possible to configure Asimba with JDBC. For more info view the\nAsimba  wiki .", 
            "title": "Add New Identity Provider"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#required-files", 
            "text": "Metadata of remote IDP  SAML certificate of remote IDP", 
            "title": "Required Files"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#configure-asimbaxml", 
            "text": "Grab the metadata of remote IDP and save it in some place. Make sure that user tomcat can read this xml copy.   Specify this metadata in   websso \\ method \\ idps  section.   idp id  must follow the entityID of this metadata.  scoping  should be \"false\"  Add the static path of metadata inside  file  section.        A sample configuration should look like below:           idp id=\"https://idp.gluu.org/idp/shibboleth\" friendlyname=\"Gluu IDP\" scoping=\"false\" \n            avoid_subjectconfirmation=\"false\" \n                 nameidpolicy enabled=\"false\" / \n                     metadata \n                         file ${webapp.root}/WEB-INF/metadata/idp/idp_gluu_org.xml /file \n                     metadata \n         /idp", 
            "title": "Configure asimba.xml:"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#work-on-idp-keystore", 
            "text": "Import the SAML certificate of IDP into Asimba's JKS  Convert certificate into DER format  Import this DER formatted certificate into Asimba's keystore  Please note that it's a good practice to follow the IDP's  entityID  as  alias  of this certificate.     Sample command would be:       keytool -import -trustcacerts -alias https://idp.gluu.org/idp/shibboleth \\ \n        -file idp_gluu_org.der -keystore asimba-keystore.jks", 
            "title": "Work on IDP Keystore:"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#idp-restart-tomcat", 
            "text": "If everything was done correctly, the new IDP is configured with Asimba", 
            "title": "IDP Restart Tomcat"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#add-new-service-provider", 
            "text": "Required Files:    Metadata of SP  SAML certificate of SP", 
            "title": "Add New Service Provider"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#configure-asimbaxml_1", 
            "text": "Collect the metadata of SP and place in some location of your file system. Make sure that the metadata is in xml format and user tomcat readable.    Add Requestor: Every SP is known as  requestor  to Asimba. There are couple of place where we need to configure this SP inside Asimba's  asimba.xml  file.   Requestor should be configured in  \\ requestor  requestor id  should be the  entityID  of SP  friendlyname  can be anything which is unique     A sample configuration should look like below:            requestor id=\"http://sptest2.gluu.org/secure\"\n                friendlyname=\"Gluu Test SP\"\n                enabled=\"true\" /    Add profile of requestor: In this section the location of SP's metadata and some other configurations are done.   This configuration is configured in  \\ websso\\ requestors\\ requestor  The  requestor id  is the entityID of SP  metadata  location is a the absolute path     A sample configuration of requestor's profile configuration:            requestor id=\"http://sptest2.gluu.org/secure\"\n            signing=\"FALSE\" \n                 metadata \n                     file ${webapp.root}/WEB-INF/metadata/sp/sptest2_gluu_org.xml /file \n                 /metadata \n         /requestor", 
            "title": "Configure asimba.xml:"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#work-on-sp-keystore", 
            "text": "Import the SAML certificate of SP into Asimba's JKS  Convert certificate into DER format  Import this der formatted certificate into Asimba's keystore  Please note that it's a good practice to follow the SP's  entityID  as  alias  of this certificate.     Sample command would be:      keytool -import -trustcacerts -alias https://sptest2.gluu.org/secure \\\n        -file sp_gluu_org.der -keystore asimba-keystore.jks", 
            "title": "Work on SP Keystore"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#sp-restart-tomcat", 
            "text": "If everything was done correctly, the SP is now configured in Asimba.", 
            "title": "SP Restart Tomcat"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#configure-sp", 
            "text": "Now, it's time to configure your SP as it can send the request to Asimba server.\nThe primary item to configure Asimba server in SP's configuration is  the\nmetadata of Asimba . Which can be grabbed easily with   wget -c https:// HOSTNAME /asimba-saml-proxy/profiles/saml2", 
            "title": "Configure SP"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#configure-remote-idp", 
            "text": "Remote IDP / AD FS also need to be configured for Asimba server as they can talk\ntogether.   If the remote authentication server is a Shibboleth IDP, it just require three\nthings:    Metadata of Asimba - which can be grabbed easily.   Name identifier attribute, which will be shared with Asimba -  persistentID  SAML2SSO  relying party configuration for this trust relationship with Asimba. Values should be:   includeAttributeStatement  : true  assertionLifetime  : 300000  assertionProxyCount  : 0  signResponses  : conditional  signAssertions  : never  signRequests  : conditional  encryptAssertions  : never  encryptNameIds  : never", 
            "title": "Configure Remote IDP"
        }, 
        {
            "location": "/admin-guide/saml/inbound-saml/#how-to-test", 
            "text": "The workflow of SAML Proxy is:  End user hit the SP --  SP will take user to Asimba's discovery page to select IDP --  User will select IDP for authentication --  After successful authentication user will be logged into SP  Gluu has an auto selector mechanism which automatically redirect user from specified SP to desired IDP for authentication. If you want have questions, please open a ticket on  support .", 
            "title": "How to Test"
        }, 
        {
            "location": "/admin-guide/saml/outbound-saml/", 
            "text": "Table of Contents\n  \n\n\n\n\nOutbound SAML\n\n\nMetadata of website:\n\n\nRequired attribute of website:\n\n\nSSO testing endpoint of website:\n\n\n\n\n\n\nConfiguring Outbound SAML SSO\n\n\nLDAP Attributes\n\n\nSAML Trust Relationship\n\n\nHow to create Trust Relationship\n\n\n\n\n\n\n\n\n\n\nFAQ\n\n\n\n\nOutbound SAML\n\n\nOutbound SAML setup from Gluu Server is pretty easy using the Gluu Server's oxTrust GUI. The following pieces of information are needed from the target website or application:\n\n\n\n\nMetadata of website\n\n\nRequired attribute of website\n\n\nSSO testing endpoint of website\n\n\n\n\nAbove three points are described briefly below. \n\n\nMetadata of website:\n\n\nMetadata is a XML file which has configuration data used to provision any\nwebsite ( SP ) or IDP ( Gluu Server ) to communicate with each other. It's\ninterchangeable between IDP and SP. \n\n\nWebsites ( SP ) can provide metadata via URL or as a standalone separate file.\nIf SP provide an XML separate file, Gluu Server can check the integrity of that\nmetadata with it's own mechanism, which can be shown and tested from Gluu Server\noxTrust GUI. \n\n\nRequired attribute of website:\n\n\nEvery organization has their own policy to release / share attributes with any\nIDP or SP. Gluu Server support and can be configured for standard or custom\nattribute. All can be done from Gluu Server oxTrust GUI. \n\n\nSSO testing endpoint of website:\n\n\nEvery website ( SP ) should have staging and production URL endpoint which can\nbe checked for SSO, where user will hit to log into that SP. \n\n\nConfiguring Outbound SAML SSO\n\n\nThe Gluu Server's SAML capabilities are tightly integrated with \nShibboleth\n. \n\n\nLDAP Attributes\n\n\nThe Gluu Server releases all standard attributes. The server administrator is able to see attributes from the Web UI Configuration. \n\n\nOther than standard attributes, the server administrator can create and map any custom attributes in LDAP from the attributes section in the UI:\n\n\n\n\nAn \u201cActive\u201d attribute list can be seen from the Configuration \u2192 Attributes section. \nThe Gluu Server has a large LDAP tree which includes all standard attributes. Not all are necessarily \u201cActive\u201d. Active Attributes can be sorted by clicking \u201cShow only Active Attributes.\u201d\n\n\n\n\nOrganization can manage their required attributes from this big LDAP tree. Just\nselect the attribute and make it active / inactive in the GUI. \n\n\n\n\nIf the organization needs more attributes or has custom attributes, they can be added from within the GUI. Click on \u201cAdd attribute\u201d and a page like this will appear:\n\n\n\n\n\n\nName\n: Name of this custom attribute. It must be unique in Gluu Server LDAP tree.\n\n\nSAML1 URI\n: SAML1 URI value for custom attribute.\n\n\nSAML2 URI\n: SAML2 URI value for custom attribute\n\n\nDisplay Name\n: Any name which is human readable.\n\n\nType\n: Attribute type. There are four types supported by Gluu Server: (i) Text (ii) Numeric (iii) Photo and (iv) Date.\n\n\nEdit Type\n: User who can edit this attribute definition.\n\n\nView Type\n:  User who can view this attribute.\n\n\nPrivacy Level\n: From 1 to 5. Select the desired one.\n\n\nMultivalued\n: Is this attribute has multi values? If yes, True. Otherwise, false. \n\n\nSCIM Attributes\n: Is this attribute in SCIM architecture? True or False.\n\n\nDescription\n: Little description of this attribute\n\n\nStatus\n: \u201cActive\u201d will release and publish the attribute in IdP. \n\n\n\n\nSAML Trust Relationship\n\n\nA Trust Relationship is the mechanism to create single sign-on to any SAML Service Provider ( SP ) from the Gluu Server SAML IDP. Trust Relationships can be created from within the GUI.  \n\n\nHow to create Trust Relationship\n\n\nIn order to create a trust relationship with any SP: \n\n\n\n\nGo to SAML \u2192 Trust Relationships\n\n\nClick on \u201cAdd Relationship\u201d\n\n\n\nA new page will appear. Here, Gluu Server Administrator needs to provide all informations regarding SP to establish Trust Relationship from Gluu Server. \n\n\n\nDisplay Name\n: Name of the Trust Relationship ( it should be unique for every trust relationship ) \n\n\nDescription\n: Little description. Purpose and SSO link can be added here.\n\n\n\n\nMetadata Type\n: Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server\n\n\n\n\nFile\n: If SP has uploadable metadata in XML format, this option works best.\n\n\nURI\n: If the metadata of SP has url link and accessible from internet, Gluu Server Administrator need to use this option. \n\n\n\n\nGenerate\n: Using Gluu Server to generate configuration files for SP is another big option when the SP is inhouse application or \u201cShibboleth SP\u201d is installed or going to be installed in target application site (SP).  \nHow to install Shibboleth SP\n will help user to configure and install Shibboleth SP on their own area. Please note few things when you are going to use \nGenerate\n method for your SP. \n\n\n\n\nURL\n : This is the \nhostname of SP\n\n\nPublic certificate\n : You \nmust\n have to provide the certificate which is Base64 encoded ASCII file and contain \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\". This certificate \ncan not be password protected\n. \n\n\nAfter creating the Trust Relationship, download the generated configuration files from \nDownload Shibboleth2 configuration files\n link and place these configuration files inside your SP configuration. \n\n\n\n\n\n\n\n\nFederation\n: If target application ( SP ) is affiliated with any Federation server (i.e: InCommon, NJEdge etc. ), this option of \u201cMetadata Type\u201d is required. \nSelect \u201cFederation\u201d in Metadata Type and another drop down menu called \u201cSelect Federation\u201d will appear. From this drop menu select desired Federation. \nIn order to create this documentation we took \u201cInCommon\u201d Federation as an example.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfter selecting the \u201cFederation Name\u201d, a new link named \u201cClick to select entity id\u201d will appear. From this link Gluu Server Administrator can select all SP\u2019s entityIDs which are InCommon affiliated. Click on this link and another new SP entityID discovery page will appear like below image. \n\n\n\n\nGluu Server Administrator can grab any SP\u2019s entityID from \u201cFilter\u201d box. As for example, Gluu Server Administrator is looking for Educause entityID. \n\n\n\n\n\n\n\n\nPublic certifiate: Upload public certificate for this SP server. Please note that: public certificate\u2019s CN (common name) MUST maintain the hostname of the SP server. If the SP has no certificate then keep this option blank and the IdP will generate a self signed certificate.\n\n\n\n\n\n\nReleased: Release required attributes. Available attributes can be grabbed from upper left corner. \n\n\n\n\n\n\nMore configuration: If SP requires custom relying party and/or custom MetadataFilter configuration, that can be achieved using the following options: \n\n\n\n\nConfigure MetadataFilters: Click on this option and Gluu Server will allow you to configure MetadataFilters inside the GUI.\n\n\nConfigure specific Relying Party: If the server admin \u201cchecks\u201d this option a new link will appear which allows the server administrator to modify various relying party configurations like SAML2SSO, SAML2AttributeQuery, ShibbolethSSO etc. \n\n\n\n\n\n\nAfter adding a new Trust Relationship, the server administrator will observe a confirmation page like the one below. Please note that for testing purpose we did not provided any certificates. The IdP created the key and cert by itself. The image below shows a sample Trust Relationship after successful creation.\n\n\nFAQ\n\n\n\n\n\n\nI have a new SP, what do I need to do to create a Trust Relationship from the Gluu Server? \n\n\n\n\n\n\nBasically there are two types of single sign-on: IDP-inititate SSO and SP-initiated SSO. You need to know what kind of SSO it is. \n\n\n\n\n\n\nFor SP-initiated SSO, you need to know: \n\n\n\n\nRequired attributes by SP.  \n\n\nMetadata of SP. \n\n\nSSO endpoint / testing endpoint which end user will use to log\ninto SP.   \n\n\n\n\n\n\n\n\nFor IDP-initiated SSO, you need to know: \n\n\n\n\nRequired attribute by SP. \n\n\nMetadata of SP ( if possible )\n\n\nSSO endpoint ( if possible )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhere I can find my IDP's metadata? \n\n\n\n\nGluu Server IDP metadata is available online at: \nhttps://\nyourhostname\n/idp/shibboleth\n\n\n\n\n\n\n\n\nWhat kind of certificates does the Gluu Server use? \n\n\n\n\nCertificates\n in Gluu Server             \n\n\n\n\n\n\n\n\nHow can I get the IDP's SAML cert? \n\n\n\n\nSAML certificate is available in your IDP's metadata. Metadata can be collected by following these \ninstructions\n. \n\n\n\n\n\n\n\n\nI need to update metadata for one Service Provider. How is it possible? \n\n\n\n\nThis is pretty easy. Just follow the instructions listed \nhere\n.", 
            "title": "Outbound saml"
        }, 
        {
            "location": "/admin-guide/saml/outbound-saml/#outbound-saml", 
            "text": "Outbound SAML setup from Gluu Server is pretty easy using the Gluu Server's oxTrust GUI. The following pieces of information are needed from the target website or application:   Metadata of website  Required attribute of website  SSO testing endpoint of website   Above three points are described briefly below.", 
            "title": "Outbound SAML"
        }, 
        {
            "location": "/admin-guide/saml/outbound-saml/#metadata-of-website", 
            "text": "Metadata is a XML file which has configuration data used to provision any\nwebsite ( SP ) or IDP ( Gluu Server ) to communicate with each other. It's\ninterchangeable between IDP and SP.   Websites ( SP ) can provide metadata via URL or as a standalone separate file.\nIf SP provide an XML separate file, Gluu Server can check the integrity of that\nmetadata with it's own mechanism, which can be shown and tested from Gluu Server\noxTrust GUI.", 
            "title": "Metadata of website:"
        }, 
        {
            "location": "/admin-guide/saml/outbound-saml/#required-attribute-of-website", 
            "text": "Every organization has their own policy to release / share attributes with any\nIDP or SP. Gluu Server support and can be configured for standard or custom\nattribute. All can be done from Gluu Server oxTrust GUI.", 
            "title": "Required attribute of website:"
        }, 
        {
            "location": "/admin-guide/saml/outbound-saml/#sso-testing-endpoint-of-website", 
            "text": "Every website ( SP ) should have staging and production URL endpoint which can\nbe checked for SSO, where user will hit to log into that SP.", 
            "title": "SSO testing endpoint of website:"
        }, 
        {
            "location": "/admin-guide/saml/outbound-saml/#configuring-outbound-saml-sso", 
            "text": "The Gluu Server's SAML capabilities are tightly integrated with  Shibboleth .", 
            "title": "Configuring Outbound SAML SSO"
        }, 
        {
            "location": "/admin-guide/saml/outbound-saml/#ldap-attributes", 
            "text": "The Gluu Server releases all standard attributes. The server administrator is able to see attributes from the Web UI Configuration.   Other than standard attributes, the server administrator can create and map any custom attributes in LDAP from the attributes section in the UI:   An \u201cActive\u201d attribute list can be seen from the Configuration \u2192 Attributes section. \nThe Gluu Server has a large LDAP tree which includes all standard attributes. Not all are necessarily \u201cActive\u201d. Active Attributes can be sorted by clicking \u201cShow only Active Attributes.\u201d   Organization can manage their required attributes from this big LDAP tree. Just\nselect the attribute and make it active / inactive in the GUI.    If the organization needs more attributes or has custom attributes, they can be added from within the GUI. Click on \u201cAdd attribute\u201d and a page like this will appear:    Name : Name of this custom attribute. It must be unique in Gluu Server LDAP tree.  SAML1 URI : SAML1 URI value for custom attribute.  SAML2 URI : SAML2 URI value for custom attribute  Display Name : Any name which is human readable.  Type : Attribute type. There are four types supported by Gluu Server: (i) Text (ii) Numeric (iii) Photo and (iv) Date.  Edit Type : User who can edit this attribute definition.  View Type :  User who can view this attribute.  Privacy Level : From 1 to 5. Select the desired one.  Multivalued : Is this attribute has multi values? If yes, True. Otherwise, false.   SCIM Attributes : Is this attribute in SCIM architecture? True or False.  Description : Little description of this attribute  Status : \u201cActive\u201d will release and publish the attribute in IdP.", 
            "title": "LDAP Attributes"
        }, 
        {
            "location": "/admin-guide/saml/outbound-saml/#saml-trust-relationship", 
            "text": "A Trust Relationship is the mechanism to create single sign-on to any SAML Service Provider ( SP ) from the Gluu Server SAML IDP. Trust Relationships can be created from within the GUI.    How to create Trust Relationship  In order to create a trust relationship with any SP:    Go to SAML \u2192 Trust Relationships  Click on \u201cAdd Relationship\u201d  A new page will appear. Here, Gluu Server Administrator needs to provide all informations regarding SP to establish Trust Relationship from Gluu Server.   Display Name : Name of the Trust Relationship ( it should be unique for every trust relationship )   Description : Little description. Purpose and SSO link can be added here.   Metadata Type : Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server   File : If SP has uploadable metadata in XML format, this option works best.  URI : If the metadata of SP has url link and accessible from internet, Gluu Server Administrator need to use this option.    Generate : Using Gluu Server to generate configuration files for SP is another big option when the SP is inhouse application or \u201cShibboleth SP\u201d is installed or going to be installed in target application site (SP).   How to install Shibboleth SP  will help user to configure and install Shibboleth SP on their own area. Please note few things when you are going to use  Generate  method for your SP.    URL  : This is the  hostname of SP  Public certificate  : You  must  have to provide the certificate which is Base64 encoded ASCII file and contain \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\". This certificate  can not be password protected .   After creating the Trust Relationship, download the generated configuration files from  Download Shibboleth2 configuration files  link and place these configuration files inside your SP configuration.      Federation : If target application ( SP ) is affiliated with any Federation server (i.e: InCommon, NJEdge etc. ), this option of \u201cMetadata Type\u201d is required. \nSelect \u201cFederation\u201d in Metadata Type and another drop down menu called \u201cSelect Federation\u201d will appear. From this drop menu select desired Federation. \nIn order to create this documentation we took \u201cInCommon\u201d Federation as an example.        After selecting the \u201cFederation Name\u201d, a new link named \u201cClick to select entity id\u201d will appear. From this link Gluu Server Administrator can select all SP\u2019s entityIDs which are InCommon affiliated. Click on this link and another new SP entityID discovery page will appear like below image.    Gluu Server Administrator can grab any SP\u2019s entityID from \u201cFilter\u201d box. As for example, Gluu Server Administrator is looking for Educause entityID.      Public certifiate: Upload public certificate for this SP server. Please note that: public certificate\u2019s CN (common name) MUST maintain the hostname of the SP server. If the SP has no certificate then keep this option blank and the IdP will generate a self signed certificate.    Released: Release required attributes. Available attributes can be grabbed from upper left corner.     More configuration: If SP requires custom relying party and/or custom MetadataFilter configuration, that can be achieved using the following options:    Configure MetadataFilters: Click on this option and Gluu Server will allow you to configure MetadataFilters inside the GUI.  Configure specific Relying Party: If the server admin \u201cchecks\u201d this option a new link will appear which allows the server administrator to modify various relying party configurations like SAML2SSO, SAML2AttributeQuery, ShibbolethSSO etc.     After adding a new Trust Relationship, the server administrator will observe a confirmation page like the one below. Please note that for testing purpose we did not provided any certificates. The IdP created the key and cert by itself. The image below shows a sample Trust Relationship after successful creation.", 
            "title": "SAML Trust Relationship"
        }, 
        {
            "location": "/admin-guide/saml/outbound-saml/#faq", 
            "text": "I have a new SP, what do I need to do to create a Trust Relationship from the Gluu Server?     Basically there are two types of single sign-on: IDP-inititate SSO and SP-initiated SSO. You need to know what kind of SSO it is.     For SP-initiated SSO, you need to know:    Required attributes by SP.    Metadata of SP.   SSO endpoint / testing endpoint which end user will use to log\ninto SP.        For IDP-initiated SSO, you need to know:    Required attribute by SP.   Metadata of SP ( if possible )  SSO endpoint ( if possible )         Where I can find my IDP's metadata?    Gluu Server IDP metadata is available online at:  https:// yourhostname /idp/shibboleth     What kind of certificates does the Gluu Server use?    Certificates  in Gluu Server                  How can I get the IDP's SAML cert?    SAML certificate is available in your IDP's metadata. Metadata can be collected by following these  instructions .      I need to update metadata for one Service Provider. How is it possible?    This is pretty easy. Just follow the instructions listed  here .", 
            "title": "FAQ"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/", 
            "text": "Install Shibolleth SP Package\n\n\nThe Shibboleth Service Provider(SP) software runs a system service, and it is configured via an apache module. For CentOS it is necessary to add shib.repo to /etc/yum/repos.d and install with yum.\n\n\n$ yum install shibboleth\n\n\n$ service shibd start\n\n\n$ chkconfig shibd on\n\n\nFor other systems, please follow the instructions on the \nShibboleth SP Installation\n page.\n\n\nCopy Files From Archive\n\n\nPlease copy the following files to the \n/etc/shibboleth\n folder.\n\n\n$ cp attribute-map.xml /etc/shibboleth/attribute-map.xml\n\n\n$ cp shibboleth2.xml /etc/shibboleth/shibboleth2.xml\n\n\n$ cp idp-metadata.xml /etc/shibboleth/idp-metadata.xml\n\n\n$ cp sp-metadata.xml /etc/shibboleth/sp-metadata.xml\n\n\n\n\nNote\n\n\nIdP and SP metadata filenames are unique for each IdP and SP. The SP metadata is based on the i-number for the trust relationship.\nThe IdP metadata is based on the i-number for the organization.\n\n\n\n\nAdd Server Certificate to Metadata\n\n\nPlease update the server certificate in shibboleth2.xml at the following location.\n\n\n$ vi /etc/shibboleth/shibboleth2.xml\n\n\n ds:X509Certificate \n\n\n* * * * * * * * * * * * * * *\n\nInsert pem format of the key\n\n* * * * * * * * * * * * * * *\n\n\n / ds: X509Certificate \n\n\n\n\nUpdate Hostnames and Ports in Configuration File\n\n\nPlease edit the hostname in secure session section in \nshibboleth2.xml\n file.\n\n\n$ vi /etc/shibboleth/shibboleth2.xml\n\n\n Host Name=\"hostname\" \n\n\n\n Path name=\"secure\" authType=\"shibboleth\" requireSession=\"true\"/ \n\n\n\n /Host \n\n\n\n\n\n\nNote\n\n\nHostname and port should match the ServerName and Port directives of Apache\n\n\n\n\nEdit the \nhttpd.conf\n file to set UseCanonicalName On:\n\n\nUseCanonicalName: On\n\n\n\nProtect Folder with Shibboleth SSO\n\n\nAdd the following to \nhttpsd.conf\n file to protect directories.\n\n\n$ vi /etc/httpd/conf/httpd.conf\n\n\n Directory \"_path to directories_\" \n\n\n AuthType shibboleth\n\n ShibRequestSetting requireSession 1\n\n ShibUseHeaders On\n\n require valid-user\n\n\n / Directory \n\n\n\n\nRestart shibd and apache httpd\n\n\n$ service httd restart\n\n\n$ service shibd restart\n\n\nTry to access \nhttps://hostname/Shibboleth.sso/Status\n\n\nShibboleth SP for Windows\n\n\n\n\n\n\nDownload the MSI of \nShibboleth-SP\n\n\n\n\n\n\nStart installation by double clicking the MSI.\n\n\n\n\n\n\n\n3.Agree the License Agreement\n\n\n\n\n\n\nSelect the destination folder; by default it is \nc:\\opt\\shibboleth-sp.\n A different directory can be selected from this screen, but it is recommended to follow the tree \n\\opt\\shibboleth-sp.\n\n\n.\n\n\n\n\n\n\nSelect Shibboleth Daemon port: default is \n1600\n, you can keep it for local testing.\n\n\n\n\n\n\n\nNow, there are two options here, and you have to follow any one (not both) for your existing infrastructure.\n\n\n\n\n\n\nOption 1: Installaiton for Microsoft IIS Web Server.\n\n\n\n\n\nFor Microsoft IIS Web Server, you have to Check \"Install ISAPI filter and configure IIS\", and remember to put the file Extension \".sso\". This is very important.\n\n\n\n\n\n\n\n\nOption 2: Installation for Apache Web Server.\n\n\n\n\n\nFor Apache Web Server, you have to Uncheck \"Install ISAPI filter and configure IIS\".\n\n\n\n\n\n\n\n\nUAC of Windows 7 may block the program, so accept it.\n\n\n\nApache2 Installation\n\n\n\n\n\n\nDownload \nApache HTTP Server\n MSI with OpenSSL.\n\n\n\n\n\n\nStart installation by double clicking the MSI.\n\n\n\n\n\n\n\nSelect Destination. You can keep the default destination for your local testing. But, please make sure that there is no other \"Apache Software Foundation\" directory in your current \"C:\\Program Files\\\" location.\n\n\n\n\n\n\n\nInsert Server Informations. For local testing, \nlocaldomain/localhost\n can be used.\n\n\n\n\n\n\n\nTest if Apache is installed or not. Open your web browser and use \nlocalhost\n as the address. If the screen resembles the screenshot below, then you are done.\n\n\n\n\n\n\n\nShibboleth and Apache Configuration\n\n\n\n\n\n\nChange the permission of Apache Installation Directory, provide \nwrite\n access.\n\n\n\n\n\n\nhttpd.conf configuration\n\n\n\n\n\n\nChange: \n\"ServerName localhost:80\"\n (for your local testing)\n\n\n\n\n\n\nCopy apache22.conf from Shibboleth directory to \n~/apache/conf/extra/\n\n\n\n\n\n\nShibboleth2.xml configuration\n\n\n\n\n\n\nChange: Host name = \n\"localhost\"\n (for local testing)\n\n\n\n\n\n\nChange: entityID = \n\"https://localhost/shibboleth\"\n (for local testing)\n\n\n\n\n\n\nChange: ApplicationOverride id = \n\"admin\"\n\n\n\n\n\n\nReboot your Windows box\n\n\n\n\n\n\nTest SP installation with Windows and Apache.\n\n\nOpen Web browser and insert the address : \nlocalhost/Shibboleth.sso/Status\n\n\nIf the screen below resembles the screen on your browser, then you are done with your SP installation in Windows through Apache2\n\n\n\nIIS7 Installation\n\n\n\n\nStart --\n Control Panel --\n Programs --\n \n\"Turn Windows Features on or off\"\n\n\n\n\nSelect (i) IIS, (ii) Web Management Tools, (iii) II6 Management Compatiability, (iv) IIS Management Console, (v) IIS Management Scripts and Tools, (vi) IIS Management Service\n\n\nSelect (i) World Wide Web Service, (ii) CGI, (iii) ISAPI Filters, (iv) ISAPI Extenstions and press \nOK\n.\n\n\n\n\n\n\n\nTest if IIS7 is installed in your system with \n127.0.0.1\n in the web browser.\n\n\n\n\n\n\n\nReboot the system.\n\n\n\n\n\n\nISAPI Filter Configuration\n\n\n\n\n\n\nOpen IIS Manager [Start --\n Administrative Tools --\n Internet Information Service (IIS) Manager]\n\n\n\n\n\n\nDouble click on \n\"ISAPI and CGI Restrictions\"\n\n\n\n\n\n\n\n\nAdd New Filter\n\n\na.      1.Click Actions --\n Add (upper right corner)\n    2.Select \n\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\n\n    3.Description: \n\"Shibboleth\"\n\n    4.Click \n\"Allow\"\n (from right hand side)\n    \n\n\nb.  Back to IIS Manager --\n ISAPI Filters.\n\n\nClick \n\"Add\"\n (upper right corner)\n\n\nFilter name: Shibboleth\n\n\nExecutable: \n\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\n\n\n\n\n\n\n\n\nSSO file extension mapping\n  a. Click on \n\"Handling Mapping\"\n from main page\n\n\n\n\n\n\n\n1.Click Actions --\n Add (upper right corner)\n  b. Click \n\"Add Script Map\"\n from Action\n\n\n  c. Request Path \n\"*.sso\"\n\n  d. Executable should be pointed to \n\"isapi_shib.dll\"\n\n\n\n\n\n\n\n\nRestart IIS\n\n\n\n\n\n\nCheck Status\n\n\n\n\n\n\nCheck your status by typing \n\"http://127.0.0.1/Shibboleth.sso/Status\"\n in the Web Browser. If it diplays an XML document, then the Shibboleth SP Installation in Windows IIS7 is complete.\n\n\n\n\n\nIf you want to establish SSO with your site, then you need an Identity Provider, their metadata and certificates.", 
            "title": "Saml sp configuration"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#install-shibolleth-sp-package", 
            "text": "The Shibboleth Service Provider(SP) software runs a system service, and it is configured via an apache module. For CentOS it is necessary to add shib.repo to /etc/yum/repos.d and install with yum.  $ yum install shibboleth  $ service shibd start  $ chkconfig shibd on  For other systems, please follow the instructions on the  Shibboleth SP Installation  page.", 
            "title": "Install Shibolleth SP Package"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#copy-files-from-archive", 
            "text": "Please copy the following files to the  /etc/shibboleth  folder.  $ cp attribute-map.xml /etc/shibboleth/attribute-map.xml  $ cp shibboleth2.xml /etc/shibboleth/shibboleth2.xml  $ cp idp-metadata.xml /etc/shibboleth/idp-metadata.xml  $ cp sp-metadata.xml /etc/shibboleth/sp-metadata.xml   Note  IdP and SP metadata filenames are unique for each IdP and SP. The SP metadata is based on the i-number for the trust relationship.\nThe IdP metadata is based on the i-number for the organization.", 
            "title": "Copy Files From Archive"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#add-server-certificate-to-metadata", 
            "text": "Please update the server certificate in shibboleth2.xml at the following location.  $ vi /etc/shibboleth/shibboleth2.xml   ds:X509Certificate  \n\n* * * * * * * * * * * * * * *\n\nInsert pem format of the key\n\n* * * * * * * * * * * * * * *  / ds: X509Certificate", 
            "title": "Add Server Certificate to Metadata"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#update-hostnames-and-ports-in-configuration-file", 
            "text": "Please edit the hostname in secure session section in  shibboleth2.xml  file.  $ vi /etc/shibboleth/shibboleth2.xml   Host Name=\"hostname\"    Path name=\"secure\" authType=\"shibboleth\" requireSession=\"true\"/    /Host     Note  Hostname and port should match the ServerName and Port directives of Apache   Edit the  httpd.conf  file to set UseCanonicalName On:  UseCanonicalName: On", 
            "title": "Update Hostnames and Ports in Configuration File"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#protect-folder-with-shibboleth-sso", 
            "text": "Add the following to  httpsd.conf  file to protect directories.  $ vi /etc/httpd/conf/httpd.conf   Directory \"_path to directories_\"  \n\n AuthType shibboleth\n\n ShibRequestSetting requireSession 1\n\n ShibUseHeaders On\n\n require valid-user  / Directory", 
            "title": "Protect Folder with Shibboleth SSO"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#restart-shibd-and-apache-httpd", 
            "text": "$ service httd restart  $ service shibd restart  Try to access  https://hostname/Shibboleth.sso/Status", 
            "title": "Restart shibd and apache httpd"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#shibboleth-sp-for-windows", 
            "text": "Download the MSI of  Shibboleth-SP    Start installation by double clicking the MSI.    3.Agree the License Agreement    Select the destination folder; by default it is  c:\\opt\\shibboleth-sp.  A different directory can be selected from this screen, but it is recommended to follow the tree  \\opt\\shibboleth-sp.  .    Select Shibboleth Daemon port: default is  1600 , you can keep it for local testing.    Now, there are two options here, and you have to follow any one (not both) for your existing infrastructure.    Option 1: Installaiton for Microsoft IIS Web Server.   For Microsoft IIS Web Server, you have to Check \"Install ISAPI filter and configure IIS\", and remember to put the file Extension \".sso\". This is very important.     Option 2: Installation for Apache Web Server.   For Apache Web Server, you have to Uncheck \"Install ISAPI filter and configure IIS\".     UAC of Windows 7 may block the program, so accept it.", 
            "title": "Shibboleth SP for Windows"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#apache2-installation", 
            "text": "Download  Apache HTTP Server  MSI with OpenSSL.    Start installation by double clicking the MSI.    Select Destination. You can keep the default destination for your local testing. But, please make sure that there is no other \"Apache Software Foundation\" directory in your current \"C:\\Program Files\\\" location.    Insert Server Informations. For local testing,  localdomain/localhost  can be used.    Test if Apache is installed or not. Open your web browser and use  localhost  as the address. If the screen resembles the screenshot below, then you are done.", 
            "title": "Apache2 Installation"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#shibboleth-and-apache-configuration", 
            "text": "Change the permission of Apache Installation Directory, provide  write  access.    httpd.conf configuration    Change:  \"ServerName localhost:80\"  (for your local testing)    Copy apache22.conf from Shibboleth directory to  ~/apache/conf/extra/    Shibboleth2.xml configuration    Change: Host name =  \"localhost\"  (for local testing)    Change: entityID =  \"https://localhost/shibboleth\"  (for local testing)    Change: ApplicationOverride id =  \"admin\"    Reboot your Windows box    Test SP installation with Windows and Apache.  Open Web browser and insert the address :  localhost/Shibboleth.sso/Status  If the screen below resembles the screen on your browser, then you are done with your SP installation in Windows through Apache2", 
            "title": "Shibboleth and Apache Configuration"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#iis7-installation", 
            "text": "Start --  Control Panel --  Programs --   \"Turn Windows Features on or off\"   Select (i) IIS, (ii) Web Management Tools, (iii) II6 Management Compatiability, (iv) IIS Management Console, (v) IIS Management Scripts and Tools, (vi) IIS Management Service  Select (i) World Wide Web Service, (ii) CGI, (iii) ISAPI Filters, (iv) ISAPI Extenstions and press  OK .    Test if IIS7 is installed in your system with  127.0.0.1  in the web browser.    Reboot the system.", 
            "title": "IIS7 Installation"
        }, 
        {
            "location": "/admin-guide/saml/saml-sp-configuration/#isapi-filter-configuration", 
            "text": "Open IIS Manager [Start --  Administrative Tools --  Internet Information Service (IIS) Manager]    Double click on  \"ISAPI and CGI Restrictions\"     Add New Filter  a.      1.Click Actions --  Add (upper right corner)\n    2.Select  \\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll \n    3.Description:  \"Shibboleth\" \n    4.Click  \"Allow\"  (from right hand side)\n      b.  Back to IIS Manager --  ISAPI Filters. \nClick  \"Add\"  (upper right corner)  Filter name: Shibboleth  Executable:  \\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll     SSO file extension mapping\n  a. Click on  \"Handling Mapping\"  from main page    1.Click Actions --  Add (upper right corner)\n  b. Click  \"Add Script Map\"  from Action \n  c. Request Path  \"*.sso\" \n  d. Executable should be pointed to  \"isapi_shib.dll\"     Restart IIS    Check Status    Check your status by typing  \"http://127.0.0.1/Shibboleth.sso/Status\"  in the Web Browser. If it diplays an XML document, then the Shibboleth SP Installation in Windows IIS7 is complete.   If you want to establish SSO with your site, then you need an Identity Provider, their metadata and certificates.", 
            "title": "ISAPI Filter Configuration"
        }, 
        {
            "location": "/reference/api/id-generation/", 
            "text": "API Document\n\n\n/id\n\n\nOverview\n\n\n/id/{prefix}/{type}/\n\n\ngenerateHtmlInum\n\n\nGET\n \n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\nGenerates ID for given prefix and type.\n\n\nURL\n\n\nhttp://gluu.org/id/{prefix}/{type}/\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nprefix\n\n        \ntrue\n\n        \nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n        \nstring\n\n    \n\n    \n\n        \ntype\n\n        \ntrue\n\n        \nType of id\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\ngenerateXmlInum\n\n\nGET\n \n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\nGenerates ID for given prefix and type.\n\n\nURL\n\n\nhttp://gluu.org/id/{prefix}/{type}/\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nprefix\n\n        \ntrue\n\n        \nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n        \nstring\n\n    \n\n    \n\n        \ntype\n\n        \ntrue\n\n        \nType of id\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\ngenerateTextInum\n\n\nGET\n \n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\nGenerates ID for given prefix and type.\n\n\nURL\n\n\nhttp://gluu.org/id/{prefix}/{type}/\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nprefix\n\n        \ntrue\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \ntype\n\n        \ntrue\n\n        \n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\ngenerateJsonInum\n\n\nGET\n \n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\nGenerates ID for given prefix and type.\n\n\nURL\n\n\nhttp://gluu.org/id/{prefix}/{type}/\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nprefix\n\n        \ntrue\n\n        \nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n        \nstring\n\n    \n\n    \n\n        \ntype\n\n        \ntrue\n\n        \nType of id\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\nData Types", 
            "title": "Id generation"
        }, 
        {
            "location": "/reference/api/id-generation/#api-document", 
            "text": "/id  Overview  /id/{prefix}/{type}/  generateHtmlInum  GET   /id/{prefix}/{type}/  Generates ID for given prefix and type.\nGenerates ID for given prefix and type.  URL  http://gluu.org/id/{prefix}/{type}/  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         prefix \n         true \n         Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000 \n         string \n     \n     \n         type \n         true \n         Type of id \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  String[Response]  Errors  \n     \n         Status Code \n         Reason \n        generateXmlInum  GET   /id/{prefix}/{type}/  Generates ID for given prefix and type.\nGenerates ID for given prefix and type.  URL  http://gluu.org/id/{prefix}/{type}/  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         prefix \n         true \n         Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000 \n         string \n     \n     \n         type \n         true \n         Type of id \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  String[Response]  Errors  \n     \n         Status Code \n         Reason \n        generateTextInum  GET   /id/{prefix}/{type}/  Generates ID for given prefix and type.\nGenerates ID for given prefix and type.  URL  http://gluu.org/id/{prefix}/{type}/  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         prefix \n         true \n         \n         string \n     \n     \n         type \n         true \n         \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  String[Response]  Errors  \n     \n         Status Code \n         Reason \n        generateJsonInum  GET   /id/{prefix}/{type}/  Generates ID for given prefix and type.\nGenerates ID for given prefix and type.  URL  http://gluu.org/id/{prefix}/{type}/  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         prefix \n         true \n         Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000 \n         string \n     \n     \n         type \n         true \n         Type of id \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  String[Response]  Errors  \n     \n         Status Code \n         Reason", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/id-generation/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/oic-authorization/", 
            "text": "API Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/authorize\n\n\nrequestAuthorizationPost\n\n\nPOST\n \n/oxauth/authorize\n\n\nPerforms authorization.\nThe Authorization Endpoint performs Authentication of the End-User.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/authorize\n\n\n\nParameters\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nscope\n\n        \ntrue\n\n        \nOpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n\n        \nstring\n\n    \n\n    \n\n        \nresponse_type\n\n        \ntrue\n\n        \nOAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.\n\n        \nstring\n\n    \n\n    \n\n        \nclient_id\n\n        \ntrue\n\n        \nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\n        \nstring\n\n    \n\n    \n\n        \nredirect_uri\n\n        \ntrue\n\n        \nRedirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider\n\n        \nstring\n\n    \n\n    \n\n        \nstate\n\n        \nfalse\n\n        \nOpaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.\n\n        \nstring\n\n    \n\n    \n\n        \nnonce\n\n        \nfalse\n\n        \nString value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values.\n\n        \nstring\n\n    \n\n    \n\n        \ndisplay\n\n        \nfalse\n\n        \nASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page, popup, touch, wap\n\n        \nstring\n\n    \n\n    \n\n        \nprompt\n\n        \nfalse\n\n        \nSpace delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The defined values are: none, login, consent, select_account\n\n        \nstring\n\n    \n\n    \n\n        \nmax_age\n\n        \nfalse\n\n        \nMaximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.\n\n        \nint\n\n    \n\n    \n\n        \nui_locales\n\n        \nfalse\n\n        \nEnd-User\ns preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \nfr-CA fr en\n represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.\n\n        \nstring\n\n    \n\n    \n\n        \nid_token_hint\n\n        \nfalse\n\n        \nID Token previously issued by the Authorization Server being passed as a hint about the End-User\ns current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n\n        \nstring\n\n    \n\n    \n\n        \nlogin_hint\n\n        \nfalse\n\n        \nHint to the Authorization Server about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP\ns discretion.\n\n        \nstring\n\n    \n\n    \n\n        \nacr_values\n\n        \nfalse\n\n        \nRequested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.\n\n        \nstring\n\n    \n\n    \n\n        \namr_values\n\n        \nfalse\n\n        \nAMR Values\n\n        \nstring\n\n    \n\n    \n\n        \nrequest\n\n        \nfalse\n\n        \nThis parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in Section 6.1. It represents the request as a JWT whose Claims are the request parameters.\n\n        \nstring\n\n    \n\n    \n\n        \nrequest_uri\n\n        \nfalse\n\n        \nThis parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.\n\n        \nstring\n\n    \n\n    \n\n        \nrequest_session_id\n\n        \nfalse\n\n        \nRequest session id\n\n        \nstring\n\n    \n\n    \n\n        \nsession_id\n\n        \nfalse\n\n        \nSession id of this call\n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nfalse\n\n        \nAccess token\n\n        \nstring\n\n    \n\n    \n\n        \norigin_headers\n\n        \nfalse\n\n        \nOrigin headers. Used in custom workflows.\n\n        \nstring\n\n    \n\n\n\n- query\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nresponse_mode\n\n        \nfalse\n\n        \nInforms the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n302\n\n            \ninteraction_required\n    The Authorization Server requires End-User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User interaction. \n\n        \n\n        \n\n            \n302\n\n            \nlogin_required\n    The Authorization Server requires End-User authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User authentication. \n\n        \n\n        \n\n            \n302\n\n            \naccount_selection_required\n    The End-User is REQUIRED to select a session at the Authorization Server. The End-User MAY be authenticated at the Authorization Server with different associated accounts, but the End-User did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use. \n\n        \n\n        \n\n            \n302\n\n            \nconsent_required\n    The Authorization Server requires End-User consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User consent. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_object\n    The request parameter contains an invalid Request Object. \n\n        \n\n        \n\n            \n302\n\n            \nrequest_not_supported\n    The OP does not support use of the request parameter\n\n        \n\n        \n\n            \n302\n\n            \nrequest_uri_not_supported\n    The OP does not support use of the request_uri parameter\n\n        \n\n        \n\n            \n302\n\n            \nregistration_not_supported\n    The OP does not support use of the registration parameter\n\n        \n\n\n\n\n\n\nrequestAuthorizationGet\n\n\nGET\n \n/oxauth/authorize\n\n\nPerforms authorization.\nThe Authorization Endpoint performs Authentication of the End-User.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/authorize\n\n\n\nParameters\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nscope\n\n        \ntrue\n\n        \nOpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n\n        \nstring\n\n    \n\n    \n\n        \nresponse_type\n\n        \ntrue\n\n        \nOAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.\n\n        \nstring\n\n    \n\n    \n\n        \nclient_id\n\n        \ntrue\n\n        \nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\n        \nstring\n\n    \n\n    \n\n        \nredirect_uri\n\n        \ntrue\n\n        \nRedirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider\n\n        \nstring\n\n    \n\n    \n\n        \nstate\n\n        \nfalse\n\n        \nOpaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.\n\n        \nstring\n\n    \n\n    \n\n        \nresponse_mode\n\n        \nfalse\n\n        \nInforms the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.\n\n        \nstring\n\n    \n\n    \n\n        \nnonce\n\n        \nfalse\n\n        \nString value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values.\n\n        \nstring\n\n    \n\n    \n\n        \ndisplay\n\n        \nfalse\n\n        \nASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page, popup, touch, wap\n\n        \nstring\n\n    \n\n    \n\n        \nprompt\n\n        \nfalse\n\n        \nSpace delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The defined values are: none, login, consent, select_account\n\n        \nstring\n\n    \n\n    \n\n        \nmax_age\n\n        \nfalse\n\n        \nMaximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.\n\n        \nint\n\n    \n\n    \n\n        \nui_locales\n\n        \nfalse\n\n        \nEnd-User\ns preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \nfr-CA fr en\n represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.\n\n        \nstring\n\n    \n\n    \n\n        \nid_token_hint\n\n        \nfalse\n\n        \nID Token previously issued by the Authorization Server being passed as a hint about the End-User\ns current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n\n        \nstring\n\n    \n\n    \n\n        \nlogin_hint\n\n        \nfalse\n\n        \nHint to the Authorization Server about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP\ns discretion.\n\n        \nstring\n\n    \n\n    \n\n        \nacr_values\n\n        \nfalse\n\n        \nRequested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.\n\n        \nstring\n\n    \n\n    \n\n        \namr_values\n\n        \nfalse\n\n        \nAMR Values\n\n        \nstring\n\n    \n\n    \n\n        \nrequest\n\n        \nfalse\n\n        \nThis parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in Section 6.1. It represents the request as a JWT whose Claims are the request parameters.\n\n        \nstring\n\n    \n\n    \n\n        \nrequest_uri\n\n        \nfalse\n\n        \nThis parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.\n\n        \nstring\n\n    \n\n    \n\n        \nrequest_session_id\n\n        \nfalse\n\n        \nRequest session id\n\n        \nstring\n\n    \n\n    \n\n        \nsession_id\n\n        \nfalse\n\n        \nSession id of this call\n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nfalse\n\n        \nAccess token\n\n        \nstring\n\n    \n\n    \n\n        \norigin_headers\n\n        \nfalse\n\n        \nOrigin headers. Used in custom workflows.\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n302\n\n            \ninteraction_required\n    The Authorization Server requires End-User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User interaction. \n\n        \n\n        \n\n            \n302\n\n            \nlogin_required\n    The Authorization Server requires End-User authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User authentication. \n\n        \n\n        \n\n            \n302\n\n            \naccount_selection_required\n    The End-User is REQUIRED to select a session at the Authorization Server. The End-User MAY be authenticated at the Authorization Server with different associated accounts, but the End-User did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use. \n\n        \n\n        \n\n            \n302\n\n            \nconsent_required\n    The Authorization Server requires End-User consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User consent. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data. \n\n        \n\n        \n\n            \n302\n\n            \ninvalid_request_object\n    The request parameter contains an invalid Request Object. \n\n        \n\n        \n\n            \n302\n\n            \nrequest_not_supported\n    The OP does not support use of the request parameter\n\n        \n\n        \n\n            \n302\n\n            \nrequest_uri_not_supported\n    The OP does not support use of the request_uri parameter\n\n        \n\n        \n\n            \n302\n\n            \nregistration_not_supported\n    The OP does not support use of the registration parameter\n\n        \n\n\n\n\n\n\nData Types", 
            "title": "Oic authorization"
        }, 
        {
            "location": "/reference/api/oic-authorization/#api-document", 
            "text": "/oxauth  Overview  /oxauth/authorize  requestAuthorizationPost  POST   /oxauth/authorize  Performs authorization.\nThe Authorization Endpoint performs Authentication of the End-User.  URL  http://gluu.org/oxauth/authorize  Parameters    form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         scope \n         true \n         OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. \n         string \n     \n     \n         response_type \n         true \n         OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code. \n         string \n     \n     \n         client_id \n         true \n         OAuth 2.0 Client Identifier valid at the Authorization Server. \n         string \n     \n     \n         redirect_uri \n         true \n         Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider \n         string \n     \n     \n         state \n         false \n         Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie. \n         string \n     \n     \n         nonce \n         false \n         String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values. \n         string \n     \n     \n         display \n         false \n         ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page, popup, touch, wap \n         string \n     \n     \n         prompt \n         false \n         Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The defined values are: none, login, consent, select_account \n         string \n     \n     \n         max_age \n         false \n         Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value. \n         int \n     \n     \n         ui_locales \n         false \n         End-User s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value  fr-CA fr en  represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider. \n         string \n     \n     \n         id_token_hint \n         false \n         ID Token previously issued by the Authorization Server being passed as a hint about the End-User s current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value. \n         string \n     \n     \n         login_hint \n         false \n         Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP s discretion. \n         string \n     \n     \n         acr_values \n         false \n         Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter. \n         string \n     \n     \n         amr_values \n         false \n         AMR Values \n         string \n     \n     \n         request \n         false \n         This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in Section 6.1. It represents the request as a JWT whose Claims are the request parameters. \n         string \n     \n     \n         request_uri \n         false \n         This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters. \n         string \n     \n     \n         request_session_id \n         false \n         Request session id \n         string \n     \n     \n         session_id \n         false \n         Session id of this call \n         string \n     \n     \n         access_token \n         false \n         Access token \n         string \n     \n     \n         origin_headers \n         false \n         Origin headers. Used in custom workflows. \n         string \n      \n- query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         response_mode \n         false \n         Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type. \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             302 \n             interaction_required     The Authorization Server requires End-User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User interaction.  \n         \n         \n             302 \n             login_required     The Authorization Server requires End-User authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User authentication.  \n         \n         \n             302 \n             account_selection_required     The End-User is REQUIRED to select a session at the Authorization Server. The End-User MAY be authenticated at the Authorization Server with different associated accounts, but the End-User did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use.  \n         \n         \n             302 \n             consent_required     The Authorization Server requires End-User consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User consent.  \n         \n         \n             302 \n             invalid_request_uri     The request_uri in the Authorization Request returns an error or contains invalid data.  \n         \n         \n             302 \n             invalid_request_object     The request parameter contains an invalid Request Object.  \n         \n         \n             302 \n             request_not_supported     The OP does not support use of the request parameter \n         \n         \n             302 \n             request_uri_not_supported     The OP does not support use of the request_uri parameter \n         \n         \n             302 \n             registration_not_supported     The OP does not support use of the registration parameter \n            requestAuthorizationGet  GET   /oxauth/authorize  Performs authorization.\nThe Authorization Endpoint performs Authentication of the End-User.  URL  http://gluu.org/oxauth/authorize  Parameters    query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         scope \n         true \n         OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. \n         string \n     \n     \n         response_type \n         true \n         OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code. \n         string \n     \n     \n         client_id \n         true \n         OAuth 2.0 Client Identifier valid at the Authorization Server. \n         string \n     \n     \n         redirect_uri \n         true \n         Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider \n         string \n     \n     \n         state \n         false \n         Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie. \n         string \n     \n     \n         response_mode \n         false \n         Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type. \n         string \n     \n     \n         nonce \n         false \n         String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values. \n         string \n     \n     \n         display \n         false \n         ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page, popup, touch, wap \n         string \n     \n     \n         prompt \n         false \n         Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The defined values are: none, login, consent, select_account \n         string \n     \n     \n         max_age \n         false \n         Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value. \n         int \n     \n     \n         ui_locales \n         false \n         End-User s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value  fr-CA fr en  represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider. \n         string \n     \n     \n         id_token_hint \n         false \n         ID Token previously issued by the Authorization Server being passed as a hint about the End-User s current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value. \n         string \n     \n     \n         login_hint \n         false \n         Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP s discretion. \n         string \n     \n     \n         acr_values \n         false \n         Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter. \n         string \n     \n     \n         amr_values \n         false \n         AMR Values \n         string \n     \n     \n         request \n         false \n         This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in Section 6.1. It represents the request as a JWT whose Claims are the request parameters. \n         string \n     \n     \n         request_uri \n         false \n         This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters. \n         string \n     \n     \n         request_session_id \n         false \n         Request session id \n         string \n     \n     \n         session_id \n         false \n         Session id of this call \n         string \n     \n     \n         access_token \n         false \n         Access token \n         string \n     \n     \n         origin_headers \n         false \n         Origin headers. Used in custom workflows. \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             302 \n             interaction_required     The Authorization Server requires End-User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User interaction.  \n         \n         \n             302 \n             login_required     The Authorization Server requires End-User authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User authentication.  \n         \n         \n             302 \n             account_selection_required     The End-User is REQUIRED to select a session at the Authorization Server. The End-User MAY be authenticated at the Authorization Server with different associated accounts, but the End-User did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use.  \n         \n         \n             302 \n             consent_required     The Authorization Server requires End-User consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User consent.  \n         \n         \n             302 \n             invalid_request_uri     The request_uri in the Authorization Request returns an error or contains invalid data.  \n         \n         \n             302 \n             invalid_request_object     The request parameter contains an invalid Request Object.  \n         \n         \n             302 \n             request_not_supported     The OP does not support use of the request parameter \n         \n         \n             302 \n             request_uri_not_supported     The OP does not support use of the request_uri parameter \n         \n         \n             302 \n             registration_not_supported     The OP does not support use of the registration parameter", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/oic-authorization/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/oic-end-session/", 
            "text": "API Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/end_session\n\n\nrequestEndSession\n\n\nGET\n \n/oxauth/end_session\n\n\nEnd current Connect session.\nEnd current Connect session.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/end_session\n\n\n\nParameters\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nid_token_hint\n\n        \ntrue\n\n        \nPreviously issued ID Token (id_token) passed to the logout endpoint as a hint about the End-User\ns current authenticated session with the Client. This is used as an indication of the identity of the End-User that the RP is requesting be logged out by the OP. The OP need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n\n        \nstring\n\n    \n\n    \n\n        \npost_logout_redirect_uri\n\n        \nfalse\n\n        \nURL to which the RP is requesting that the End-User\ns User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout.\n\n        \nstring\n\n    \n\n    \n\n        \nstate\n\n        \nfalse\n\n        \nOpaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP.\n\n        \nstring\n\n    \n\n    \n\n        \nsession_id\n\n        \nfalse\n\n        \nSession ID\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n400\n\n            \ninvalid_grant\nThe provided access token is invalid, or was issued to another client.\n\n        \n\n\n\n\n\n\nData Types", 
            "title": "Oic end session"
        }, 
        {
            "location": "/reference/api/oic-end-session/#api-document", 
            "text": "/oxauth  Overview  /oxauth/end_session  requestEndSession  GET   /oxauth/end_session  End current Connect session.\nEnd current Connect session.  URL  http://gluu.org/oxauth/end_session  Parameters    query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         id_token_hint \n         true \n         Previously issued ID Token (id_token) passed to the logout endpoint as a hint about the End-User s current authenticated session with the Client. This is used as an indication of the identity of the End-User that the RP is requesting be logged out by the OP. The OP need not be listed as an audience of the ID Token when it is used as an id_token_hint value. \n         string \n     \n     \n         post_logout_redirect_uri \n         false \n         URL to which the RP is requesting that the End-User s User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout. \n         string \n     \n     \n         state \n         false \n         Opaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP. \n         string \n     \n     \n         session_id \n         false \n         Session ID \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             400 \n             invalid_grant The provided access token is invalid, or was issued to another client.", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/oic-end-session/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/oic-register-client/", 
            "text": "API Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/userinfo\n\n\nrequestUserInfoPost\n\n\nPOST\n \n/oxauth/userinfo\n\n\nReturns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/userinfo\n\n\n\nParameters\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \naccess_token\n\n        \ntrue\n\n        \nOAuth 2.0 Access Token.\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \nscope\n attribute with the scope necessary to access the protected resource.\n\n        \n\n\n\n\n\n\nrequestUserInfoGet\n\n\nGET\n \n/oxauth/userinfo\n\n\nReturns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/userinfo\n\n\n\nParameters\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \naccess_token\n\n        \ntrue\n\n        \nOAuth 2.0 Access Token.\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \nscope\n attribute with the scope necessary to access the protected resource.\n\n        \n\n\n\n\n\n\nData Types", 
            "title": "Oic register client"
        }, 
        {
            "location": "/reference/api/oic-register-client/#api-document", 
            "text": "/oxauth  Overview  /oxauth/userinfo  requestUserInfoPost  POST   /oxauth/userinfo  Returns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.  URL  http://gluu.org/oxauth/userinfo  Parameters    form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         access_token \n         true \n         OAuth 2.0 Access Token. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token The access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope The request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the  scope  attribute with the scope necessary to access the protected resource. \n            requestUserInfoGet  GET   /oxauth/userinfo  Returns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.  URL  http://gluu.org/oxauth/userinfo  Parameters    query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         access_token \n         true \n         OAuth 2.0 Access Token. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token The access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope The request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the  scope  attribute with the scope necessary to access the protected resource.", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/oic-register-client/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/oic-token/", 
            "text": "API Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/token\n\n\nrequestAccessToken\n\n\nPOST\n \n/oxauth/token\n\n\nTo obtain an Access Token, an ID Token, and optionally a Refresh Token, the RP (Client) sends a Token Request to the Token Endpoint to obtain a Token Response\nTo obtain an Access Token, an ID Token, and optionally a Refresh Token, the RP (Client) sends a Token Request to the Token Endpoint to obtain a Token Response\n\n\nURL\n\n\nhttp://gluu.org/oxauth/token\n\n\n\nParameters\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \ngrant_type\n\n        \ntrue\n\n        \nGrant type value, one of these: authorization_code, implicit, password, client_credentials, refresh_token as described in OAuth 2.0 [RFC6749]\n\n        \nstring\n\n    \n\n    \n\n        \ncode\n\n        \nfalse\n\n        \nCode which is returned by authorization endpoint. (For grant_type=authorization_code)\n\n        \nstring\n\n    \n\n    \n\n        \nredirect_uri\n\n        \nfalse\n\n        \nRedirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider\n\n        \nstring\n\n    \n\n    \n\n        \nusername\n\n        \nfalse\n\n        \nEnd-User username.\n\n        \nstring\n\n    \n\n    \n\n        \npassword\n\n        \nfalse\n\n        \nEnd-User password.\n\n        \nstring\n\n    \n\n    \n\n        \nscope\n\n        \nfalse\n\n        \nOpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n\n        \nstring\n\n    \n\n    \n\n        \nassertion\n\n        \nfalse\n\n        \nAssertion\n\n        \nstring\n\n    \n\n    \n\n        \nrefresh_token\n\n        \nfalse\n\n        \nRefresh token\n\n        \nstring\n\n    \n\n    \n\n        \noxauth_exchange_token\n\n        \nfalse\n\n        \noxauth_exchange_token\n\n        \nstring\n\n    \n\n    \n\n        \nclient_id\n\n        \nfalse\n\n        \nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\n        \nstring\n\n    \n\n    \n\n        \nclient_secret\n\n        \nfalse\n\n        \nThe client secret.  The client MAY omit the parameter if the client secret is an empty string.\n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\n The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials,\n utilizes more than one mechanism for authenticating the client, or is otherwise malformed.\n\n        \n\n        \n\n            \n400\n\n            \ninvalid_client\nClient authentication failed (e.g., unknown client, no client authentication included, or unsupported\nauthentication method).  The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate\nwhich HTTP authentication schemes are supported.  If the client attempted to authenticate via the \nAuthorization\nrequest header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and\ninclude the \nWWW-Authenticate\n response header field matching the authentication scheme used by the client.\n\n        \n\n        \n\n            \n400\n\n            \ninvalid_grant\n The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is\n invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.\n\n        \n\n        \n\n            \n400\n\n            \nunauthorized_client\nThe authenticated client is not authorized to use this authorization grant type.\n\n        \n\n        \n\n            \n400\n\n            \nunsupported_grant_type\nThe authorization grant type is not supported by the authorization server.\n\n        \n\n        \n\n            \n400\n\n            \n invalid_scope\nThe requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.\n\n        \n\n\n\n\n\n\nData Types", 
            "title": "Oic token"
        }, 
        {
            "location": "/reference/api/oic-token/#api-document", 
            "text": "/oxauth  Overview  /oxauth/token  requestAccessToken  POST   /oxauth/token  To obtain an Access Token, an ID Token, and optionally a Refresh Token, the RP (Client) sends a Token Request to the Token Endpoint to obtain a Token Response\nTo obtain an Access Token, an ID Token, and optionally a Refresh Token, the RP (Client) sends a Token Request to the Token Endpoint to obtain a Token Response  URL  http://gluu.org/oxauth/token  Parameters    form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         grant_type \n         true \n         Grant type value, one of these: authorization_code, implicit, password, client_credentials, refresh_token as described in OAuth 2.0 [RFC6749] \n         string \n     \n     \n         code \n         false \n         Code which is returned by authorization endpoint. (For grant_type=authorization_code) \n         string \n     \n     \n         redirect_uri \n         false \n         Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider \n         string \n     \n     \n         username \n         false \n         End-User username. \n         string \n     \n     \n         password \n         false \n         End-User password. \n         string \n     \n     \n         scope \n         false \n         OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. \n         string \n     \n     \n         assertion \n         false \n         Assertion \n         string \n     \n     \n         refresh_token \n         false \n         Refresh token \n         string \n     \n     \n         oxauth_exchange_token \n         false \n         oxauth_exchange_token \n         string \n     \n     \n         client_id \n         false \n         OAuth 2.0 Client Identifier valid at the Authorization Server. \n         string \n     \n     \n         client_secret \n         false \n         The client secret.  The client MAY omit the parameter if the client secret is an empty string. \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request  The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials,  utilizes more than one mechanism for authenticating the client, or is otherwise malformed. \n         \n         \n             400 \n             invalid_client Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).  The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported.  If the client attempted to authenticate via the  Authorization request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the  WWW-Authenticate  response header field matching the authentication scheme used by the client. \n         \n         \n             400 \n             invalid_grant  The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is  invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client. \n         \n         \n             400 \n             unauthorized_client The authenticated client is not authorized to use this authorization grant type. \n         \n         \n             400 \n             unsupported_grant_type The authorization grant type is not supported by the authorization server. \n         \n         \n             400 \n              invalid_scope The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/oic-token/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/oic-userinfo/", 
            "text": "API Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/userinfo\n\n\nrequestUserInfoPost\n\n\nPOST\n \n/oxauth/userinfo\n\n\nReturns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/userinfo\n\n\n\nParameters\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \naccess_token\n\n        \ntrue\n\n        \nOAuth 2.0 Access Token.\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \nscope\n attribute with the scope necessary to access the protected resource.\n\n        \n\n\n\n\n\n\nrequestUserInfoGet\n\n\nGET\n \n/oxauth/userinfo\n\n\nReturns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/userinfo\n\n\n\nParameters\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \naccess_token\n\n        \ntrue\n\n        \nOAuth 2.0 Access Token.\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n400\n\n            \ninvalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n        \n\n        \n\n            \n401\n\n            \ninvalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n        \n\n        \n\n            \n403\n\n            \ninsufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \nscope\n attribute with the scope necessary to access the protected resource.\n\n        \n\n\n\n\n\n\nData Types", 
            "title": "Oic userinfo"
        }, 
        {
            "location": "/reference/api/oic-userinfo/#api-document", 
            "text": "/oxauth  Overview  /oxauth/userinfo  requestUserInfoPost  POST   /oxauth/userinfo  Returns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.  URL  http://gluu.org/oxauth/userinfo  Parameters    form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         access_token \n         true \n         OAuth 2.0 Access Token. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token The access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope The request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the  scope  attribute with the scope necessary to access the protected resource. \n            requestUserInfoGet  GET   /oxauth/userinfo  Returns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.  URL  http://gluu.org/oxauth/userinfo  Parameters    query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         access_token \n         true \n         OAuth 2.0 Access Token. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  JSON[Response]  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             400 \n             invalid_request The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code. \n         \n         \n             401 \n             invalid_token The access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request. \n         \n         \n             403 \n             insufficient_scope The request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the  scope  attribute with the scope necessary to access the protected resource.", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/oic-userinfo/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/uma-create-rpt/", 
            "text": "API Document\n\n\n/requester/rpt\n\n\nOverview\n\n\n/requester/rpt\n\n\ngetRequesterPermissionToken\n\n\nPOST\n \n/requester/rpt\n\n\nThe endpoint at which the requester asks the AM to issue an RPT\n\n\nURL\n\n\nhttp://gluu.org/requester/rpt\n\n\n\nParameters\n\n\n\n\n\n\nheader\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \nHost\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\n\n\nData Types", 
            "title": "Uma create rpt"
        }, 
        {
            "location": "/reference/api/uma-create-rpt/#api-document", 
            "text": "/requester/rpt  Overview  /requester/rpt  getRequesterPermissionToken  POST   /requester/rpt  The endpoint at which the requester asks the AM to issue an RPT  URL  http://gluu.org/requester/rpt  Parameters    header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n     \n     \n         Host \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/uma-create-rpt/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/uma-discovery/", 
            "text": "API Document\n\n\n/.well-known/uma-configuration\n\n\nOverview\n\n\n/oxauth/uma-configuration\n\n\ngetConfiguration\n\n\nGET\n \n/oxauth/uma-configuration\n\n\nProvides configuration data as json document. It contains options and endpoints supported by the authorization server.\n\n\nURL\n\n\nhttp://gluu.org/oxauth/uma-configuration\n\n\n\nParameters\n\n\nResponse\n\n\nUmaConfiguration\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n500\n\n            \nFailed to build Uma configuration json object.\n\n        \n\n\n\n\n\n\nData Types\n\n\nUmaConfiguration\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n        \n\n            \nArray[string]\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nArray[string]\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nArray[string]\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nArray[string]\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \nrequired\n\n            \n-\n\n            \nA URI indicating the party operating the authorization server.\n\n            \nA URI indicating the party operating the authorization server.\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nArray[string]\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nArray[string]\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \nrequired\n\n            \n-\n\n            \nThe version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".\n\n            \nThe version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".", 
            "title": "Uma discovery"
        }, 
        {
            "location": "/reference/api/uma-discovery/#api-document", 
            "text": "/.well-known/uma-configuration  Overview  /oxauth/uma-configuration  getConfiguration  GET   /oxauth/uma-configuration  Provides configuration data as json document. It contains options and endpoints supported by the authorization server.  URL  http://gluu.org/oxauth/uma-configuration  Parameters  Response  UmaConfiguration  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             500 \n             Failed to build Uma configuration json object.", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/uma-discovery/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/uma-discovery/#umaconfiguration", 
            "text": "type \n         required \n         access \n         description \n         notes \n     \n         \n             Array[string] \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             Array[string] \n             optional \n             - \n             - \n             - \n         \n         \n             Array[string] \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             Array[string] \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             required \n             - \n             A URI indicating the party operating the authorization server. \n             A URI indicating the party operating the authorization server. \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             Array[string] \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             Array[string] \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             required \n             - \n             The version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\". \n             The version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".", 
            "title": "UmaConfiguration"
        }, 
        {
            "location": "/reference/api/uma-permission-registration/", 
            "text": "API Document\n\n\n/host/rsrc_pr\n\n\nOverview\n\n\n/host/rsrc_pr\n\n\nregisterResourceSetPermission\n\n\nPOST\n \n/host/rsrc_pr\n\n\nRegisters permission using the POST method\nThe resource server uses the POST method at the endpoint. The body of the HTTP request message contains a JSON object providing the requested permission, using a format derived from the scope description format specified in [OAuth-resource-reg], as follows. The object has the following properties:\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc_pr\n\n\n\nParameters\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \ntrue\n\n        \nThe identifier for a resource set to which this client is seeking access. The identifier MUST correspond to a resource set that was previously registered.\n\n        \nRegisterPermissionRequest\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \nHost\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n        \n\n            \n400\n\n            \nBad Request\n\n        \n\n\n\n\n\n\nData Types\n\n\nRegisterPermissionRequest\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n        \n\n            \nDate\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nArray[string]\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nDate\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nDate\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-", 
            "title": "Uma permission registration"
        }, 
        {
            "location": "/reference/api/uma-permission-registration/#api-document", 
            "text": "/host/rsrc_pr  Overview  /host/rsrc_pr  registerResourceSetPermission  POST   /host/rsrc_pr  Registers permission using the POST method\nThe resource server uses the POST method at the endpoint. The body of the HTTP request message contains a JSON object providing the requested permission, using a format derived from the scope description format specified in [OAuth-resource-reg], as follows. The object has the following properties:  URL  http://gluu.org/host/rsrc_pr  Parameters    body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         true \n         The identifier for a resource set to which this client is seeking access. The identifier MUST correspond to a resource set that was previously registered. \n         RegisterPermissionRequest \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n     \n     \n         Host \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized \n         \n         \n             400 \n             Bad Request", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/uma-permission-registration/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/uma-permission-registration/#registerpermissionrequest", 
            "text": "type \n         required \n         access \n         description \n         notes \n     \n         \n             Date \n             optional \n             - \n             - \n             - \n         \n         \n             Array[string] \n             optional \n             - \n             - \n             - \n         \n         \n             Date \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             Date \n             optional \n             - \n             - \n             -", 
            "title": "RegisterPermissionRequest"
        }, 
        {
            "location": "/reference/api/uma-resource-registration/", 
            "text": "API Document\n\n\n/host/rsrc/resource_set\n\n\nOverview\n\n\n/host/rsrc/resource_set{rsid}\n\n\ndeleteResourceSet\n\n\nDELETE\n \n/host/rsrc/resource_set{rsid}\n\n\nDeletes a previously registered resource set description using the DELETE method.\nDeletes a previously registered resource set description using the DELETE method, thereby removing it from the authorization server's protection regime.\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set{rsid}\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nrsid\n\n        \ntrue\n\n        \nResource set description ID\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nResourceSet\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\n\n\ngetResourceSet\n\n\nGET\n \n/host/rsrc/resource_set{rsid}\n\n\nReads a previously registered resource set description using the GET method.\nReads a previously registered resource set description using the GET method. If the request is successful, the authorization server MUST respond with a status message that includes a body containing the referenced resource set description, along with an \"_id\" property.\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set{rsid}\n\n\n\nParameters\n\n\n\n\n\n\npath\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nrsid\n\n        \ntrue\n\n        \nResource set description object ID\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nResourceSet\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\n\n\nupdateResourceSet\n\n\nPUT\n \n/host/rsrc/resource_set{rsid}\n\n\nUpdates a previously registered resource set description using the PUT method\nUpdates a previously registered resource set description using the PUT method. If the request is successful, the authorization server MUST respond with a status message that includes an \"_id\" property.\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set{rsid}\n\n\n\nParameters\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \ntrue\n\n        \nResource set description JSON object\n\n        \nResourceSet\n\n    \n\n\n\n- path\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nrsid\n\n        \ntrue\n\n        \nResource set description ID\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\n\n\n/host/rsrc/resource_set\n\n\ngetResourceSetList\n\n\nGET\n \n/host/rsrc/resource_set\n\n\nLists all previously registered resource set identifiers for this user using the GET method. The authorization server MUST return the list in the form of a JSON array of {rsid} string values.\n\n\nThe resource server uses this method as a first step in checking whether its understanding of protected resources is in full synchronization with the authorization server's understanding.\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n\n\n\n\n\n\nquery\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nscope\n\n        \nfalse\n\n        \nScope uri\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\nResourceSet\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\n\n\ncreateResourceSet\n\n\nPOST\n \n/host/rsrc/resource_set\n\n\nAdds a new resource set description using the POST method\nAdds a new resource set description using the POST method. If the request is successful, the authorization server MUST respond with a status message that includes an _id property.\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \ntrue\n\n        \nResource set description\n\n        \nResourceSet\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\n\n\nunsupportedHeadMethod\n\n\nHEAD\n \n/host/rsrc/resource_set\n\n\nNot allowed\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\nunsupportedOptionsMethod\n\n\nOPTIONS\n \n/host/rsrc/resource_set\n\n\nNot allowed\n\n\nURL\n\n\nhttp://gluu.org/host/rsrc/resource_set\n\n\n\nParameters\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n\n\n\n\n\nData Types\n\n\nResourceSet\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nArray[string]\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-", 
            "title": "Uma resource registration"
        }, 
        {
            "location": "/reference/api/uma-resource-registration/#api-document", 
            "text": "/host/rsrc/resource_set  Overview  /host/rsrc/resource_set{rsid}  deleteResourceSet  DELETE   /host/rsrc/resource_set{rsid}  Deletes a previously registered resource set description using the DELETE method.\nDeletes a previously registered resource set description using the DELETE method, thereby removing it from the authorization server's protection regime.  URL  http://gluu.org/host/rsrc/resource_set{rsid}  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         rsid \n         true \n         Resource set description ID \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  ResourceSet  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized \n            getResourceSet  GET   /host/rsrc/resource_set{rsid}  Reads a previously registered resource set description using the GET method.\nReads a previously registered resource set description using the GET method. If the request is successful, the authorization server MUST respond with a status message that includes a body containing the referenced resource set description, along with an \"_id\" property.  URL  http://gluu.org/host/rsrc/resource_set{rsid}  Parameters    path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         rsid \n         true \n         Resource set description object ID \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  ResourceSet  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized \n            updateResourceSet  PUT   /host/rsrc/resource_set{rsid}  Updates a previously registered resource set description using the PUT method\nUpdates a previously registered resource set description using the PUT method. If the request is successful, the authorization server MUST respond with a status message that includes an \"_id\" property.  URL  http://gluu.org/host/rsrc/resource_set{rsid}  Parameters    body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         true \n         Resource set description JSON object \n         ResourceSet \n      \n- path  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         rsid \n         true \n         Resource set description ID \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized \n            /host/rsrc/resource_set  getResourceSetList  GET   /host/rsrc/resource_set  Lists all previously registered resource set identifiers for this user using the GET method. The authorization server MUST return the list in the form of a JSON array of {rsid} string values.  The resource server uses this method as a first step in checking whether its understanding of protected resources is in full synchronization with the authorization server's understanding.  URL  http://gluu.org/host/rsrc/resource_set  Parameters    query  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         scope \n         false \n         Scope uri \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response  ResourceSet  Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized \n            createResourceSet  POST   /host/rsrc/resource_set  Adds a new resource set description using the POST method\nAdds a new resource set description using the POST method. If the request is successful, the authorization server MUST respond with a status message that includes an _id property.  URL  http://gluu.org/host/rsrc/resource_set  Parameters    body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         true \n         Resource set description \n         ResourceSet \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized \n            unsupportedHeadMethod  HEAD   /host/rsrc/resource_set  Not allowed  URL  http://gluu.org/host/rsrc/resource_set  Parameters  Response   Errors  \n     \n         Status Code \n         Reason \n        unsupportedOptionsMethod  OPTIONS   /host/rsrc/resource_set  Not allowed  URL  http://gluu.org/host/rsrc/resource_set  Parameters  Response   Errors  \n     \n         Status Code \n         Reason", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/uma-resource-registration/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/uma-resource-registration/#resourceset", 
            "text": "type \n         required \n         access \n         description \n         notes \n     \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             Array[string] \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             -", 
            "title": "ResourceSet"
        }, 
        {
            "location": "/reference/api/uma-rpt-status/", 
            "text": "API Document\n\n\n/rpt/status\n\n\nOverview\n\n\n/rpt/status\n\n\nrequestRptStatusGet\n\n\nGET\n \n/rpt/status\n\n\nNot allowed\n\n\nURL\n\n\nhttp://gluu.org/rpt/status\n\n\n\nParameters\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \ntoken\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \ntoken_type_hint\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n405\n\n            \nIntrospection of RPT is not allowed by GET HTTP method.\n\n        \n\n\n\n\n\n\nrequestRptStatus\n\n\nPOST\n \n/rpt/status\n\n\nThe resource server MUST determine a received RPT\ns status, including both whether it is active and, if so, its associated authorization data, before giving or refusing access to the client. An RPT is associated with a set of authorization data that governs whether the client is authorized for access. The token\ns nature and format are dictated by its profile; the profile might allow it to be self-contained, such that the resource server is able to determine its status locally, or might require or allow the resource server to make a run-time introspection request of the authorization server that issued the token.\nThe endpoint MAY allow other parameters to provide further context to\n   the query.  For instance, an authorization service may need to know\n   the IP address of the client accessing the protected resource in\n   order to determine the appropriateness of the token being presented.\n\n\nTo prevent unauthorized token scanning attacks, the endpoint MUST\n   also require some form of authorization to access this endpoint, such\n   as client authentication as described in OAuth 2.0 [RFC6749] or a\n   separate OAuth 2.0 access token such as the bearer token described in\n   OAuth 2.0 Bearer Token Usage [RFC6750].  The methods of managing and\n   validating these authentication credentials are out of scope of this\n   specification.\n\n\nURL\n\n\nhttp://gluu.org/rpt/status\n\n\n\nParameters\n\n\n\n\n\n\nform\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \ntoken\n\n        \ntrue\n\n        \nThe string value of the token.  For access tokens,\n      this is the \naccess_token\n value returned from the token endpoint\n      defined in OAuth 2.0 [RFC6749] section 5.1.  For refresh tokens,\n      this is the \nrefresh_token\n value returned from the token endpoint\n      as defined in OAuth 2.0 [RFC6749] section 5.1.  Other token types\n      are outside the scope of this specification.\n\n        \nstring\n\n    \n\n    \n\n        \ntoken_type_hint\n\n        \nfalse\n\n        \nA hint about the type of the token\n      submitted for introspection.  The protected resource re MAY pass\n      this parameter in order to help the authorization server to\n      optimize the token lookup.  If the server is unable to locate the\n      token using the given hint, it MUST extend its search across all\n      of its supported token types.  An authorization server MAY ignore\n      this parameter, particularly if it is able to detect the token\n      type automatically.  Values for this field are defined in OAuth\n      Token Revocation [RFC7009].\n\n        \nstring\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n\n\n\n\n\nData Types", 
            "title": "Uma rpt status"
        }, 
        {
            "location": "/reference/api/uma-rpt-status/#api-document", 
            "text": "/rpt/status  Overview  /rpt/status  requestRptStatusGet  GET   /rpt/status  Not allowed  URL  http://gluu.org/rpt/status  Parameters    form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         token \n         false \n         \n         string \n     \n     \n         token_type_hint \n         false \n         \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             405 \n             Introspection of RPT is not allowed by GET HTTP method. \n            requestRptStatus  POST   /rpt/status  The resource server MUST determine a received RPT s status, including both whether it is active and, if so, its associated authorization data, before giving or refusing access to the client. An RPT is associated with a set of authorization data that governs whether the client is authorized for access. The token s nature and format are dictated by its profile; the profile might allow it to be self-contained, such that the resource server is able to determine its status locally, or might require or allow the resource server to make a run-time introspection request of the authorization server that issued the token.\nThe endpoint MAY allow other parameters to provide further context to\n   the query.  For instance, an authorization service may need to know\n   the IP address of the client accessing the protected resource in\n   order to determine the appropriateness of the token being presented.  To prevent unauthorized token scanning attacks, the endpoint MUST\n   also require some form of authorization to access this endpoint, such\n   as client authentication as described in OAuth 2.0 [RFC6749] or a\n   separate OAuth 2.0 access token such as the bearer token described in\n   OAuth 2.0 Bearer Token Usage [RFC6750].  The methods of managing and\n   validating these authentication credentials are out of scope of this\n   specification.  URL  http://gluu.org/rpt/status  Parameters    form  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         token \n         true \n         The string value of the token.  For access tokens,       this is the  access_token  value returned from the token endpoint       defined in OAuth 2.0 [RFC6749] section 5.1.  For refresh tokens,       this is the  refresh_token  value returned from the token endpoint       as defined in OAuth 2.0 [RFC6749] section 5.1.  Other token types       are outside the scope of this specification. \n         string \n     \n     \n         token_type_hint \n         false \n         A hint about the type of the token       submitted for introspection.  The protected resource re MAY pass       this parameter in order to help the authorization server to       optimize the token lookup.  If the server is unable to locate the       token using the given hint, it MUST extend its search across all       of its supported token types.  An authorization server MAY ignore       this parameter, particularly if it is able to detect the token       type automatically.  Values for this field are defined in OAuth       Token Revocation [RFC7009]. \n         string \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             401 \n             Unauthorized", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/uma-rpt-status/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/uma-authorization-endpoint/", 
            "text": "API Document\n\n\n/requester/perm\n\n\nOverview\n\n\n/requester/perm\n\n\nrequestRptPermissionAuthorization\n\n\nPOST\n \n/requester/perm\n\n\nClient Requests Authorization Data\nOnce in possession of a permission ticket and an AAT for this authorization server, the client asks the authorization server to give it authorization data corresponding to that permission ticket. It performs a POST on the RPT endpoint, supplying its own AAT in the header and a JSON object in the body with a \"ticket\" property containing the ticket as its value.\nIf the client had included an RPT in its failed access attempt, It MAY also provide that RPT in an \"rpt\" property in its request to the authorization server.\nIn circumstances where the client needs to provide requesting party claims to the authorization server, it MAY also include a \"claim_tokens\" property in its request; see Section 3.4.1.2.1 for more information. The authorization server uses the ticket to look up the details of the previously registered requested permission, maps the requested permission to operative resource owner policies based on the resource set identifier and scopes associated with it, potentially requests additional information, and ultimately responds positively or negatively to the request for authorization data.\nThe authorization server bases the issuing of authorization data on resource owner policies. These policies thus amount to an asynchronous OAuth authorization grant. The authorization server is also free to enable the resource owner to set policies that require the owner to interact with the server in near-real time to provide consent subsequent to an access attempt. All such processes are outside the scope of this specification.\n\n\nURL\n\n\nhttp://gluu.org/requester/perm\n\n\n\nParameters\n\n\n\n\n\n\nbody\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nbody\n\n        \nfalse\n\n        \n\n        \nRptAuthorizationRequest\n\n    \n\n\n\n- header\n\n\n\n    \n\n        \nParameter\n\n        \nRequired\n\n        \nDescription\n\n        \nData Type\n\n    \n\n    \n\n        \nAuthorization\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n    \n\n        \nHost\n\n        \nfalse\n\n        \n\n        \nstring\n\n    \n\n\n\n\n\n\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code\n\n        \nReason\n\n    \n\n        \n\n            \n403\n\n            \nForbidden. Example of a \nneed_info\n response with a full set of \nerror_details\n hints:\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n...\n{\n \nerror\n: \nneed_info\n,\n \nerror_details\n: {\n   \nauthentication_context\n: {\n     \nrequired_acr\n: [\nhttps://example.com/acrs/LOA3.14159\n]\n   },\n   \nrequesting_party_claims\n: {\n     \nrequired_claims\n: [\n       {\n         \nname\n: \nemail23423453ou453\n,\n         \nfriendly_name\n: \nemail\n,\n         \nclaim_type\n: \nurn:oid:0.9.2342.19200300.100.1.3\n,\n         \nclaim_token_format\n: \n[\nhttp://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken\n],\n         \nissuer\n: [\nhttps://example.com/idp\n]\n       }\n     ],\n     \nredirect_user\n: true,\n     \nticket\n: \n016f84e8-f9b9-11e0-bd6f-0021cc6004de\n   }\n }\n}\n\n        \n\n        \n\n            \n401\n\n            \nUnauthorized\n\n        \n\n        \n\n            \n400\n\n            \nBad request\n\n        \n\n\n\n\n\n\nData Types\n\n\nClaimTokenList\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n        \n\n            \nboolean\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nint\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n\n\n\n\nRptAuthorizationRequest\n\n\n\n    \n\n        \ntype\n\n        \nrequired\n\n        \naccess\n\n        \ndescription\n\n        \nnotes\n\n    \n\n        \n\n            \nClaimTokenList\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-\n\n        \n\n        \n\n            \nstring\n\n            \noptional\n\n            \n-\n\n            \n-\n\n            \n-", 
            "title": "Uma authorization endpoint"
        }, 
        {
            "location": "/reference/api/uma-authorization-endpoint/#api-document", 
            "text": "/requester/perm  Overview  /requester/perm  requestRptPermissionAuthorization  POST   /requester/perm  Client Requests Authorization Data\nOnce in possession of a permission ticket and an AAT for this authorization server, the client asks the authorization server to give it authorization data corresponding to that permission ticket. It performs a POST on the RPT endpoint, supplying its own AAT in the header and a JSON object in the body with a \"ticket\" property containing the ticket as its value.\nIf the client had included an RPT in its failed access attempt, It MAY also provide that RPT in an \"rpt\" property in its request to the authorization server.\nIn circumstances where the client needs to provide requesting party claims to the authorization server, it MAY also include a \"claim_tokens\" property in its request; see Section 3.4.1.2.1 for more information. The authorization server uses the ticket to look up the details of the previously registered requested permission, maps the requested permission to operative resource owner policies based on the resource set identifier and scopes associated with it, potentially requests additional information, and ultimately responds positively or negatively to the request for authorization data.\nThe authorization server bases the issuing of authorization data on resource owner policies. These policies thus amount to an asynchronous OAuth authorization grant. The authorization server is also free to enable the resource owner to set policies that require the owner to interact with the server in near-real time to provide consent subsequent to an access attempt. All such processes are outside the scope of this specification.  URL  http://gluu.org/requester/perm  Parameters    body  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         body \n         false \n         \n         RptAuthorizationRequest \n      \n- header  \n     \n         Parameter \n         Required \n         Description \n         Data Type \n     \n     \n         Authorization \n         false \n         \n         string \n     \n     \n         Host \n         false \n         \n         string \n         Response   Errors  \n     \n         Status Code \n         Reason \n     \n         \n             403 \n             Forbidden. Example of a  need_info  response with a full set of  error_details  hints: HTTP/1.1 403 Forbidden Content-Type: application/json Cache-Control: no-store ... {   error :  need_info ,   error_details : {     authentication_context : {       required_acr : [ https://example.com/acrs/LOA3.14159 ]    },     requesting_party_claims : {       required_claims : [        {           name :  email23423453ou453 ,           friendly_name :  email ,           claim_type :  urn:oid:0.9.2342.19200300.100.1.3 ,           claim_token_format :  [ http://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken ],           issuer : [ https://example.com/idp ]        }      ],       redirect_user : true,       ticket :  016f84e8-f9b9-11e0-bd6f-0021cc6004de    }  } } \n         \n         \n             401 \n             Unauthorized \n         \n         \n             400 \n             Bad request", 
            "title": "API Document"
        }, 
        {
            "location": "/reference/api/uma-authorization-endpoint/#data-types", 
            "text": "", 
            "title": "Data Types"
        }, 
        {
            "location": "/reference/api/uma-authorization-endpoint/#claimtokenlist", 
            "text": "type \n         required \n         access \n         description \n         notes \n     \n         \n             boolean \n             optional \n             - \n             - \n             - \n         \n         \n             int \n             optional \n             - \n             - \n             -", 
            "title": "ClaimTokenList"
        }, 
        {
            "location": "/reference/api/uma-authorization-endpoint/#rptauthorizationrequest", 
            "text": "type \n         required \n         access \n         description \n         notes \n     \n         \n             ClaimTokenList \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             - \n         \n         \n             string \n             optional \n             - \n             - \n             -", 
            "title": "RptAuthorizationRequest"
        }, 
        {
            "location": "/reference/interception-scripts/sample-application-session-script/", 
            "text": "from org.xdi.model.custom.script.type.session import ApplicationSessionType\nfrom org.xdi.util import StringHelper, ArrayHelper\nfrom java.util import Arrays, ArrayList\n\n\nimport java\n\n\nclass ApplicationSession(ApplicationSessionType):\n    def \ninit\n(self, currentTimeMillis):\n        self.currentTimeMillis = currentTimeMillis\n\n\ndef init(self, configurationAttributes):\n    print \"Application session. Initialization\"\n    print \"Application session. Initialized successfully\"\n\n    return True\n\ndef destroy(self, configurationAttributes):\n    print \"Application session. Destroy\"\n    print \"Application session. Destroyed successfully\"\n    return True\n\ndef getApiVersion(self):\n    return 1\n\n# Application calls it at end session request to allow notify 3rd part systems\n#   httpRequest is javax.servlet.http.HttpServletRequest\n#   authorizationGrant is org.xdi.oxauth.model.common.AuthorizationGrant\n#   configurationAttributes is java.util.Map\nString, SimpleCustomProperty\n\ndef endSession(self, httpRequest, authorizationGrant, configurationAttributes):\n    print \"Application session. Starting external session end\"\n\n    print \"Application session. External session ended successfully\"\n    return True", 
            "title": "Sample application session script"
        }, 
        {
            "location": "/reference/interception-scripts/sample-authentication-script/", 
            "text": "from org.jboss.seam.security import Identity\nfrom org.xdi.model.custom.script.type.auth import PersonAuthenticationType\nfrom org.xdi.oxauth.service import UserService\nfrom org.xdi.util import StringHelper\n\n\nimport java\n\n\nclass PersonAuthentication(PersonAuthenticationType):\n    def \ninit\n(self, currentTimeMillis):\n        self.currentTimeMillis = currentTimeMillis\n\n\ndef init(self, configurationAttributes):\n    print \"Basic. Initialization\"\n    print \"Basic. Initialized successfully\"\n    return True\n\ndef destroy(self, configurationAttributes):\n    print \"Basic. Destroy\"\n    print \"Basic. Destroyed successfully\"\n    return True\n\ndef getApiVersion(self):\n    return 1\n\ndef isValidAuthenticationMethod(self, usageType, configurationAttributes):\n    return True\n\ndef getAlternativeAuthenticationMethod(self, usageType, configurationAttributes):\n    return None\n\ndef authenticate(self, configurationAttributes, requestParameters, step):\n    if (step == 1):\n        print \"Basic. Authenticate for step 1\"\n\n        credentials = Identity.instance().getCredentials()\n        user_name = credentials.getUsername()\n        user_password = credentials.getPassword()\n\n        logged_in = False\n        if (StringHelper.isNotEmptyString(user_name) and StringHelper.isNotEmptyString(user_password)):\n            userService = UserService.instance()\n            logged_in = userService.authenticate(user_name, user_password)\n\n        if (not logged_in):\n            return False\n\n        return True\n    else:\n        return False\n\ndef prepareForStep(self, configurationAttributes, requestParameters, step):\n    if (step == 1):\n        print \"Basic. Prepare for Step 1\"\n        return True\n    else:\n        return False\n\ndef getExtraParametersForStep(self, configurationAttributes, step):\n    return None\n\ndef getCountAuthenticationSteps(self, configurationAttributes):\n    return 1\n\ndef getPageForStep(self, configurationAttributes, step):\n    return \"\"\n\ndef logout(self, configurationAttributes, requestParameters):\n    return True", 
            "title": "Sample authentication script"
        }, 
        {
            "location": "/reference/interception-scripts/sample-cache-refresh-script/", 
            "text": "from org.xdi.model.custom.script.type.user import CacheRefreshType\nfrom org.xdi.util import StringHelper, ArrayHelper\nfrom java.util import Arrays, ArrayList\nfrom org.gluu.oxtrust.model import GluuCustomAttribute\n\n\nimport java\n\n\nclass CacheRefresh(CacheRefreshType):\n    def \ninit\n(self, currentTimeMillis):\n        self.currentTimeMillis = currentTimeMillis\n\n\ndef init(self, configurationAttributes):\n    print \"Cache refresh. Initialization\"\n    print \"Cache refresh. Initialized successfully\"\n\n    return True\n\ndef destroy(self, configurationAttributes):\n    print \"Cache refresh. Destroy\"\n    print \"Cache refresh. Destroyed successfully\"\n    return True\n\n# Update user entry before persist it\n#   user is org.gluu.oxtrust.model.GluuCustomPerson\n#   configurationAttributes is java.util.Map\nString, SimpleCustomProperty\n\ndef updateUser(self, user, configurationAttributes):\n    print \"Cache refresh. UpdateUser method\"\n\n    attributes = user.getCustomAttributes()\n\n    # Add new attribute preferredLanguage\n    attrPrefferedLanguage = GluuCustomAttribute(\"preferredLanguage\", \"en-us\")\n    attributes.add(attrPrefferedLanguage)\n\n    # Add new attribute userPassword\n    attrUserPassword = GluuCustomAttribute(\"userPassword\", \"test\")\n    attributes.add(attrUserPassword)\n\n    # Update givenName attribute\n    for attribute in attributes:\n        attrName = attribute.getName()\n        if ((\"givenname\" == StringHelper.toLowerCase(attrName)) and StringHelper.isNotEmpty(attribute.getValue())):\n            attribute.setValue(StringHelper.removeMultipleSpaces(attribute.getValue()) + \" (updated)\")\n\n    return True\n\ndef getApiVersion(self):\n    return 1", 
            "title": "Sample cache refresh script"
        }, 
        {
            "location": "/reference/interception-scripts/sample-client-registration-script/", 
            "text": "from org.xdi.model.custom.script.type.client import ClientRegistrationType\nfrom org.xdi.util import StringHelper, ArrayHelper\nfrom org.xdi.oxauth.service import ScopeService\nfrom java.util import Arrays, ArrayList\n\n\nimport java\n\n\nclass ClientRegistration(ClientRegistrationType):\n    def \ninit\n(self, currentTimeMillis):\n        self.currentTimeMillis = currentTimeMillis\n\n\ndef init(self, configurationAttributes):\n    print \"Client registration. Initialization\"\n\n    self.scopeService = ScopeService.instance()\n\n    print \"Client registration. Initialized successfully\"\n\n    return True\n\ndef destroy(self, configurationAttributes):\n    print \"Client registration. Destroy\"\n    print \"Client registration. Destroyed successfully\"\n    return True\n\n# Update client entry before persistent it\n#   registerRequest is org.xdi.oxauth.client.RegisterRequest\n#   client is org.xdi.oxauth.model.registration.Client\n#   configurationAttributes is java.util.Map\nString, SimpleCustomProperty\n\ndef updateClient(self, registerRequest, client, configurationAttributes):\n    print \"Client registration. UpdateClient method\"\n\n    redirectUris = client.getRedirectUris()\n    print \"Client registration. Redirect Uris:\", redirectUris\n\n    addAddressScope = False\n    for redirectUri in redirectUris:\n        if (StringHelper.equalsIgnoreCase(redirectUri, \"https://client.example.com/example1\")):\n            addAddressScope = True\n            break\n\n    print \"Client registration. Is add address scope:\", addAddressScope\n\n    if (addAddressScope):\n        currentScopes = client.getScopes()\n        print \"Client registration. Current scopes:\", currentScopes\n\n        addressScope = self.scopeService.getScopeByDisplayName(\"address\")\n        newScopes = ArrayHelper.addItemToStringArray(currentScopes, addressScope.getDn())\n\n        print \"Client registration. Result scopes:\", newScopes\n        client.setScopes(newScopes)\n\n    return True\n\ndef logout(self, configurationAttributes, requestParameters):\n    return True\n\ndef getApiVersion(self):\n    return 1", 
            "title": "Sample client registration script"
        }, 
        {
            "location": "/reference/interception-scripts/sample-id-generation-script/", 
            "text": "from org.xdi.model.custom.script.type.id import IdGeneratorType\nfrom org.xdi.util import StringHelper, ArrayHelper\nfrom java.util import Arrays, ArrayList\n\n\nimport java\n\n\nclass IdGenerator(IdGeneratorType):\n    def \ninit\n(self, currentTimeMillis):\n        self.currentTimeMillis = currentTimeMillis\n\n\ndef init(self, configurationAttributes):\n    print \"Id generator. Initialization\"\n    print \"Id generator. Initialized successfully\"\n\n    return True\n\ndef destroy(self, configurationAttributes):\n    print \"Id generator. Destroy\"\n    print \"Id generator. Destroyed successfully\"\n    return True\n\ndef getApiVersion(self):\n    return 1\n\n# Id generator init method\n#   appId is application Id\n#   idType is Id Type\n#   idPrefix is Id Prefix\n#   user is org.gluu.oxtrust.model.GluuCustomPerson\n#   configurationAttributes is java.util.Map\nString, SimpleCustomProperty\n\ndef generateId(self, appId, idType, idPrefix, configurationAttributes):\n    print \"Id generator. Generate Id\"\n    print \"Id generator. Generate Id. AppId: '\", appId, \"', IdType: '\", idType, \"', IdPrefix: '\", idPrefix, \"'\"\n\n    # Return None or empty string to trigger default Id generation method\n    return None", 
            "title": "Sample id generation script"
        }, 
        {
            "location": "/reference/interception-scripts/sample-uma-authorization-script/", 
            "text": "from org.xdi.model.custom.script.type.uma import AuthorizationPolicyType\nfrom org.xdi.util import StringHelper, ArrayHelper\nfrom java.util import Arrays, ArrayList\nfrom org.xdi.oxauth.service.uma.authorization import AuthorizationContext\n\n\nimport java\n\n\nclass AuthorizationPolicy(AuthorizationPolicyType):\n    def \ninit\n(self, currentTimeMillis):\n        self.currentTimeMillis = currentTimeMillis\n\n\ndef init(self, configurationAttributes):\n    print \"UMA authorization policy. Initialization\"\n    print \"UMA authorization policy. Initialized successfully\"\n\n    return True\n\ndef destroy(self, configurationAttributes):\n    print \"UMA authorization policy. Destroy\"\n    print \"UMA authorization policy. Destroyed successfully\"\n    return True\n\ndef getApiVersion(self):\n    return 1\n\n# Process policy rule\n#   authorizationContext is org.xdi.oxauth.service.uma.authorization.AuthorizationContext\n#   configurationAttributes is java.util.Map\nString, SimpleCustomProperty\n\ndef authorize(self, authorizationContext, configurationAttributes):\n    print \"UMA Authorization policy. Attempting to authorize client\"\n    client_id = authorizationContext.getGrant().getClientId()\n\n    print \"UMA Authorization policy. Client: \", client_id\n    if (StringHelper.equalsIgnoreCase(\"@!1111!0008!FDC0.0FF5\", client_id)):\n        print \"UMA Authorization policy. Authorizing client\"\n        return True\n    else:\n        print \"UMA Authorization policy. Client isn't authorized\"\n        return False\n\n    print \"UMA Authorization policy. Authorizing client\"\n    return True", 
            "title": "Sample uma authorization script"
        }, 
        {
            "location": "/reference/interception-scripts/sample-update-user-script/", 
            "text": "from org.xdi.model.custom.script.type.user import UpdateUserType\nfrom org.xdi.util import StringHelper, ArrayHelper\nfrom java.util import Arrays, ArrayList\n\n\nimport java\n\n\nclass UpdateUser(UpdateUserType):\n    def \ninit\n(self, currentTimeMillis):\n        self.currentTimeMillis = currentTimeMillis\n\n\ndef init(self, configurationAttributes):\n    print \"Update user. Initialization\"\n    print \"Update user. Initialized successfully\"\n\n    return True\n\ndef destroy(self, configurationAttributes):\n    print \"Update user. Destroy\"\n    print \"Update user. Destroyed successfully\"\n    return True\n\n# Update user entry before persistent it\n#   user is org.gluu.oxtrust.model.GluuCustomPerson\n#   persisted is boolean value to specify if operation type: add/modify\n#   configurationAttributes is java.util.Map\nString, SimpleCustomProperty\n\ndef updateUser(self, user, persisted, configurationAttributes):\n    print \"Update user. UpdateUser method\"\n\n    uid = user.getUid()\n    print \"Update user. User Uid:\", uid\n\n    mail = uid + \"@example.org\"\n    user.setMail(mail)\n\n    return True\n\ndef getApiVersion(self):\n    return 1", 
            "title": "Sample update user script"
        }, 
        {
            "location": "/reference/interception-scripts/sample-user-registration-script/", 
            "text": "from org.xdi.model.custom.script.type.user import UserRegistrationType\nfrom org.xdi.util import StringHelper, ArrayHelper\nfrom java.util import Arrays, ArrayList\n\n\nimport java\n\n\nclass UserRegistration(UserRegistrationType):\n    def \ninit\n(self, currentTimeMillis):\n        self.currentTimeMillis = currentTimeMillis\n\n\ndef init(self, configurationAttributes):\n    print \"User registration. Initialization\"\n    print \"User registration. Initialized successfully\"\n\n    return True\n\ndef destroy(self, configurationAttributes):\n    print \"User registration. Destroy\"\n    print \"User registration. Destroyed successfully\"\n    return True\n\n# User registration init method\n#   user is org.gluu.oxtrust.model.GluuCustomPerson\n#   requestParameters is java.util.Map\nString, String[]\n\n#   configurationAttributes is java.util.Map\nString, SimpleCustomProperty\n\ndef initRegistration(self, user, requestParameters, configurationAttributes):\n    print \"User registration. Init method\"\n\n    return True\n\n# User registration pre method\n#   user is org.gluu.oxtrust.model.GluuCustomPerson\n#   requestParameters is java.util.Map\nString, String[]\n\n#   configurationAttributes is java.util.Map\nString, SimpleCustomProperty\n\ndef preRegistration(self, user, requestParameters, configurationAttributes):\n    print \"User registration. Pre method\"\n\n    return True\n\n# User registration post method\n#   user is org.gluu.oxtrust.model.GluuCustomPerson\n#   requestParameters is java.util.Map\nString, String[]\n\n#   configurationAttributes is java.util.Map\nString, SimpleCustomProperty\n\ndef postRegistration(self, user, requestParameters, configurationAttributes):\n    print \"User registration. Post method\"\n\n    return True\n\ndef getApiVersion(self):\n    return 1", 
            "title": "Sample user registration script"
        }, 
        {
            "location": "/reference/lib/openid-connect/", 
            "text": "OpenID Connect\n\n\nIntroduction\n\n\nOpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0 protocol. It allows Clients to verify the identity of the End-User based on the authentication performed by an Authorization Server, as well as to obtain basic profile information about the End-User in an interoperable and REST-like manner.\n\n\nOpenID Connect allows clients of all types, including Web-based, mobile, and JavaScript clients, to request and receive information about authenticated sessions and end-users. The specification suite is extensible, allowing participants to use optional features such as encryption of identity data, discovery of OpenID Providers, and session management, when it makes sense for them.\n\n\noxAuth\n\n\noxAuth is an open source OpenID Provider that implements the OpenID Connect 1.0 stack of REST services. The project also includes OpenID Connect Client code which can be used by websites to validate tokens. It currently implements all required aspects of the OpenID Connect stack, including an OAuth 2.0 authorization server, Simple Web Discovery, Dynamic Client Registration, JSON Web Tokens, and JSON Web Keys, and User Info Endpoint. \n\n\n\n\noxAuth Server, Client and RP \nSource Code\n.\n\n\noxAuth \nOP\n, \nRP\n and \nConfiguration Endpoint\n.\n\n\n\n\nReferences\n\n\n\n\nOpenID Connect Specifications\n\n\nThe OAuth 2.0 Authorization Framework\n\n\nFrequently Asked Questions about OpenID Connect", 
            "title": "Openid connect"
        }, 
        {
            "location": "/reference/lib/openid-connect/#openid-connect", 
            "text": "", 
            "title": "OpenID Connect"
        }, 
        {
            "location": "/reference/lib/openid-connect/#introduction", 
            "text": "OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0 protocol. It allows Clients to verify the identity of the End-User based on the authentication performed by an Authorization Server, as well as to obtain basic profile information about the End-User in an interoperable and REST-like manner.  OpenID Connect allows clients of all types, including Web-based, mobile, and JavaScript clients, to request and receive information about authenticated sessions and end-users. The specification suite is extensible, allowing participants to use optional features such as encryption of identity data, discovery of OpenID Providers, and session management, when it makes sense for them.", 
            "title": "Introduction"
        }, 
        {
            "location": "/reference/lib/openid-connect/#oxauth", 
            "text": "oxAuth is an open source OpenID Provider that implements the OpenID Connect 1.0 stack of REST services. The project also includes OpenID Connect Client code which can be used by websites to validate tokens. It currently implements all required aspects of the OpenID Connect stack, including an OAuth 2.0 authorization server, Simple Web Discovery, Dynamic Client Registration, JSON Web Tokens, and JSON Web Keys, and User Info Endpoint.    oxAuth Server, Client and RP  Source Code .  oxAuth  OP ,  RP  and  Configuration Endpoint .", 
            "title": "oxAuth"
        }, 
        {
            "location": "/reference/lib/openid-connect/#references", 
            "text": "OpenID Connect Specifications  The OAuth 2.0 Authorization Framework  Frequently Asked Questions about OpenID Connect", 
            "title": "References"
        }, 
        {
            "location": "/reference/lib/saml/", 
            "text": "SAML", 
            "title": "Saml"
        }, 
        {
            "location": "/reference/lib/saml/#saml", 
            "text": "", 
            "title": "SAML"
        }, 
        {
            "location": "/reference/lib/scim/", 
            "text": "Simple Cloud Identity Management\n\n\nWhat is SCIM?\n\n\nThe Simple Cloud Identity Management (SCIM) specification is a standard REST/JSON API to standardize user and group CRUD (create, read, update, delete). You can review the detailed specification at \nhttp://www.simplecloud.info\n. \nThe specification seeks to build upon experience with existing schemas and deployments, placing specific emphasis on simplicity of development and integration, while applying existing authentication, authorization, and privacy models. It's intent is to reduce the cost and complexity of user management operations by providing a common user schema and extension model, as well as binding documents to provide patterns for exchanging this schema using standard protocols. In essence, make it fast, cheap, and easy to move users in to, out of, and around the cloud.\n\n\nYou can download a PDF copy of this guide from \nHERE\n.\n\n\nSpecification\n\n\nSCIM is integrated as a service of oxTrust . To start operating with SCIM\u2019s web service , you will need to send a request to one of SCIM\u2019s endpoints , for example , if you want to add a user you need to send an HTTP request to this endpoint url :\n\n\nhttps://localhost:8080/oxTrust/seam/resource/restv1/Users/\n\n\nfor bulk operations (adding modifying and deleting multiple users ) you have to send a request to the bulk endpoint:\n\n\nhttps://localhost:8080/oxTrust/seam/resource/restv1/Bulk/\n\n\nfor group operations:\n\n\nhttps://localhost:8080/oxTrust/seam/resource/restv1/Groups/\n\n\nYou need to have a the right credentials and roles in order for you to access the endpoint example, which is for oxTrust means that you are a member of the Owner or Manager group specified in the organization entry. \nGluu\u2019s SCIM web service uses both Basic authentication and oAuth 2.0 authentication . For the basic type of authentication you need to specify the user and password (base64 encoded) in the HTTP request HTTP header in order to be authenticated \nExample :\n\n\nPOST https://localhost:8080/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Basic bWlrZTpzZWNyZXQ=\n\n\n\n\nFor oAuth 2.0 authentication you need to request an access token via the SCIM client API in order for you to be able to get authenticated , the example below shows how an access token is sent to SCIM webservice as a header:\n\n\nPOST https://localhost:8080/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\nA user is represented in two formats, JSON and XML and you can specify what kind of format you want to use by indicating that in your HTTP request .\n\n\n\n\nFor JSON:\n\n\n\n\nAccept: application/json \n\n\n\n\n\n\nFor XML\n\n\n\n\nAccept: application/xml \n\n\n\n\n\n\nExample of JSON representation\n\n\n\n\n{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nid\n:\n@!1111!0000!D4E7\n,\nexternalId\n:\njohn \n,\nuserName\n:\njohn \n,\nname\n:{\ngivenName\n:\nJohn\n,\nfamilyName\n:\nSmith\n,\nmiddleName\n:\nN/A\n,\nhonorificPrefix\n:\nN/A\n,\nhonorificSuffix\n:\nN/A\n},\ndisplayName\n:\nJohn Smith\n,\nnickName\n:\nSensei\n,\nprofileUrl\n:\nhttp://www.gluu.org/\n,\nemails\n:[{\nvalue\n:\njohn @gluu.org\n,\ntype\n:\nwork\n,\nprimary\n:\ntrue\n},{\nvalue\n:\njohn 2@gluu.org\n,\ntype\n:\nhome\n,\nprimary\n:\nfalse\n}],\naddresses\n:[{\ntype\n:\nwork\n,\nstreetAddress\n:\n621 East 6th Street Suite 200\n,\nlocality\n:\nAustin\n,\nregion\n:\nTX\n,\npostalCode\n:\n78701\n,\ncountry\n:\nUS\n,\nformatted\n:\n621 East 6th Street Suite 200 Austin , TX 78701 US\n,\nprimary\n:\ntrue\n}],\nphoneNumbers\n:[{\nvalue\n:\n646-234-5678\n,\ntype\n:\nwork\n}],\nims\n:[{\nvalue\n:\nnynyjohn \n,\ntype\n:\nSkype\n}],\nphotos\n:[{\nvalue\n:\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n,\ntype\n:\ngluu photo\n}],\nuserType\n:\nCEO\n,\ntitle\n:\nCEO\n,\npreferredLanguage\n:\nen-us\n,\nlocale\n:\nen_US\n,\ntimezone\n:\nAmerica/Chicago\n,\nactive\n:\ntrue\n,\npassword\n:\nHiden for Privacy Reasons\n,\ngroups\n:[{\ndisplay\n:\nGluu Manager Group\n,\nvalue\n:\n@!1111!0003!B2C6\n},{\ndisplay\n:\nGluu Owner Group\n,\nvalue\n:\n@!1111!0003!D9B4\n}],\nroles\n:[{\nvalue\n:\nOwner\n}],\nentitlements\n:[{\nvalue\n:\nfull access\n}],\nx509Certificates\n:[{\nvalue\n:\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n}],\nmeta\n:{\ncreated\n:\n2010-01-23T04:56:22Z\n,\nlastModified\n:\n2011-05-13T04:42:34Z\n,\nversion\n:\nW\\\\\\\nb431af54f0671a2\\\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n}} \n\n\n\n\n\n\nXML format Example\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\nUser xmlns=\nurn:scim:schemas:core:1.0\nid\n@!1111!0000!D4E7\n/id\nexternalId\njohn \n/externalId\nuserName\njohn \n/userName\nname\ngivenName\nJohn\n/givenName\nfamilyName\nSmith\n/familyName\nmiddleName\nN/A\n/middleName\nhonorificPrefix\nN/A\n/honorificPrefix\nhonorificSuffix\nN/A\n/honorificSuffix\n/name\ndisplayName\nJohn Smith\n/displayName\nnickName\nSensei\n/nickName\nprofileUrl\nhttp://www.gluu.org/\n/profileUrl\nemails\nemail\nvalue\njohn @gluu.org\n/value\ntype\nwork\n/type\nprimary\ntrue\n/primary\n/email\nemail\nvalue\njohn 2@gluu.org\n/value\ntype\nhome\n/type\nprimary\nfalse\n/primary\n/email\n/emails\naddresses\naddress\ntype\nwork\n/type\nstreetAddress\n621 East 6th Street Suite 200\n/streetAddress\nlocality\nAustin\n/locality\nregion\nTX\n/region\npostalCode\n78701\n/postalCode\ncountry\nUS\n/country\nformatted\n621 East 6th Street Suite 200 Austin , TX 78701 US\n/formatted\nprimary\ntrue\n/primary\n/address\n/addresses\nPhoneNumbers\nPhoneNumber\nvalue\n646-234-5678\n/value\ntype\nwork\n/type\n/PhoneNumber\n/PhoneNumbers\nims\nim\nvalue\nnynyjohn \n/value\ntype\nSkype\n/type\n/im\n/ims\nphotos\nphoto\nvalue\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n/value\ntype\ngluu photo\n/type\n/photo\n/photos\nuserType\nCEO\n/userType\ntitle\nCEO\n/title\npreferredLanguage\nen-us\n/preferredLanguage\nlocale\nen_US\n/locale\ntimezone\nAmerica/Chicago\n/timezone\nactive\ntrue\n/active\npassword\nHiden for Privacy Reasons\n/password\ngroups\ngroup\ndisplay\nGluu Manager Group\n/display\nvalue\n@!1111!0003!B2C6\n/value\n/group\ngroup\ndisplay\nGluu Owner Group\n/display\nvalue\n@!1111!0003!D9B4\n/value\n/group\n/groups\nroles\nrole\nvalue\nOwner\n/value\n/role\n/roles\nentitlements\nentitlement\nvalue\nfull access\n/value\n/entitlement\n/entitlements\nx509Certificates\nx509Certificate\nvalue\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n/value\n/x509Certificate\n/x509Certificates\nmeta\ncreated\n2010-01-23T04:56:22Z\n/created\nlastModified\n2011-05-13T04:42:34Z\n/lastModified\nversion\nW\\\nquot;b431af54f0671a2\nquot;\n/version\nlocation\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n/location\n/meta\n/User\n\n\n\n\n\nExamples\n\n\nIn this section you will find some examples of the operations that you can accomplish using SCIM.\n\n\nAdding a user\n\n\nIn this example we will try to add a user in JSON and XML format: \n\n\n\n\nJSON request\n\n\nHeader\n\n\n\n\nPOST https://localhost:8080/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nRequest content\n\n\n\n\n{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nexternalId\n:\njohn \n,\nuserName\n:\njohn \n,\nname\n:{\ngivenName\n:\nJohn\n,\nfamilyName\n:\nSmith\n,\nmiddleName\n:\nN/A\n,\nhonorificPrefix\n:\nN/A\n,\nhonorificSuffix\n:\nN/A\n},\ndisplayName\n:\nJohn Smith\n,\nnickName\n:\nSensei\n,\nprofileUrl\n:\nhttp://www.gluu.org/\n,\nemails\n:[{\nvalue\n:\njohn @gluu.org\n,\ntype\n:\nwork\n,\nprimary\n:\ntrue\n},{\nvalue\n:\njohn 2@gluu.org\n,\ntype\n:\nhome\n,\nprimary\n:\nfalse\n}],\naddresses\n:[{\ntype\n:\nwork\n,\nstreetAddress\n:\n621 East 6th Street Suite 200\n,\nlocality\n:\nAustin\n,\nregion\n:\nTX\n,\npostalCode\n:\n78701\n,\ncountry\n:\nUS\n,\nformatted\n:\n621 East 6th Street Suite 200 Austin , TX 78701 US\n,\nprimary\n:\ntrue\n}],\nphoneNumbers\n:[{\nvalue\n:\n646-234-5678\n,\ntype\n:\nwork\n}],\nims\n:[{\nvalue\n:\nnynyjohn \n,\ntype\n:\nSkype\n}],\nphotos\n:[{\nvalue\n:\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n,\ntype\n:\ngluu photo\n}],\nuserType\n:\nCEO\n,\ntitle\n:\nCEO\n,\npreferredLanguage\n:\nen-us\n,\nlocale\n:\nen_US\n,\ntimezone\n:\nAmerica/Chicago\n,\nactive\n:\ntrue\n,\npassword\n:\nsecret\n,\ngroups\n:[{\ndisplay\n:\nGluu Manager Group\n,\nvalue\n:\n@!1111!0003!B2C6\n},{\ndisplay\n:\nGluu Owner Group\n,\nvalue\n:\n@!1111!0003!D9B4\n}],\nroles\n:[{\nvalue\n:\nOwner\n}],\nentitlements\n:[{\nvalue\n:\nfull access\n}],\nx509Certificates\n:[{\nvalue\n:\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n}],\nmeta\n:{\ncreated\n:\n2010-01-23T04:56:22Z\n,\nlastModified\n:\n2011-05-13T04:42:34Z\n,\nversion\n:\nW\\\\\\\nb431af54f0671a2\\\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n}}\n\n\n\n\n\n\nJSON response\n\n\nHeader\n\n\n\n\n201 CREATED\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/json\n\n\n\n\n\n\nresponse Content\n\n\n\n\n{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nid\n:\n@!1111!0000!D4E7\n,\nexternalId\n:\njohn \n,\nuserName\n:\njohn \n,\nname\n:{\ngivenName\n:\nJohn\n,\nfamilyName\n:\nSmith\n,\nmiddleName\n:\nN/A\n,\nhonorificPrefix\n:\nN/A\n,\nhonorificSuffix\n:\nN/A\n},\ndisplayName\n:\nJohn Smith\n,\nnickName\n:\nSensei\n,\nprofileUrl\n:\nhttp://www.gluu.org/\n,\nemails\n:[{\nvalue\n:\njohn@gluu.org\n,\ntype\n:\nwork\n,\nprimary\n:\ntrue\n},{\nvalue\n:\njohn 2@gluu.org\n,\ntype\n:\nhome\n,\nprimary\n:\nfalse\n}],\naddresses\n:[{\ntype\n:\nwork\n,\nstreetAddress\n:\n621 East 6th Street Suite 200\n,\nlocality\n:\nAustin\n,\nregion\n:\nTX\n,\npostalCode\n:\n78701\n,\ncountry\n:\nUS\n,\nformatted\n:\n621 East 6th Street Suite 200 Austin , TX 78701 US\n,\nprimary\n:\ntrue\n}],\nphoneNumbers\n:[{\nvalue\n:\n646-234-5678\n,\ntype\n:\nwork\n}],\nims\n:[{\nvalue\n:\nnynyjohn \n,\ntype\n:\nSkype\n}],\nphotos\n:[{\nvalue\n:\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n,\ntype\n:\ngluu photo\n}],\nuserType\n:\nCEO\n,\ntitle\n:\nCEO\n,\npreferredLanguage\n:\nen-us\n,\nlocale\n:\nen_US\n,\ntimezone\n:\nAmerica/Chicago\n,\nactive\n:\ntrue\n,\npassword\n:\nHiden for Privacy Reasons\n,\ngroups\n:[{\ndisplay\n:\nGluu Manager Group\n,\nvalue\n:\n@!1111!0003!B2C6\n},{\ndisplay\n:\nGluu Owner Group\n,\nvalue\n:\n@!1111!0003!D9B4\n}],\nroles\n:[{\nvalue\n:\nOwner\n}],\nentitlements\n:[{\nvalue\n:\nfull access\n}],\nx509Certificates\n:[{\nvalue\n:\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n}],\nmeta\n:{\ncreated\n:\n2010-01-23T04:56:22Z\n,\nlastModified\n:\n2011-05-13T04:42:34Z\n,\nversion\n:\nW\\\\\\\nb431af54f0671a2\\\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n}}\n\n\n\n\n\n\nXML request\n\n\nHeader\n\n\n\n\nPOST https://localhost:8080/oxTrust/seam/resource/restv1/Users/ \nAccept: application/xml \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nRequest Content\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\nUser xmlns=\nurn:scim:schemas:core:1.0\nexternalId\nmike\n/externalId\nuserName\nmike\n/userName\nname\ngivenName\nJohn\n/givenName\nfamilyName\nSmith\n/familyName\nmiddleName\nN/A\n/middleName\nhonorificPrefix\nN/A\n/honorificPrefix\nhonorificSuffix\nN/A\n/honorificSuffix\n/name\ndisplayName\nJohn Smith\n/displayName\nnickName\nSensei\n/nickName\nprofileUrl\nhttp://www.gluu.org/\n/profileUrl\nemails\nemail\nvalue\nmike@gluu.org\n/value\ntype\nwork\n/type\nprimary\ntrue\n/primary\n/email\nemail\nvalue\nmike2@gluu.org\n/value\ntype\nhome\n/type\nprimary\nfalse\n/primary\n/email\n/emails\naddresses\naddress\ntype\nwork\n/type\nstreetAddress\n621 East 6th Street Suite 200\n/streetAddress\nlocality\nAustin\n/locality\nregion\nTX\n/region\npostalCode\n78701\n/postalCode\ncountry\nUS\n/country\nformatted\n621 East 6th Street Suite 200  Austin , TX 78701 US\n/formatted\nprimary\ntrue\n/primary\n/address\n/addresses\nPhoneNumbers\nPhoneNumber\nvalue\n646-234-5678\n/value\ntype\nwork\n/type\n/PhoneNumber\n/PhoneNumbers\nims\nim\nvalue\nnynymike\n/value\ntype\nSkype\n/type\n/im\n/ims\nphotos\nphoto\nvalue\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n/value\ntype\ngluu photo\n/type\n/photo\n/photos\nuserType\nCEO\n/userType\ntitle\nCEO\n/title\npreferredLanguage\nen-us\n/preferredLanguage\nlocale\nen_US\n/locale\ntimezone\nAmerica/Chicago\n/timezone\nactive\ntrue\n/active\npassword\nsecret\n/password\ngroups\ngroup\ndisplay\nGluu Manager Group\n/display\nvalue\n@!1111!0003!B2C6\n/value\n/group\ngroup\ndisplay\nGluu Owner Group\n/display\nvalue\n@!1111!0003!D9B4\n/value\n/group\n/groups\nroles\nrole\nvalue\nOwner\n/value\n/role\n/roles\nentitlements\nentitlement\nvalue\nfull access\n/value\n/entitlement\n/entitlements\nx509Certificates\nx509Certificate\nvalue\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n/value\n/x509Certificate\n/x509Certificates\nmeta\ncreated\n2010-01-23T04:56:22Z\n/created\nlastModified\n2011-05-13T04:42:34Z\n/lastModified\nversion\nW\\\nquot;b431af54f0671a2\nquot;\n/version\nlocation\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n/location\n/meta\n/User\n\n\n\n\n\n\n\nXML response\n\n\nheader\n\n\n\n\n201 CREATED\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/xml\n\n\n\n\n\n\nResponse Content\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\nUser xmlns=\nurn:scim:schemas:core:1.0\nid\n@!1111!0000!D4E7\n/id\nexternalId\nmike\n/externalId\nuserName\nmike\n/userName\nname\ngivenName\nJohn\n/givenName\nfamilyName\nSmith\n/familyName\nmiddleName\nN/A\n/middleName\nhonorificPrefix\nN/A\n/honorificPrefix\nhonorificSuffix\nN/A\n/honorificSuffix\n/name\ndisplayName\nJohn Smith\n/displayName\nnickName\nSensei\n/nickName\nprofileUrl\nhttp://www.gluu.org/\n/profileUrl\nemails\nemail\nvalue\nmike@gluu.org\n/value\ntype\nwork\n/type\nprimary\ntrue\n/primary\n/email\nemail\nvalue\nmike2@gluu.org\n/value\ntype\nhome\n/type\nprimary\nfalse\n/primary\n/email\n/emails\naddresses\naddress\ntype\nwork\n/type\nstreetAddress\n621 East 6th Street Suite 200\n/streetAddress\nlocality\nAustin\n/locality\nregion\nTX\n/region\npostalCode\n78701\n/postalCode\ncountry\nUS\n/country\nformatted\n621 East 6th Street Suite 200  Austin , TX 78701 US\n/formatted\nprimary\ntrue\n/primary\n/address\n/addresses\nPhoneNumbers\nPhoneNumber\nvalue\n646-234-5678\n/value\ntype\nwork\n/type\n/PhoneNumber\n/PhoneNumbers\nims\nim\nvalue\nnynymike\n/value\ntype\nSkype\n/type\n/im\n/ims\nphotos\nphoto\nvalue\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n/value\ntype\ngluu photo\n/type\n/photo\n/photos\nuserType\nCEO\n/userType\ntitle\nCEO\n/title\npreferredLanguage\nen-us\n/preferredLanguage\nlocale\nen_US\n/locale\ntimezone\nAmerica/Chicago\n/timezone\nactive\ntrue\n/active\npassword\nHiden for Privacy Reasons\n/password\ngroups\ngroup\ndisplay\nGluu Manager Group\n/display\nvalue\n@!1111!0003!B2C6\n/value\n/group\ngroup\ndisplay\nGluu Owner Group\n/display\nvalue\n@!1111!0003!D9B4\n/value\n/group\n/groups\nroles\nrole\nvalue\nOwner\n/value\n/role\n/roles\nentitlements\nentitlement\nvalue\nfull access\n/value\n/entitlement\n/entitlements\nx509Certificates\nx509Certificate\nvalue\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n/value\n/x509Certificate\n/x509Certificates\nmeta\ncreated\n2010-01-23T04:56:22Z\n/created\nlastModified\n2011-05-13T04:42:34Z\n/lastModified\nversion\nW\\\nquot;b431af54f0671a2\nquot;\n/version\nlocation\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n/location\n/meta\n/User\n\n\n\n\n\nGetting a user\n\n\n\n\nJSON request\n\n\nHeader\n\n\n\n\nGET https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nJSON response\n\n\nHeader\n\n\n\n\n200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/json\n\n\n\n\n\n\nResponse Content\n\n\n\n\n{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nid\n:\n@!1111!0000!D4E7\n,\nexternalId\n:\nmike\n,\nuserName\n:\nmike\n,\nname\n:{\ngivenName\n:\nJohn\n,\nfamilyName\n:\nSmith\n,\nmiddleName\n:\nN/A\n,\nhonorificPrefix\n:\nN/A\n,\nhonorificSuffix\n:\nN/A\n},\ndisplayName\n:\nJohn Smith\n,\nnickName\n:\nSensei\n,\nprofileUrl\n:\nhttp://www.gluu.org/\n,\nemails\n:[{\nvalue\n:\nmike@gluu.org\n,\ntype\n:\nwork\n,\nprimary\n:\ntrue\n},{\nvalue\n:\nmike2@gluu.org\n,\ntype\n:\nhome\n,\nprimary\n:\nfalse\n}],\naddresses\n:[{\ntype\n:\nwork\n,\nstreetAddress\n:\n621 East 6th Street Suite 200\n,\nlocality\n:\nAustin\n,\nregion\n:\nTX\n,\npostalCode\n:\n78701\n,\ncountry\n:\nUS\n,\nformatted\n:\n621 East 6th Street Suite 200 Austin , TX 78701 US\n,\nprimary\n:\ntrue\n}],\nphoneNumbers\n:[{\nvalue\n:\n646-234-5678\n,\ntype\n:\nwork\n}],\nims\n:[{\nvalue\n:\nnynymike\n,\ntype\n:\nSkype\n}],\nphotos\n:[{\nvalue\n:\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n,\ntype\n:\ngluu photo\n}],\nuserType\n:\nCEO\n,\ntitle\n:\nCEO\n,\npreferredLanguage\n:\nen-us\n,\nlocale\n:\nen_US\n,\ntimezone\n:\nAmerica/Chicago\n,\nactive\n:\ntrue\n,\npassword\n:\nHiden for Privacy Reasons\n,\ngroups\n:[{\ndisplay\n:\nGluu Manager Group\n,\nvalue\n:\n@!1111!0003!B2C6\n},{\ndisplay\n:\nGluu Owner Group\n,\nvalue\n:\n@!1111!0003!D9B4\n}],\nroles\n:[{\nvalue\n:\nOwner\n}],\nentitlements\n:[{\nvalue\n:\nfull access\n}],\nx509Certificates\n:[{\nvalue\n:\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n}],\nmeta\n:{\ncreated\n:\n2010-01-23T04:56:22Z\n,\nlastModified\n:\n2011-05-13T04:42:34Z\n,\nversion\n:\nW\\\\\\\nb431af54f0671a2\\\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n}}\n\n\n\n\n\n\nXML request\n\n\nHeader\n\n\n\n\nGET https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nXML response\n\n\nHeader\n\n\n\n\n200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/xml\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\nUser xmlns=\nurn:scim:schemas:core:1.0\nid\n@!1111!0000!D4E7\n/id\nexternalId\nmike\n/externalId\nuserName\nmike\n/userName\nname\ngivenName\nJohn\n/givenName\nfamilyName\nSmith\n/familyName\nmiddleName\nN/A\n/middleName\nhonorificPrefix\nN/A\n/honorificPrefix\nhonorificSuffix\nN/A\n/honorificSuffix\n/name\ndisplayName\nJohn Smith\n/displayName\nnickName\nSensei\n/nickName\nprofileUrl\nhttp://www.gluu.org/\n/profileUrl\nemails\nemail\nvalue\nmike@gluu.org\n/value\ntype\nwork\n/type\nprimary\ntrue\n/primary\n/email\nemail\nvalue\nmike2@gluu.org\n/value\ntype\nhome\n/type\nprimary\nfalse\n/primary\n/email\n/emails\naddresses\naddress\ntype\nwork\n/type\nstreetAddress\n621 East 6th Street Suite 200\n/streetAddress\nlocality\nAustin\n/locality\nregion\nTX\n/region\npostalCode\n78701\n/postalCode\ncountry\nUS\n/country\nformatted\n621 East 6th Street Suite 200  Austin , TX 78701 US\n/formatted\nprimary\ntrue\n/primary\n/address\n/addresses\nPhoneNumbers\nPhoneNumber\nvalue\n646-234-5678\n/value\ntype\nwork\n/type\n/PhoneNumber\n/PhoneNumbers\nims\nim\nvalue\nnynymike\n/value\ntype\nSkype\n/type\n/im\n/ims\nphotos\nphoto\nvalue\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n/value\ntype\ngluu photo\n/type\n/photo\n/photos\nuserType\nCEO\n/userType\ntitle\nCEO\n/title\npreferredLanguage\nen-us\n/preferredLanguage\nlocale\nen_US\n/locale\ntimezone\nAmerica/Chicago\n/timezone\nactive\ntrue\n/active\npassword\nHiden for Privacy Reasons\n/password\ngroups\ngroup\ndisplay\nGluu Manager Group\n/display\nvalue\n@!1111!0003!B2C6\n/value\n/group\ngroup\ndisplay\nGluu Owner Group\n/display\nvalue\n@!1111!0003!D9B4\n/value\n/group\n/groups\nroles\nrole\nvalue\nOwner\n/value\n/role\n/roles\nentitlements\nentitlement\nvalue\nfull access\n/value\n/entitlement\n/entitlements\nx509Certificates\nx509Certificate\nvalue\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n/value\n/x509Certificate\n/x509Certificates\nmeta\ncreated\n2010-01-23T04:56:22Z\n/created\nlastModified\n2011-05-13T04:42:34Z\n/lastModified\nversion\nW\\\nquot;b431af54f0671a2\nquot;\n/version\nlocation\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n/location\n/meta\n/User\n\n\n\n\n\nModifying a user\n\n\n\n\nJSON request\n\n\nHeader\n\n\n\n\nPUT https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nRequest content\n\n\n\n\n{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nexternalId\n:\nmike24\n,\npassword\n:\nQb587QBJ\n}\n\n\n\n\n\n\nJSON response\n\n\nHeader\n\n\n\n\n200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/json\n\n\n\n\n\n\nResponse Content\n\n\n\n\n{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nid\n:\n@!1111!0000!D4E7\n,\nexternalId\n:\nmike24\n,\nuserName\n:\nmike\n,\nname\n:{\ngivenName\n:\nJohn\n,\nfamilyName\n:\nSmith\n,\nmiddleName\n:\nN/A\n,\nhonorificPrefix\n:\nN/A\n,\nhonorificSuffix\n:\nN/A\n},\ndisplayName\n:\nJohn Smith\n,\nnickName\n:\nSensei\n,\nprofileUrl\n:\nhttp://www.gluu.org/\n,\nemails\n:[{\nvalue\n:\nmike@gluu.org\n,\ntype\n:\nwork\n,\nprimary\n:\ntrue\n},{\nvalue\n:\nmike2@gluu.org\n,\ntype\n:\nhome\n,\nprimary\n:\nfalse\n}],\naddresses\n:[{\ntype\n:\nwork\n,\nstreetAddress\n:\n621 East 6th Street Suite 200\n,\nlocality\n:\nAustin\n,\nregion\n:\nTX\n,\npostalCode\n:\n78701\n,\ncountry\n:\nUS\n,\nformatted\n:\n621 East 6th Street Suite 200 Austin , TX 78701 US\n,\nprimary\n:\ntrue\n}],\nphoneNumbers\n:[{\nvalue\n:\n646-234-5678\n,\ntype\n:\nwork\n}],\nims\n:[{\nvalue\n:\nnynymike\n,\ntype\n:\nSkype\n}],\nphotos\n:[{\nvalue\n:\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n,\ntype\n:\ngluu photo\n}],\nuserType\n:\nCEO\n,\ntitle\n:\nCEO\n,\npreferredLanguage\n:\nen-us\n,\nlocale\n:\nen_US\n,\ntimezone\n:\nAmerica/Chicago\n,\nactive\n:\ntrue\n,\npassword\n:\nHiden for Privacy Reasons\n,\ngroups\n:[{\ndisplay\n:\nGluu Manager Group\n,\nvalue\n:\n@!1111!0003!B2C6\n},{\ndisplay\n:\nGluu Owner Group\n,\nvalue\n:\n@!1111!0003!D9B4\n}],\nroles\n:[{\nvalue\n:\nOwner\n}],\nentitlements\n:[{\nvalue\n:\nfull access\n}],\nx509Certificates\n:[{\nvalue\n:\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n}],\nmeta\n:{\ncreated\n:\n2010-01-23T04:56:22Z\n,\nlastModified\n:\n2011-05-13T04:42:34Z\n,\nversion\n:\nW\\\\\\\nb431af54f0671a2\\\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n}}\n\n\n\n\n\n\nXML request\n\n\nheader\n\n\n\n\nPUT https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/xml \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nRequest Content\n\n\n\n\n`\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\n``\nUser xmlns=\nurn:scim:schemas:core:1.0\n``\nexternalId\n`mike26`\n/externalId\n``\npassword\n`Qb587QBJ`\n/password\n``\n/user\n`\n\n\n\n\n\n\nXML response\n\n\nHeader\n\n\n\n\n200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/xml\n\n\n\n\n\n\nResponse Content\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\nUser xmlns=\nurn:scim:schemas:core:1.0\nid\n@!1111!0000!D4E7\n/id\nexternalId\nmike26\n/externalId\nuserName\nmike\n/userName\nname\ngivenName\nJohn\n/givenName\nfamilyName\nSmith\n/familyName\nmiddleName\nN/A\n/middleName\nhonorificPrefix\nN/A\n/honorificPrefix\nhonorificSuffix\nN/A\n/honorificSuffix\n/name\ndisplayName\nJohn Smith\n/displayName\nnickName\nSensei\n/nickName\nprofileUrl\nhttp://www.gluu.org/\n/profileUrl\nemails\nemail\nvalue\nmike@gluu.org\n/value\ntype\nwork\n/type\nprimary\ntrue\n/primary\n/email\nemail\nvalue\nmike2@gluu.org\n/value\ntype\nhome\n/type\nprimary\nfalse\n/primary\n/email\n/emails\naddresses\naddress\ntype\nwork\n/type\nstreetAddress\n621 East 6th Street Suite 200\n/streetAddress\nlocality\nAustin\n/locality\nregion\nTX\n/region\npostalCode\n78701\n/postalCode\ncountry\nUS\n/country\nformatted\n621 East 6th Street Suite 200  Austin , TX 78701 US\n/formatted\nprimary\ntrue\n/primary\n/address\n/addresses\nPhoneNumbers\nPhoneNumber\nvalue\n646-234-5678\n/value\ntype\nwork\n/type\n/PhoneNumber\n/PhoneNumbers\nims\nim\nvalue\nnynymike\n/value\ntype\nSkype\n/type\n/im\n/ims\nphotos\nphoto\nvalue\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n/value\ntype\ngluu photo\n/type\n/photo\n/photos\nuserType\nCEO\n/userType\ntitle\nCEO\n/title\npreferredLanguage\nen-us\n/preferredLanguage\nlocale\nen_US\n/locale\ntimezone\nAmerica/Chicago\n/timezone\nactive\ntrue\n/active\npassword\nHiden for Privacy Reasons\n/password\ngroups\ngroup\ndisplay\nGluu Manager Group\n/display\nvalue\n@!1111!0003!B2C6\n/value\n/group\ngroup\ndisplay\nGluu Owner Group\n/display\nvalue\n@!1111!0003!D9B4\n/value\n/group\n/groups\nroles\nrole\nvalue\nOwner\n/value\n/role\n/roles\nentitlements\nentitlement\nvalue\nfull access\n/value\n/entitlement\n/entitlements\nx509Certificates\nx509Certificate\nvalue\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n/value\n/x509Certificate\n/x509Certificates\nmeta\ncreated\n2010-01-23T04:56:22Z\n/created\nlastModified\n2011-05-13T04:42:34Z\n/lastModified\nversion\nW\\\nquot;b431af54f0671a2\nquot;\n/version\nlocation\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n/location\n/meta\n/User\n\n\n\n\n\nDelete a user\n\n\n\n\nJSON header request\n\n\n\n\nDELETE https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nJSON header response\n\n\n\n\nHTTP/1.1 200 OK\n\n\n\n\n\n\nXML header request\n\n\n\n\nDELETE https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/xml \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nXML header response\n\n\n\n\nHTTP/1.1 200 OK\n\n\n\n\nBulk request\n\n\n\n\nJSON Request\n\n\nHeader\n\n\n\n\nPOST https://localhost:8080/oxTrust/seam/resource/restv1/Bulk/ \nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nRequest Content\n\n\n\n\n{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nOperations\n:[{\nmethod\n:\nPOST\n,\npath\n:\n/Users\n,\ndata\n:{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nexternalId\n:\nbulk\n,\nuserName\n:\nbulk\n,\nname\n:{\ngivenName\n:\nbulk\n,\nfamilyName\n:\nbulk\n,\nmiddleName\n:\nN/A\n,\nhonorificPrefix\n:\nN/A\n,\nhonorificSuffix\n:\nN/A\n},\ndisplayName\n:\nbulk bulk\n,\nnickName\n:\nbulk\n,\nprofileUrl\n:\nhttp://www.gluu.org/\n,\nemails\n:[{\nvalue\n:\nbulk@gluu.org\n,\ntype\n:\nwork\n,\nprimary\n:\ntrue\n},{\nvalue\n:\nbulk2@gluu.org\n,\ntype\n:\nhome\n,\nprimary\n:\nfalse\n}],\naddresses\n:[{\ntype\n:\nwork\n,\nstreetAddress\n:\n621 East 6th Street Suite 200\n,\nlocality\n:\nAustin\n,\nregion\n:\nTX\n,\npostalCode\n:\n78701\n,\ncountry\n:\nUS\n,\nformatted\n:\n621 East 6th Street Suite 200 Austin , TX 78701 US\n,\nprimary\n:\ntrue\n}],\nphoneNumbers\n:[{\nvalue\n:\n646-234-5678\n,\ntype\n:\nwork\n}],\nims\n:[{\nvalue\n:\nnynymike\n,\ntype\n:\nSkype\n}],\nphotos\n:[{\nvalue\n:\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n,\ntype\n:\ngluu photo\n}],\nuserType\n:\nCEO\n,\ntitle\n:\nCEO\n,\npreferredLanguage\n:\nen-us\n,\nlocale\n:\nen_US\n,\ntimezone\n:\nAmerica/Chicago\n,\nactive\n:\ntrue\n,\npassword\n:\nsecret\n,\ngroups\n:[{\ndisplay\n:\nGluu Manager Group\n,\nvalue\n:\n@!1111!0003!B2C6\n},{\ndisplay\n:\nGluu Owner Group\n,\nvalue\n:\n@!1111!0003!D9B4\n}],\nroles\n:[{\nvalue\n:\nOwner\n}],\nentitlements\n:[{\nvalue\n:\nfull access\n}],\nx509Certificates\n:[{\nvalue\n:\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n}],\nmeta\n:{\ncreated\n:\n2010-01-23T04:56:22Z\n,\nlastModified\n:\n2011-05-13T04:42:34Z\n,\nversion\n:\nW\\\\\\\nb431af54f0671a2\\\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n}},\nbulkId\n:\nonebunk\n},{\nmethod\n:\nPUT\n,\npath\n:\n/Users/@!1111!0000!C4C4\n, \nversion\n:\noneversion\n,\ndata\n:{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\ndisplayName\n:\nbulk person\n,\nexternalId\n:\nbulk\n}},{\nmethod\n:\nDELETE\n,\npath\n:\n/Users/@!1111!0000!C3C3\n,\nversion\n:\noneversion\n}]}\n\n\n\n\n\n\nJSON response\n\n\nHeader\n\n\n\n\n200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Bulk/\nContent-Type: application/json\n\n\n\n\n\n\nResponse Content\n\n\n\n\n{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nOperations\n:[{\nmethod\n:\nPOST\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!F8A1\n,\nversion\n:\n,\nstatus\n:{\ndescription\n:\n,\ncode\n:\n201\n},\nbulkId\n:\nonebunk\n},{\nmethod\n:\nPUT\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!C4C4\n,\nversion\n:\noneversion\n,\nstatus\n:{\ndescription\n:\n,\ncode\n:\n200\n},\nbulkId\n:\n},{\nmethod\n:\nDELETE\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!C3C3\n,\nversion\n:\n,\nstatus\n:{\ndescription\n:\n,\ncode\n:\n200\n},\nbulkId\n:\n}]}\n\n\n\n\n\n\nXML request\n\n\nHeader\n\n\n\n\nPOST https://localhost:8080/oxTrust/seam/resource/restv1/Bulk/ \nAccept: application/xml \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nRequest Content\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\nBulk xmlns=\nurn:scim:schemas:core:1.0\nOperations\noperation\nbulkId\nonebunk\n/bulkId\ndata\nexternalId\nbulk\n/externalId\nuserName\nbulk\n/userName\nname\ngivenName\nbulk\n/givenName\nfamilyName\nbulk\n/familyName\nmiddleName\nN/A\n/middleName\nhonorificPrefix\nN/A\n/honorificPrefix\nhonorificSuffix\nN/A\n/honorificSuffix\n/name\ndisplayName\nbulk bulk\n/displayName\nnickName\nbulk\n/nickName\nprofileUrl\nhttp://www.gluu.org/\n/profileUrl\nemails\nemail\nvalue\nbulk@gluu.org\n/value\ntype\nwork\n/type\nprimary\ntrue\n/primary\n/email\nemail\nvalue\nbulk2@gluu.org\n/value\ntype\nhome\n/type\nprimary\nfalse\n/primary\n/email\n/emails\naddresses\naddress\ntype\nwork\n/type\nstreetAddress\n621 East 6th Street Suite 200\n/streetAddress\nlocality\nAustin\n/locality\nregion\nTX\n/region\npostalCode\n78701\n/postalCode\ncountry\nUS\n/country\nformatted\n621 East 6th Street Suite 200  Austin , TX 78701 US\n/formatted\nprimary\ntrue\n/primary\n/address\n/addresses\nPhoneNumbers\nPhoneNumber\nvalue\n646-234-5678\n/value\ntype\nwork\n/type\n/PhoneNumber\n/PhoneNumbers\nims\nim\nvalue\nnynymike\n/value\ntype\nSkype\n/type\n/im\n/ims\nphotos\nphoto\nvalue\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n/value\ntype\ngluu photo\n/type\n/photo\n/photos\nuserType\nCEO\n/userType\ntitle\nCEO\n/title\npreferredLanguage\nen-us\n/preferredLanguage\nlocale\nen_US\n/locale\ntimezone\nAmerica/Chicago\n/timezone\nactive\ntrue\n/active\npassword\nsecret\n/password\ngroups\ngroup\ndisplay\nGluu Manager Group\n/display\nvalue\n@!1111!0003!B2C6\n/value\n/group\ngroup\ndisplay\nGluu Owner Group\n/display\nvalue\n@!1111!0003!D9B4\n/value\n/group\n/groups\nroles\nrole\nvalue\nOwner\n/value\n/role\n/roles\nentitlements\nentitlement\nvalue\nfull access\n/value\n/entitlement\n/entitlements\nx509Certificates\nx509Certificate\nvalue\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n/value\n/x509Certificate\n/x509Certificates\nmeta\ncreated\n2010-01-23T04:56:22Z\n/created\nlastModified\n2011-05-13T04:42:34Z\n/lastModified\nversion\naversion\n/version\nlocation\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n/location\n/meta\n/data\nlocation\n/location\nmethod\nPOST\n/method\npath\n/Users\n/path\nversion\n/version\n/operation\noperation\nbulkId\n/bulkId\ndata\nexternalId\nbulk\n/externalId\nuserName\n/userName\nname\ngivenName\n/givenName\nfamilyName\n/familyName\nmiddleName\n/middleName\nhonorificPrefix\n/honorificPrefix\nhonorificSuffix\n/honorificSuffix\n/name\ndisplayName\nbulk person\n/displayName\nnickName\n/nickName\nprofileUrl\n/profileUrl\nemails/\naddresses/\nPhoneNumbers/\nims/\nphotos/\nuserType\n/userType\ntitle\n/title\nlocale\n/locale\npassword\n/password\ngroups/\nroles/\nentitlements/\nx509Certificates/\nmeta\ncreated\n/created\nlastModified\n/lastModified\nversion\n/version\nlocation\n/location\n/meta\n/data\nlocation\n/location\nmethod\nPUT\n/method\npath\n/Users/@!1111!0000!C4C4\n/path\nversion\noneversion\n/version\n/operation\noperation\nbulkId\n/bulkId\ndata\nexternalId\n/externalId\nuserName\n/userName\nname\ngivenName\n/givenName\nfamilyName\n/familyName\nmiddleName\n/middleName\nhonorificPrefix\n/honorificPrefix\nhonorificSuffix\n/honorificSuffix\n/name\nnickName\n/nickName\nprofileUrl\n/profileUrl\nemails/\naddresses/\nPhoneNumbers/\nims/\nphotos/\nuserType\n/userType\ntitle\n/title\nlocale\n/locale\npassword\n/password\ngroups/\nroles/\nentitlements/\nx509Certificates/\nmeta\ncreated\n/created\nlastModified\n/lastModified\nversion\n/version\nlocation\n/location\n/meta\n/data\nlocation\n/location\nmethod\nDELETE\n/method\npath\n/Users/@!1111!0000!C3C3\n/path\nversion\noneversion\n/version\n/operation\n/Operations\n/Bulk\n\n\n\n\n\n\n\nXML Response\n\n\nHeader\n\n\n\n\n200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Bulk/\nContent-Type: application/xml\n\n\n\n\n\n\nResponse Content\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\nBulk xmlns=\nurn:scim:schemas:core:1.0\nOperations\noperation\nbulkId\nonebunk\n/bulkId\nlocation\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E0\n/location\nmethod\nPOST\n/method\nstatus\nCode\n201\n/Code\ndescription\n/description\n/status\nversion\n/version\n/operation\noperation\nbulkId\n/bulkId\nlocation\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!C4C4\n/location\nmethod\nPUT\n/method\nstatus\nCode\n200\n/Code\ndescription\n/description\n/status\nversion\noneversion\n/version\n/operation\noperation\nbulkId\n/bulkId\nlocation\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!C3C3\n/location\nmethod\nDELETE\n/method\nstatus\nCode\n200\n/Code\ndescription\n/description\n/status\nversion\n/version\n/operation\n/Operations\n/Bulk\n\n\n\n\n\nGetting a list of users\n\n\n\n\nJSON Request\n\n\nHeader\n\n\n\n\nGET https://localhost:8080/oxTrust/seam/resource/restv1/Users/\nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nJSON response\n\n\nHeader\n\n\n\n\n200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/\nContent-Type: application/json\n\n\n\n\n\n\nResponse Content\n\n\n\n\n{\ntotalResults\n:4,\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nresources\n:[{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nid\n:\n@!1111!0000!9711\n,\nexternalId\n:\nrandom\n,\nuserName\n:\nerik\n,\nname\n:{\ngivenName\n:\nErik\n,\nfamilyName\n:\nHartog\n,\nmiddleName\n:\nN/A\n,\nhonorificPrefix\n:\nN/A\n,\nhonorificSuffix\n:\nN/A\n},\ndisplayName\n:\nErik Hartog\n,\nnickName\n:\nErik\n,\nprofileUrl\n:\nhttp://www.gluu.org/\n,\nemails\n:[{\nvalue\n:\nrandom@gluu.org\n,\ntype\n:\nwork\n,\nprimary\n:\ntrue\n},{\nvalue\n:\nrandom2@gluu.org\n,\ntype\n:\nhome\n,\nprimary\n:\nfalse\n}],\naddresses\n:[{\ntype\n:\nwork\n,\nstreetAddress\n:\n621 East 6th Street Suite 200\n,\nlocality\n:\nAustin\n,\nregion\n:\nTX\n,\npostalCode\n:\n78701\n,\ncountry\n:\nUS\n,\nformatted\n:\n621 East 6th Street Suite 200  Austin , TX 78701 US\n,\nprimary\n:\ntrue\n}],\nphoneNumbers\n:[{\nvalue\n:\n646-234-5678\n,\ntype\n:\nwork\n}],\nims\n:[{\nvalue\n:\nerikk\n,\ntype\n:\nSkype\n}],\nphotos\n:[{\nvalue\n:\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n,\ntype\n:\ngluu photo\n}],\nuserType\n:\nuser\n,\ntitle\n:\nuser\n,\npreferredLanguage\n:\nen-us\n,\nlocale\n:\nen_US\n,\ntimezone\n:\nAmerica/Chicago\n,\nactive\n:\ntrue\n,\npassword\n:\nHidden for Privacy Reasons\n,\ngroups\n:[{\ndisplay\n:\nGluu Manager Group\n,\nvalue\n:\n@!1111!0003!B2C6\n},{\ndisplay\n:\nGluu Owner Group\n,\nvalue\n:\n@!1111!0003!D9B4\n}],\nroles\n:[{\nvalue\n:\nuser\n}],\nentitlements\n:[{\nvalue\n:\nlimited access\n}],\nx509Certificates\n:[{\nvalue\n:\nMIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\n}],\nmeta\n:{\ncreated\n:\n2010-01-23T04:56:22Z\n,\nlastModified\n:\n2011-05-13T04:42:34Z\n,\nversion\n:\nW\\\\\\\nb431af54f0671a2\\\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n}},{\nschemas\n:[\nurn:scim:schemas:core:1.0\n],\nid\n:\n@!1111!0000!D4E7\n,\nexternalId\n:\nmike\n,\nuserName\n:\nmike\n,\nname\n:{\ngivenName\n:\nJohn\n,\nfamilyName\n:\nSmith\n,\nmiddleName\n:\nN/A\n,\nhonorificPrefix\n:\nN/A\n,\nhonorificSuffix\n:\nN/A\n},\ndisplayName\n:\nJohn Smith\n,\nnickName\n:\nSensei\n,\nprofileUrl\n:\nhttp://www.gluu.org/\n,\nemails\n:[{\nvalue\n:\nmike@gluu.org\n,\ntype\n:\nwork\n,\nprimary\n:\ntrue\n},{\nvalue\n:\nmike2@gluu.org\n,\ntype\n:\nhome\n,\nprimary\n:\nfalse\n}],\naddresses\n:[{\ntype\n:\nwork\n,\nstreetAddress\n:\n621 East 6th Street Suite 200\n,\nlocality\n:\nAustin\n,\nregion\n:\nTX\n,\npostalCode\n:\n78701\n,\ncountry\n:\nUS\n,\nformatted\n:\n621 East 6th Street Suite 200  Austin , TX 78701 US\n,\nprimary\n:\ntrue\n}],\nphoneNumbers\n:[{\nvalue\n:\n646-234-5678\n,\ntype\n:\nwork\n}],\nims\n:[{\nvalue\n:\nnynymike\n,\ntype\n:\nSkype\n}],\nphotos\n:[{\nvalue\n:\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n,\ntype\n:\ngluu photo\n}],\nuserType\n:\nCEO\n,\ntitle\n:\nCEO\n,\npreferredLanguage\n:\nen-us\n,\nlocale\n:\nen_US\n,\ntimezone\n:\nAmerica/Chicago\n,\nactive\n:\ntrue\n,\npassword\n:\nHidden for Privacy Reasons\n,\ngroups\n:[{\ndisplay\n:\nGluu Manager Group\n,\nvalue\n:\n@!1111!0003!B2C6\n},{\ndisplay\n:\nGluu Owner Group\n,\nvalue\n:\n@!1111!0003!D9B4\n}],\nroles\n:[{\nvalue\n:\nOwner\n}],................................................the response is too long intentionally skipped some content for demo sake................................................,\nversion\n:\nW\\\\\\\nb431af54f0671a2\\\n,\nlocation\n:\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n}}]}\n\n\n\n\n\n\nXML request\n\n\nHeader\n\n\n\n\nGET https://localhost:8080/oxTrust/seam/resource/restv1/Users/\nAccept: application/xml \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949\n\n\n\n\n\n\nXML response\n\n\nHeader\n\n\n\n\n200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/\nContent-Type: application/xml\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\nResources xmlns=\nurn:scim:schemas:core:1.0\ntotalResults\n4\n/totalResults\nResources\nResource\nid\n@!1111!0000!9711\n/id\nexternalId\nrandom\n/externalId\nuserName\nerik\n/userName\nname\ngivenName\nErik\n/givenName\nfamilyName\nHartog\n/familyName\nmiddleName\nN/A\n/middleName\nhonorificPrefix\nN/A\n/honorificPrefix\nhonorificSuffix\nN/A\n/honorificSuffix\n/name\ndisplayName\nErik Hartog\n/displayName\nnickName\nErik\n/nickName\nprofileUrl\nhttp://www.gluu.org/\n/profileUrl\nemails\nemail\nvalue\nrandom@gluu.org\n/value\ntype\nwork\n/type\nprimary\ntrue\n/primary\n/email\nemail\nvalue\nrandom2@gluu.org\n/value\ntype\nhome\n/type\nprimary\nfalse\n/primary\n/email\n/emails\naddresses\naddress\ntype\nwork\n/type\nstreetAddress\n621 East 6th Street Suite 200\n/streetAddress\nlocality\nAustin\n/locality\nregion\nTX\n/region\npostalCode\n78701\n/postalCode\ncountry\nUS\n/country\nformatted\n621 East 6th Street Suite 200  Austin , TX 78701 US\n/formatted\nprimary\ntrue\n/primary\n/address\n/addresses\nPhoneNumbers\nPhoneNumber\nvalue\n646-234-5678\n/value\ntype\nwork\n/type\n/PhoneNumber\n/PhoneNumbers\nims\nim\nvalue\nerikk\n/value\ntype\nSkype\n/type\n/im\n/ims\nphotos\nphoto\nvalue\nhttp://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\n/value\ntype\ngluu photo\n/type\n/photo\n/photos\nuserType\nuser\n/userType\ntitle\nuser\n/title\npreferredLanguage\nen-us\n/preferredLanguage\nlocale\nen_US\n/locale\ntimezone\n................................................the response is too long intentionally skipped some content for demo sake................................................\n/version\nlocation\nhttp://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\n/location\n/meta\n/Resource\n/Resources\n/Resources\n\n\n\n\n\nSCIM-Client API\n\n\nSCIM-Client API , is a tool Gluu developed to make the communication with a SCIM server an easy task, SCIM-Client API can be used to build an application that sends request and receives responses from a SCIM server seamlessly.\n\n\nYou can checkout SCIM-client from our GIT repository : https://github.com/GluuFederation/SCIM-Client \n\n\nSCIM-client support both Basic and oAuth 2.0 authentication , below is an example on how to create a ScimClient instance\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\n\n\n\n\nThis will create an oAuth instance of ScimClient where: \nuserName\n and \npassWord\n are the user credentials , \nclientID\n and \nclientSecret\n are oxAuth client credentials , \ndomailURL\n is the domain where SCIM client resides, for example : \nhttp://localhost:8080/oxTrust/seam/resource/restv1\n and \noxAuthDomain\n is the \ntokenURL\n example \nhttp://localhost:8080/oxauth/seam/resource/restv1/oxauth/token\n\n\nScimClient client = ScimClient.basicInstance(userName, passWord, domainURL);\n\n\n\n\nFor the basic authentication you only need the user\u2019s credentials userName and passWord and the domain URL.\n\n\nAdding an entity\n\n\nIn this example we will show you how to add a person or a group using SCIM-Client, SCIM-Client API comes with two methods to accomplish that , \u201ccreatePerson\u201d and \u201ccreatePersonString\u201d ,with createPerson method you pass the person you want to add as ScimPerson object and you specify the desired media type format \u201cXML/JSON\u201d and SCIM-client API will parse the ScimPerson object into XML or JSON and send your request, Same applies to groups , you can use createGroup with ScimGroup as a parameter or createGroupString.\nYou can also use createPesronString method and pass the person as an XML or JSON String.\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimPerson person = new ScimPerson() ;\nperson.setUserName (String username );\nperson.setName.setGivenName(String firstName );\nperson.setName.setLastName(String lastName);\nScimResponse response = client.createPerson(person, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body \n\n\n\n\nIn this 2nd example we will use createPersonString \n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.createPersonString(String person, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body \n\n\n\n\nModifying an entity\n\n\nIn this example we will show you how to modify a person or a group using SCIM-Client, SCIM-Client API comes with two methods to accomplish that , \u201cupdatePerson\u201d and \u201cupdatePersonString\u201d ,with updatePerson method you pass the person you want to update as ScimPerson object and his uid as a String and you specify the desired media type format \u201cXML/JSON\u201d and SCIM-client API will parse the ScimPerson object into XML or JSON and send your request, Same applies to groups , you can use createGroup with ScimGroup as a parameter or createGroupString.\nYou can also use createPesronString method and pass the person as an XML or JSON String.\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.updatePersonString(String person, String uid, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body \n\n\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.updateGroupString(String group, String id, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body \n\n\n\n\nDeleting an entity\n\n\nTo delete an entity you simply pass it\u2019s ID as a String parameter into \u201cdeletePerson\u201d or \u201cdeleteGroup\u201d methods.\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.deletePerson(String uid);\nresponse.getStatusCode() // this will give you the Status code\n\n\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.deleteGroup(String id);\nresponse.getStatusCode() // this will give you the Status code\n\n\n\n\nRetrieving an entity\n\n\nTo retrieve a person or a group you can use \u201cretrievePerson\u201d or \u201cretrieveGroup\u201d method by passing the Entity\u2019s id as a parameter and the desired media type.\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.retrievePerson(String uid, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body \n\n\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.retrieveGroup(String id, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body \n\n\n\n\nBulk operations\n\n\nTo use Bulk operation you pass the operation as a ScimBulkOperation object into \u201cbulkOperation\u201d method or as a JSON/XML string into \u201cbulkOperationString\u201d method and without forgetting to specify the desired media type.\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.bulkOperationString(String operation, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body \n\n\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.bulkOperation(String operation, ScimBulkOperation operation, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body \n\n\n\n\noxAuth Client Creation\n\n\nIt\u2019s possible to create an oxAuth client dynamically using SCIM-Client , this option is available using the static method \u201ccreate\u201d method of the class \nOxAuthClientCreator\n, where \napplicationName\n is the name of the desired client, \nregisterUrl\n is the client registration url example : \n\nhttp://localhost:8080/oxauth/seam/resource/restv1/oxauth/register\n\nand \nredirectUris\n is a space separated String containing the desired redirect urls.\n\n\nCreationResult response = OxAuthClientCreator.create( applicationName, registerUrl, redirectUris);\nresponse.getStatus(); // the status of the request 200 if successful\nresponse.getClientId(); // the generated clientID\nresponse.getClientSecret(); // the generated clientSecret\nresponse.getExpiresAt(); // the expiration date of the client\n\n\n\n\nBulk requests from Excel files\n\n\nExcel spreadsheets are widely used by individuals and companies of different backgrounds , we at Gluu ,we thought about that , so we\u2019ve embedded SCIM-client with methods that can help you turn an Excel file into a ScimBulkOperation object .\nFor that reason we made two methods available , one for generation bulk users request \u201c mapUsers\u201d method and the other for generating bulk group requests \u201cmapGroups\u201d method , both methods takes the path to the \u201cXLS\u201d file as a parameter, methods are available at \u201cExcelMapper\u201d class;\n\n\nScimBulkOperation usersOperation = ExcelMapper.mapUsers(excelFileLocationUsers);\nScimBulkOperation groupsOperation = ExcelMapper.mapGroups(excelFileLocationGroups);\n\n\n\n\nYou can download the Excel file models from here : https://github.com/GluuFederation/SCIM-Client/tree/master/doc/SampleXLS\n\n\nExcel files must follow the exact structure, the \u201cOperation\u201d cell defines the type of the operation \u201dAdd,Update,delete\u201d .\nFor groups you can always add more groups to the spreadsheet following the same structure.\n\n\nSCIM Dynamic Custom Attributes\n\n\nSCIM supports only a specific set of attributes and if we want to add any custom ones we would have to refactor the code every time we have a requirement for a new attribute, at Gluu, we thought of that and we came up the a dynamic way to add custom attributes to the person\u2019s representation.\nAll you have to do is to add this portion to your person\u2019s representation :\nXML Example:\n\n\ncode XML\ncustomAttributes\n\n\nname\noxTrustCustAttrA\n/name\n\n\nvalues\n\n\nvalue\nsome random value1\n/value\n\n\nvalue\nsome random value2\n/value\n\n\n/values\n\n\n/customAttributes\n\n\n/code\n\n\n\n\n\nJSON Example:\n\n\ncustomAttributes\n:[{\nname\n:\noxTrustCustAttrA\n,\nvalues\n:[\nsome random value1\n,\nsome random value2\n]}]\n\n\n\n\nWhere \u201cname\u201d is the name of the LDAP attribute and \u201cvalues\u201d is its values , both single and multivalued attributes are supported , and custom attribute must be under \u201coxCustomAttributes\u201d objectClass or they may be under the gluuPerson one , also in the \u201cAttributes\u201d LDAP node you will need to add an entry representation for the attribute , when\u201coxSCIMCustomAttribute\u201d is set to true SCIM will look for that attribute in the person entry and if it has a value it will appear in the final result, when the attribute \u201coxMultivaluedAttribute\u201d is set to true SCIM will know that this attribute is Multivalued , example:\n\n\ndn: inum=@!1111!0005!8E7F,ou=attributes,o=@!1111,o=gluu\ndescription: Sample custom attribute.\ndisplayName: oxTrust Custom Attribute A\ngluuAttributeEditType: admin\ngluuAttributeName: oxTrustCustAttrA\ngluuAttributeOrigin: oxCustomAttributes\ngluuAttributePrivacyLevel: level3\ngluuAttributeType: string\ngluuAttributeViewType: admin\ngluuStatus: active\ninum: @!1111!0005!8E7F\nobjectClass: gluuAttribute\nobjectClass: top\noxMultivaluedAttribute: true\noxSCIMCustomAttribute: true\n\n\n\n\nUser search service\n\n\nThis service is used to lockup a person/user by a specific attribute search pattern , for example if you want to look for a person with the email ID reda@gluu.org all you will have to do is to provide the service with the exact LDAP attribute name and the value you wish to look for as a content, and the service will return the person in question.\n\n\nJSON Example:\n\n\nPOST https://localhost:8080/oxTrust/seam/resource/restv1/Users/Search \nAccept: application/json \nAuthorization: Basic bWlrZTpzZWNyZXQ=\n\n\n\n\nContent :\n\n\n{\nattribute\n:\noxTrustCustAttrA\n,\nvalue\n:\nsome random value1\n}\n\n\n\n\nXML example\n\n\nPOST https://localhost:8080/oxTrust/seam/resource/restv1/Users/Search \nAccept: application/xml \nAuthorization: Basic bWlrZTpzZWNyZXQ=\n\n\n\n\nContent:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n standalone=\nyes\n?\nSearchService xmlns=\nurn:scim:schemas:core:1.0\nattribute\noxTrustCustAttrA\n/attribute\nvalue\nsome random value1\n/value\n/SearchService\n\n\n\n\n\nThe result will be returned as a JSON or XML person as it would for a regular GET person operation. \n\n\nYou can use the SCIM-Client library as follows:\n\n\nScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.personSearch(attribute,value MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body \n\n\n\n\nWhere attribute is the attribute name, and value is the value you\u2019re looking for.", 
            "title": "Scim"
        }, 
        {
            "location": "/reference/lib/scim/#simple-cloud-identity-management", 
            "text": "What is SCIM?  The Simple Cloud Identity Management (SCIM) specification is a standard REST/JSON API to standardize user and group CRUD (create, read, update, delete). You can review the detailed specification at  http://www.simplecloud.info . \nThe specification seeks to build upon experience with existing schemas and deployments, placing specific emphasis on simplicity of development and integration, while applying existing authentication, authorization, and privacy models. It's intent is to reduce the cost and complexity of user management operations by providing a common user schema and extension model, as well as binding documents to provide patterns for exchanging this schema using standard protocols. In essence, make it fast, cheap, and easy to move users in to, out of, and around the cloud.  You can download a PDF copy of this guide from  HERE .", 
            "title": "Simple Cloud Identity Management"
        }, 
        {
            "location": "/reference/lib/scim/#specification", 
            "text": "SCIM is integrated as a service of oxTrust . To start operating with SCIM\u2019s web service , you will need to send a request to one of SCIM\u2019s endpoints , for example , if you want to add a user you need to send an HTTP request to this endpoint url :  https://localhost:8080/oxTrust/seam/resource/restv1/Users/  for bulk operations (adding modifying and deleting multiple users ) you have to send a request to the bulk endpoint:  https://localhost:8080/oxTrust/seam/resource/restv1/Bulk/  for group operations:  https://localhost:8080/oxTrust/seam/resource/restv1/Groups/  You need to have a the right credentials and roles in order for you to access the endpoint example, which is for oxTrust means that you are a member of the Owner or Manager group specified in the organization entry. \nGluu\u2019s SCIM web service uses both Basic authentication and oAuth 2.0 authentication . For the basic type of authentication you need to specify the user and password (base64 encoded) in the HTTP request HTTP header in order to be authenticated \nExample :  POST https://localhost:8080/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Basic bWlrZTpzZWNyZXQ=  For oAuth 2.0 authentication you need to request an access token via the SCIM client API in order for you to be able to get authenticated , the example below shows how an access token is sent to SCIM webservice as a header:  POST https://localhost:8080/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949  A user is represented in two formats, JSON and XML and you can specify what kind of format you want to use by indicating that in your HTTP request .   For JSON:   Accept: application/json    For XML   Accept: application/xml    Example of JSON representation   { schemas :[ urn:scim:schemas:core:1.0 ], id : @!1111!0000!D4E7 , externalId : john  , userName : john  , name :{ givenName : John , familyName : Smith , middleName : N/A , honorificPrefix : N/A , honorificSuffix : N/A }, displayName : John Smith , nickName : Sensei , profileUrl : http://www.gluu.org/ , emails :[{ value : john @gluu.org , type : work , primary : true },{ value : john 2@gluu.org , type : home , primary : false }], addresses :[{ type : work , streetAddress : 621 East 6th Street Suite 200 , locality : Austin , region : TX , postalCode : 78701 , country : US , formatted : 621 East 6th Street Suite 200 Austin , TX 78701 US , primary : true }], phoneNumbers :[{ value : 646-234-5678 , type : work }], ims :[{ value : nynyjohn  , type : Skype }], photos :[{ value : http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png , type : gluu photo }], userType : CEO , title : CEO , preferredLanguage : en-us , locale : en_US , timezone : America/Chicago , active : true , password : Hiden for Privacy Reasons , groups :[{ display : Gluu Manager Group , value : @!1111!0003!B2C6 },{ display : Gluu Owner Group , value : @!1111!0003!D9B4 }], roles :[{ value : Owner }], entitlements :[{ value : full access }], x509Certificates :[{ value : MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= }], meta :{ created : 2010-01-23T04:56:22Z , lastModified : 2011-05-13T04:42:34Z , version : W\\\\\\ b431af54f0671a2\\ , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 }}    XML format Example   ?xml version= 1.0  encoding= UTF-8  standalone= yes ? User xmlns= urn:scim:schemas:core:1.0 id @!1111!0000!D4E7 /id externalId john  /externalId userName john  /userName name givenName John /givenName familyName Smith /familyName middleName N/A /middleName honorificPrefix N/A /honorificPrefix honorificSuffix N/A /honorificSuffix /name displayName John Smith /displayName nickName Sensei /nickName profileUrl http://www.gluu.org/ /profileUrl emails email value john @gluu.org /value type work /type primary true /primary /email email value john 2@gluu.org /value type home /type primary false /primary /email /emails addresses address type work /type streetAddress 621 East 6th Street Suite 200 /streetAddress locality Austin /locality region TX /region postalCode 78701 /postalCode country US /country formatted 621 East 6th Street Suite 200 Austin , TX 78701 US /formatted primary true /primary /address /addresses PhoneNumbers PhoneNumber value 646-234-5678 /value type work /type /PhoneNumber /PhoneNumbers ims im value nynyjohn  /value type Skype /type /im /ims photos photo value http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png /value type gluu photo /type /photo /photos userType CEO /userType title CEO /title preferredLanguage en-us /preferredLanguage locale en_US /locale timezone America/Chicago /timezone active true /active password Hiden for Privacy Reasons /password groups group display Gluu Manager Group /display value @!1111!0003!B2C6 /value /group group display Gluu Owner Group /display value @!1111!0003!D9B4 /value /group /groups roles role value Owner /value /role /roles entitlements entitlement value full access /value /entitlement /entitlements x509Certificates x509Certificate value MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= /value /x509Certificate /x509Certificates meta created 2010-01-23T04:56:22Z /created lastModified 2011-05-13T04:42:34Z /lastModified version W\\ quot;b431af54f0671a2 quot; /version location http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 /location /meta /User", 
            "title": "Specification"
        }, 
        {
            "location": "/reference/lib/scim/#examples", 
            "text": "In this section you will find some examples of the operations that you can accomplish using SCIM.", 
            "title": "Examples"
        }, 
        {
            "location": "/reference/lib/scim/#adding-a-user", 
            "text": "In this example we will try to add a user in JSON and XML format:    JSON request  Header   POST https://localhost:8080/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   Request content   { schemas :[ urn:scim:schemas:core:1.0 ], externalId : john  , userName : john  , name :{ givenName : John , familyName : Smith , middleName : N/A , honorificPrefix : N/A , honorificSuffix : N/A }, displayName : John Smith , nickName : Sensei , profileUrl : http://www.gluu.org/ , emails :[{ value : john @gluu.org , type : work , primary : true },{ value : john 2@gluu.org , type : home , primary : false }], addresses :[{ type : work , streetAddress : 621 East 6th Street Suite 200 , locality : Austin , region : TX , postalCode : 78701 , country : US , formatted : 621 East 6th Street Suite 200 Austin , TX 78701 US , primary : true }], phoneNumbers :[{ value : 646-234-5678 , type : work }], ims :[{ value : nynyjohn  , type : Skype }], photos :[{ value : http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png , type : gluu photo }], userType : CEO , title : CEO , preferredLanguage : en-us , locale : en_US , timezone : America/Chicago , active : true , password : secret , groups :[{ display : Gluu Manager Group , value : @!1111!0003!B2C6 },{ display : Gluu Owner Group , value : @!1111!0003!D9B4 }], roles :[{ value : Owner }], entitlements :[{ value : full access }], x509Certificates :[{ value : MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= }], meta :{ created : 2010-01-23T04:56:22Z , lastModified : 2011-05-13T04:42:34Z , version : W\\\\\\ b431af54f0671a2\\ , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 }}   JSON response  Header   201 CREATED\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/json   response Content   { schemas :[ urn:scim:schemas:core:1.0 ], id : @!1111!0000!D4E7 , externalId : john  , userName : john  , name :{ givenName : John , familyName : Smith , middleName : N/A , honorificPrefix : N/A , honorificSuffix : N/A }, displayName : John Smith , nickName : Sensei , profileUrl : http://www.gluu.org/ , emails :[{ value : john@gluu.org , type : work , primary : true },{ value : john 2@gluu.org , type : home , primary : false }], addresses :[{ type : work , streetAddress : 621 East 6th Street Suite 200 , locality : Austin , region : TX , postalCode : 78701 , country : US , formatted : 621 East 6th Street Suite 200 Austin , TX 78701 US , primary : true }], phoneNumbers :[{ value : 646-234-5678 , type : work }], ims :[{ value : nynyjohn  , type : Skype }], photos :[{ value : http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png , type : gluu photo }], userType : CEO , title : CEO , preferredLanguage : en-us , locale : en_US , timezone : America/Chicago , active : true , password : Hiden for Privacy Reasons , groups :[{ display : Gluu Manager Group , value : @!1111!0003!B2C6 },{ display : Gluu Owner Group , value : @!1111!0003!D9B4 }], roles :[{ value : Owner }], entitlements :[{ value : full access }], x509Certificates :[{ value : MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= }], meta :{ created : 2010-01-23T04:56:22Z , lastModified : 2011-05-13T04:42:34Z , version : W\\\\\\ b431af54f0671a2\\ , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 }}   XML request  Header   POST https://localhost:8080/oxTrust/seam/resource/restv1/Users/ \nAccept: application/xml \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   Request Content   ?xml version= 1.0  encoding= UTF-8  standalone= yes ? User xmlns= urn:scim:schemas:core:1.0 externalId mike /externalId userName mike /userName name givenName John /givenName familyName Smith /familyName middleName N/A /middleName honorificPrefix N/A /honorificPrefix honorificSuffix N/A /honorificSuffix /name displayName John Smith /displayName nickName Sensei /nickName profileUrl http://www.gluu.org/ /profileUrl emails email value mike@gluu.org /value type work /type primary true /primary /email email value mike2@gluu.org /value type home /type primary false /primary /email /emails addresses address type work /type streetAddress 621 East 6th Street Suite 200 /streetAddress locality Austin /locality region TX /region postalCode 78701 /postalCode country US /country formatted 621 East 6th Street Suite 200  Austin , TX 78701 US /formatted primary true /primary /address /addresses PhoneNumbers PhoneNumber value 646-234-5678 /value type work /type /PhoneNumber /PhoneNumbers ims im value nynymike /value type Skype /type /im /ims photos photo value http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png /value type gluu photo /type /photo /photos userType CEO /userType title CEO /title preferredLanguage en-us /preferredLanguage locale en_US /locale timezone America/Chicago /timezone active true /active password secret /password groups group display Gluu Manager Group /display value @!1111!0003!B2C6 /value /group group display Gluu Owner Group /display value @!1111!0003!D9B4 /value /group /groups roles role value Owner /value /role /roles entitlements entitlement value full access /value /entitlement /entitlements x509Certificates x509Certificate value MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= /value /x509Certificate /x509Certificates meta created 2010-01-23T04:56:22Z /created lastModified 2011-05-13T04:42:34Z /lastModified version W\\ quot;b431af54f0671a2 quot; /version location http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 /location /meta /User    XML response  header   201 CREATED\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/xml   Response Content   ?xml version= 1.0  encoding= UTF-8  standalone= yes ? User xmlns= urn:scim:schemas:core:1.0 id @!1111!0000!D4E7 /id externalId mike /externalId userName mike /userName name givenName John /givenName familyName Smith /familyName middleName N/A /middleName honorificPrefix N/A /honorificPrefix honorificSuffix N/A /honorificSuffix /name displayName John Smith /displayName nickName Sensei /nickName profileUrl http://www.gluu.org/ /profileUrl emails email value mike@gluu.org /value type work /type primary true /primary /email email value mike2@gluu.org /value type home /type primary false /primary /email /emails addresses address type work /type streetAddress 621 East 6th Street Suite 200 /streetAddress locality Austin /locality region TX /region postalCode 78701 /postalCode country US /country formatted 621 East 6th Street Suite 200  Austin , TX 78701 US /formatted primary true /primary /address /addresses PhoneNumbers PhoneNumber value 646-234-5678 /value type work /type /PhoneNumber /PhoneNumbers ims im value nynymike /value type Skype /type /im /ims photos photo value http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png /value type gluu photo /type /photo /photos userType CEO /userType title CEO /title preferredLanguage en-us /preferredLanguage locale en_US /locale timezone America/Chicago /timezone active true /active password Hiden for Privacy Reasons /password groups group display Gluu Manager Group /display value @!1111!0003!B2C6 /value /group group display Gluu Owner Group /display value @!1111!0003!D9B4 /value /group /groups roles role value Owner /value /role /roles entitlements entitlement value full access /value /entitlement /entitlements x509Certificates x509Certificate value MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= /value /x509Certificate /x509Certificates meta created 2010-01-23T04:56:22Z /created lastModified 2011-05-13T04:42:34Z /lastModified version W\\ quot;b431af54f0671a2 quot; /version location http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 /location /meta /User", 
            "title": "Adding a user"
        }, 
        {
            "location": "/reference/lib/scim/#getting-a-user", 
            "text": "JSON request  Header   GET https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   JSON response  Header   200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/json   Response Content   { schemas :[ urn:scim:schemas:core:1.0 ], id : @!1111!0000!D4E7 , externalId : mike , userName : mike , name :{ givenName : John , familyName : Smith , middleName : N/A , honorificPrefix : N/A , honorificSuffix : N/A }, displayName : John Smith , nickName : Sensei , profileUrl : http://www.gluu.org/ , emails :[{ value : mike@gluu.org , type : work , primary : true },{ value : mike2@gluu.org , type : home , primary : false }], addresses :[{ type : work , streetAddress : 621 East 6th Street Suite 200 , locality : Austin , region : TX , postalCode : 78701 , country : US , formatted : 621 East 6th Street Suite 200 Austin , TX 78701 US , primary : true }], phoneNumbers :[{ value : 646-234-5678 , type : work }], ims :[{ value : nynymike , type : Skype }], photos :[{ value : http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png , type : gluu photo }], userType : CEO , title : CEO , preferredLanguage : en-us , locale : en_US , timezone : America/Chicago , active : true , password : Hiden for Privacy Reasons , groups :[{ display : Gluu Manager Group , value : @!1111!0003!B2C6 },{ display : Gluu Owner Group , value : @!1111!0003!D9B4 }], roles :[{ value : Owner }], entitlements :[{ value : full access }], x509Certificates :[{ value : MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= }], meta :{ created : 2010-01-23T04:56:22Z , lastModified : 2011-05-13T04:42:34Z , version : W\\\\\\ b431af54f0671a2\\ , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 }}   XML request  Header   GET https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   XML response  Header   200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/xml  ?xml version= 1.0  encoding= UTF-8  standalone= yes ? User xmlns= urn:scim:schemas:core:1.0 id @!1111!0000!D4E7 /id externalId mike /externalId userName mike /userName name givenName John /givenName familyName Smith /familyName middleName N/A /middleName honorificPrefix N/A /honorificPrefix honorificSuffix N/A /honorificSuffix /name displayName John Smith /displayName nickName Sensei /nickName profileUrl http://www.gluu.org/ /profileUrl emails email value mike@gluu.org /value type work /type primary true /primary /email email value mike2@gluu.org /value type home /type primary false /primary /email /emails addresses address type work /type streetAddress 621 East 6th Street Suite 200 /streetAddress locality Austin /locality region TX /region postalCode 78701 /postalCode country US /country formatted 621 East 6th Street Suite 200  Austin , TX 78701 US /formatted primary true /primary /address /addresses PhoneNumbers PhoneNumber value 646-234-5678 /value type work /type /PhoneNumber /PhoneNumbers ims im value nynymike /value type Skype /type /im /ims photos photo value http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png /value type gluu photo /type /photo /photos userType CEO /userType title CEO /title preferredLanguage en-us /preferredLanguage locale en_US /locale timezone America/Chicago /timezone active true /active password Hiden for Privacy Reasons /password groups group display Gluu Manager Group /display value @!1111!0003!B2C6 /value /group group display Gluu Owner Group /display value @!1111!0003!D9B4 /value /group /groups roles role value Owner /value /role /roles entitlements entitlement value full access /value /entitlement /entitlements x509Certificates x509Certificate value MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= /value /x509Certificate /x509Certificates meta created 2010-01-23T04:56:22Z /created lastModified 2011-05-13T04:42:34Z /lastModified version W\\ quot;b431af54f0671a2 quot; /version location http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 /location /meta /User", 
            "title": "Getting a user"
        }, 
        {
            "location": "/reference/lib/scim/#modifying-a-user", 
            "text": "JSON request  Header   PUT https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   Request content   { schemas :[ urn:scim:schemas:core:1.0 ], externalId : mike24 , password : Qb587QBJ }   JSON response  Header   200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/json   Response Content   { schemas :[ urn:scim:schemas:core:1.0 ], id : @!1111!0000!D4E7 , externalId : mike24 , userName : mike , name :{ givenName : John , familyName : Smith , middleName : N/A , honorificPrefix : N/A , honorificSuffix : N/A }, displayName : John Smith , nickName : Sensei , profileUrl : http://www.gluu.org/ , emails :[{ value : mike@gluu.org , type : work , primary : true },{ value : mike2@gluu.org , type : home , primary : false }], addresses :[{ type : work , streetAddress : 621 East 6th Street Suite 200 , locality : Austin , region : TX , postalCode : 78701 , country : US , formatted : 621 East 6th Street Suite 200 Austin , TX 78701 US , primary : true }], phoneNumbers :[{ value : 646-234-5678 , type : work }], ims :[{ value : nynymike , type : Skype }], photos :[{ value : http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png , type : gluu photo }], userType : CEO , title : CEO , preferredLanguage : en-us , locale : en_US , timezone : America/Chicago , active : true , password : Hiden for Privacy Reasons , groups :[{ display : Gluu Manager Group , value : @!1111!0003!B2C6 },{ display : Gluu Owner Group , value : @!1111!0003!D9B4 }], roles :[{ value : Owner }], entitlements :[{ value : full access }], x509Certificates :[{ value : MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= }], meta :{ created : 2010-01-23T04:56:22Z , lastModified : 2011-05-13T04:42:34Z , version : W\\\\\\ b431af54f0671a2\\ , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 }}   XML request  header   PUT https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/xml \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   Request Content   ` ?xml version= 1.0  encoding= UTF-8  standalone= yes ? `` User xmlns= urn:scim:schemas:core:1.0 `` externalId `mike26` /externalId `` password `Qb587QBJ` /password `` /user `   XML response  Header   200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type: application/xml   Response Content   ?xml version= 1.0  encoding= UTF-8  standalone= yes ? User xmlns= urn:scim:schemas:core:1.0 id @!1111!0000!D4E7 /id externalId mike26 /externalId userName mike /userName name givenName John /givenName familyName Smith /familyName middleName N/A /middleName honorificPrefix N/A /honorificPrefix honorificSuffix N/A /honorificSuffix /name displayName John Smith /displayName nickName Sensei /nickName profileUrl http://www.gluu.org/ /profileUrl emails email value mike@gluu.org /value type work /type primary true /primary /email email value mike2@gluu.org /value type home /type primary false /primary /email /emails addresses address type work /type streetAddress 621 East 6th Street Suite 200 /streetAddress locality Austin /locality region TX /region postalCode 78701 /postalCode country US /country formatted 621 East 6th Street Suite 200  Austin , TX 78701 US /formatted primary true /primary /address /addresses PhoneNumbers PhoneNumber value 646-234-5678 /value type work /type /PhoneNumber /PhoneNumbers ims im value nynymike /value type Skype /type /im /ims photos photo value http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png /value type gluu photo /type /photo /photos userType CEO /userType title CEO /title preferredLanguage en-us /preferredLanguage locale en_US /locale timezone America/Chicago /timezone active true /active password Hiden for Privacy Reasons /password groups group display Gluu Manager Group /display value @!1111!0003!B2C6 /value /group group display Gluu Owner Group /display value @!1111!0003!D9B4 /value /group /groups roles role value Owner /value /role /roles entitlements entitlement value full access /value /entitlement /entitlements x509Certificates x509Certificate value MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= /value /x509Certificate /x509Certificates meta created 2010-01-23T04:56:22Z /created lastModified 2011-05-13T04:42:34Z /lastModified version W\\ quot;b431af54f0671a2 quot; /version location http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 /location /meta /User", 
            "title": "Modifying a user"
        }, 
        {
            "location": "/reference/lib/scim/#delete-a-user", 
            "text": "JSON header request   DELETE https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   JSON header response   HTTP/1.1 200 OK   XML header request   DELETE https://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nAccept: application/xml \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   XML header response   HTTP/1.1 200 OK", 
            "title": "Delete a user"
        }, 
        {
            "location": "/reference/lib/scim/#bulk-request", 
            "text": "JSON Request  Header   POST https://localhost:8080/oxTrust/seam/resource/restv1/Bulk/ \nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   Request Content   { schemas :[ urn:scim:schemas:core:1.0 ], Operations :[{ method : POST , path : /Users , data :{ schemas :[ urn:scim:schemas:core:1.0 ], externalId : bulk , userName : bulk , name :{ givenName : bulk , familyName : bulk , middleName : N/A , honorificPrefix : N/A , honorificSuffix : N/A }, displayName : bulk bulk , nickName : bulk , profileUrl : http://www.gluu.org/ , emails :[{ value : bulk@gluu.org , type : work , primary : true },{ value : bulk2@gluu.org , type : home , primary : false }], addresses :[{ type : work , streetAddress : 621 East 6th Street Suite 200 , locality : Austin , region : TX , postalCode : 78701 , country : US , formatted : 621 East 6th Street Suite 200 Austin , TX 78701 US , primary : true }], phoneNumbers :[{ value : 646-234-5678 , type : work }], ims :[{ value : nynymike , type : Skype }], photos :[{ value : http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png , type : gluu photo }], userType : CEO , title : CEO , preferredLanguage : en-us , locale : en_US , timezone : America/Chicago , active : true , password : secret , groups :[{ display : Gluu Manager Group , value : @!1111!0003!B2C6 },{ display : Gluu Owner Group , value : @!1111!0003!D9B4 }], roles :[{ value : Owner }], entitlements :[{ value : full access }], x509Certificates :[{ value : MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= }], meta :{ created : 2010-01-23T04:56:22Z , lastModified : 2011-05-13T04:42:34Z , version : W\\\\\\ b431af54f0671a2\\ , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 }}, bulkId : onebunk },{ method : PUT , path : /Users/@!1111!0000!C4C4 ,  version : oneversion , data :{ schemas :[ urn:scim:schemas:core:1.0 ], displayName : bulk person , externalId : bulk }},{ method : DELETE , path : /Users/@!1111!0000!C3C3 , version : oneversion }]}   JSON response  Header   200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Bulk/\nContent-Type: application/json   Response Content   { schemas :[ urn:scim:schemas:core:1.0 ], Operations :[{ method : POST , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!F8A1 , version : , status :{ description : , code : 201 }, bulkId : onebunk },{ method : PUT , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!C4C4 , version : oneversion , status :{ description : , code : 200 }, bulkId : },{ method : DELETE , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!C3C3 , version : , status :{ description : , code : 200 }, bulkId : }]}   XML request  Header   POST https://localhost:8080/oxTrust/seam/resource/restv1/Bulk/ \nAccept: application/xml \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   Request Content   ?xml version= 1.0  encoding= UTF-8  standalone= yes ? Bulk xmlns= urn:scim:schemas:core:1.0 Operations operation bulkId onebunk /bulkId data externalId bulk /externalId userName bulk /userName name givenName bulk /givenName familyName bulk /familyName middleName N/A /middleName honorificPrefix N/A /honorificPrefix honorificSuffix N/A /honorificSuffix /name displayName bulk bulk /displayName nickName bulk /nickName profileUrl http://www.gluu.org/ /profileUrl emails email value bulk@gluu.org /value type work /type primary true /primary /email email value bulk2@gluu.org /value type home /type primary false /primary /email /emails addresses address type work /type streetAddress 621 East 6th Street Suite 200 /streetAddress locality Austin /locality region TX /region postalCode 78701 /postalCode country US /country formatted 621 East 6th Street Suite 200  Austin , TX 78701 US /formatted primary true /primary /address /addresses PhoneNumbers PhoneNumber value 646-234-5678 /value type work /type /PhoneNumber /PhoneNumbers ims im value nynymike /value type Skype /type /im /ims photos photo value http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png /value type gluu photo /type /photo /photos userType CEO /userType title CEO /title preferredLanguage en-us /preferredLanguage locale en_US /locale timezone America/Chicago /timezone active true /active password secret /password groups group display Gluu Manager Group /display value @!1111!0003!B2C6 /value /group group display Gluu Owner Group /display value @!1111!0003!D9B4 /value /group /groups roles role value Owner /value /role /roles entitlements entitlement value full access /value /entitlement /entitlements x509Certificates x509Certificate value MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= /value /x509Certificate /x509Certificates meta created 2010-01-23T04:56:22Z /created lastModified 2011-05-13T04:42:34Z /lastModified version aversion /version location http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 /location /meta /data location /location method POST /method path /Users /path version /version /operation operation bulkId /bulkId data externalId bulk /externalId userName /userName name givenName /givenName familyName /familyName middleName /middleName honorificPrefix /honorificPrefix honorificSuffix /honorificSuffix /name displayName bulk person /displayName nickName /nickName profileUrl /profileUrl emails/ addresses/ PhoneNumbers/ ims/ photos/ userType /userType title /title locale /locale password /password groups/ roles/ entitlements/ x509Certificates/ meta created /created lastModified /lastModified version /version location /location /meta /data location /location method PUT /method path /Users/@!1111!0000!C4C4 /path version oneversion /version /operation operation bulkId /bulkId data externalId /externalId userName /userName name givenName /givenName familyName /familyName middleName /middleName honorificPrefix /honorificPrefix honorificSuffix /honorificSuffix /name nickName /nickName profileUrl /profileUrl emails/ addresses/ PhoneNumbers/ ims/ photos/ userType /userType title /title locale /locale password /password groups/ roles/ entitlements/ x509Certificates/ meta created /created lastModified /lastModified version /version location /location /meta /data location /location method DELETE /method path /Users/@!1111!0000!C3C3 /path version oneversion /version /operation /Operations /Bulk    XML Response  Header   200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Bulk/\nContent-Type: application/xml   Response Content   ?xml version= 1.0  encoding= UTF-8  standalone= yes ? Bulk xmlns= urn:scim:schemas:core:1.0 Operations operation bulkId onebunk /bulkId location http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E0 /location method POST /method status Code 201 /Code description /description /status version /version /operation operation bulkId /bulkId location http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!C4C4 /location method PUT /method status Code 200 /Code description /description /status version oneversion /version /operation operation bulkId /bulkId location http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!C3C3 /location method DELETE /method status Code 200 /Code description /description /status version /version /operation /Operations /Bulk", 
            "title": "Bulk request"
        }, 
        {
            "location": "/reference/lib/scim/#getting-a-list-of-users", 
            "text": "JSON Request  Header   GET https://localhost:8080/oxTrust/seam/resource/restv1/Users/\nAccept: application/json \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   JSON response  Header   200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/\nContent-Type: application/json   Response Content   { totalResults :4, schemas :[ urn:scim:schemas:core:1.0 ], resources :[{ schemas :[ urn:scim:schemas:core:1.0 ], id : @!1111!0000!9711 , externalId : random , userName : erik , name :{ givenName : Erik , familyName : Hartog , middleName : N/A , honorificPrefix : N/A , honorificSuffix : N/A }, displayName : Erik Hartog , nickName : Erik , profileUrl : http://www.gluu.org/ , emails :[{ value : random@gluu.org , type : work , primary : true },{ value : random2@gluu.org , type : home , primary : false }], addresses :[{ type : work , streetAddress : 621 East 6th Street Suite 200 , locality : Austin , region : TX , postalCode : 78701 , country : US , formatted : 621 East 6th Street Suite 200  Austin , TX 78701 US , primary : true }], phoneNumbers :[{ value : 646-234-5678 , type : work }], ims :[{ value : erikk , type : Skype }], photos :[{ value : http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png , type : gluu photo }], userType : user , title : user , preferredLanguage : en-us , locale : en_US , timezone : America/Chicago , active : true , password : Hidden for Privacy Reasons , groups :[{ display : Gluu Manager Group , value : @!1111!0003!B2C6 },{ display : Gluu Owner Group , value : @!1111!0003!D9B4 }], roles :[{ value : user }], entitlements :[{ value : limited access }], x509Certificates :[{ value : MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo= }], meta :{ created : 2010-01-23T04:56:22Z , lastModified : 2011-05-13T04:42:34Z , version : W\\\\\\ b431af54f0671a2\\ , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 }},{ schemas :[ urn:scim:schemas:core:1.0 ], id : @!1111!0000!D4E7 , externalId : mike , userName : mike , name :{ givenName : John , familyName : Smith , middleName : N/A , honorificPrefix : N/A , honorificSuffix : N/A }, displayName : John Smith , nickName : Sensei , profileUrl : http://www.gluu.org/ , emails :[{ value : mike@gluu.org , type : work , primary : true },{ value : mike2@gluu.org , type : home , primary : false }], addresses :[{ type : work , streetAddress : 621 East 6th Street Suite 200 , locality : Austin , region : TX , postalCode : 78701 , country : US , formatted : 621 East 6th Street Suite 200  Austin , TX 78701 US , primary : true }], phoneNumbers :[{ value : 646-234-5678 , type : work }], ims :[{ value : nynymike , type : Skype }], photos :[{ value : http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png , type : gluu photo }], userType : CEO , title : CEO , preferredLanguage : en-us , locale : en_US , timezone : America/Chicago , active : true , password : Hidden for Privacy Reasons , groups :[{ display : Gluu Manager Group , value : @!1111!0003!B2C6 },{ display : Gluu Owner Group , value : @!1111!0003!D9B4 }], roles :[{ value : Owner }],................................................the response is too long intentionally skipped some content for demo sake................................................, version : W\\\\\\ b431af54f0671a2\\ , location : http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 }}]}   XML request  Header   GET https://localhost:8080/oxTrust/seam/resource/restv1/Users/\nAccept: application/xml \nAuthorization: Bearer 91732a27-fd00-487a-9dde-a6ed2fac6949   XML response  Header   200 OK\nServer: Apache-Coyote/1.1\nLocation: https://localhost:8080/oxTrust/seam/resource/restv1/Users/\nContent-Type: application/xml  ?xml version= 1.0  encoding= UTF-8  standalone= yes ? Resources xmlns= urn:scim:schemas:core:1.0 totalResults 4 /totalResults Resources Resource id @!1111!0000!9711 /id externalId random /externalId userName erik /userName name givenName Erik /givenName familyName Hartog /familyName middleName N/A /middleName honorificPrefix N/A /honorificPrefix honorificSuffix N/A /honorificSuffix /name displayName Erik Hartog /displayName nickName Erik /nickName profileUrl http://www.gluu.org/ /profileUrl emails email value random@gluu.org /value type work /type primary true /primary /email email value random2@gluu.org /value type home /type primary false /primary /email /emails addresses address type work /type streetAddress 621 East 6th Street Suite 200 /streetAddress locality Austin /locality region TX /region postalCode 78701 /postalCode country US /country formatted 621 East 6th Street Suite 200  Austin , TX 78701 US /formatted primary true /primary /address /addresses PhoneNumbers PhoneNumber value 646-234-5678 /value type work /type /PhoneNumber /PhoneNumbers ims im value erikk /value type Skype /type /im /ims photos photo value http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png /value type gluu photo /type /photo /photos userType user /userType title user /title preferredLanguage en-us /preferredLanguage locale en_US /locale timezone ................................................the response is too long intentionally skipped some content for demo sake................................................ /version location http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7 /location /meta /Resource /Resources /Resources", 
            "title": "Getting a list of users"
        }, 
        {
            "location": "/reference/lib/scim/#scim-client-api", 
            "text": "SCIM-Client API , is a tool Gluu developed to make the communication with a SCIM server an easy task, SCIM-Client API can be used to build an application that sends request and receives responses from a SCIM server seamlessly.  You can checkout SCIM-client from our GIT repository : https://github.com/GluuFederation/SCIM-Client   SCIM-client support both Basic and oAuth 2.0 authentication , below is an example on how to create a ScimClient instance  ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);  This will create an oAuth instance of ScimClient where:  userName  and  passWord  are the user credentials ,  clientID  and  clientSecret  are oxAuth client credentials ,  domailURL  is the domain where SCIM client resides, for example :  http://localhost:8080/oxTrust/seam/resource/restv1  and  oxAuthDomain  is the  tokenURL  example  http://localhost:8080/oxauth/seam/resource/restv1/oxauth/token  ScimClient client = ScimClient.basicInstance(userName, passWord, domainURL);  For the basic authentication you only need the user\u2019s credentials userName and passWord and the domain URL.", 
            "title": "SCIM-Client API"
        }, 
        {
            "location": "/reference/lib/scim/#adding-an-entity", 
            "text": "In this example we will show you how to add a person or a group using SCIM-Client, SCIM-Client API comes with two methods to accomplish that , \u201ccreatePerson\u201d and \u201ccreatePersonString\u201d ,with createPerson method you pass the person you want to add as ScimPerson object and you specify the desired media type format \u201cXML/JSON\u201d and SCIM-client API will parse the ScimPerson object into XML or JSON and send your request, Same applies to groups , you can use createGroup with ScimGroup as a parameter or createGroupString.\nYou can also use createPesronString method and pass the person as an XML or JSON String.  ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimPerson person = new ScimPerson() ;\nperson.setUserName (String username );\nperson.setName.setGivenName(String firstName );\nperson.setName.setLastName(String lastName);\nScimResponse response = client.createPerson(person, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body   In this 2nd example we will use createPersonString   ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.createPersonString(String person, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body", 
            "title": "Adding an entity"
        }, 
        {
            "location": "/reference/lib/scim/#modifying-an-entity", 
            "text": "In this example we will show you how to modify a person or a group using SCIM-Client, SCIM-Client API comes with two methods to accomplish that , \u201cupdatePerson\u201d and \u201cupdatePersonString\u201d ,with updatePerson method you pass the person you want to update as ScimPerson object and his uid as a String and you specify the desired media type format \u201cXML/JSON\u201d and SCIM-client API will parse the ScimPerson object into XML or JSON and send your request, Same applies to groups , you can use createGroup with ScimGroup as a parameter or createGroupString.\nYou can also use createPesronString method and pass the person as an XML or JSON String.  ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.updatePersonString(String person, String uid, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body   ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.updateGroupString(String group, String id, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body", 
            "title": "Modifying an entity"
        }, 
        {
            "location": "/reference/lib/scim/#deleting-an-entity", 
            "text": "To delete an entity you simply pass it\u2019s ID as a String parameter into \u201cdeletePerson\u201d or \u201cdeleteGroup\u201d methods.  ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.deletePerson(String uid);\nresponse.getStatusCode() // this will give you the Status code  ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.deleteGroup(String id);\nresponse.getStatusCode() // this will give you the Status code", 
            "title": "Deleting an entity"
        }, 
        {
            "location": "/reference/lib/scim/#retrieving-an-entity", 
            "text": "To retrieve a person or a group you can use \u201cretrievePerson\u201d or \u201cretrieveGroup\u201d method by passing the Entity\u2019s id as a parameter and the desired media type.  ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.retrievePerson(String uid, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body   ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.retrieveGroup(String id, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body", 
            "title": "Retrieving an entity"
        }, 
        {
            "location": "/reference/lib/scim/#bulk-operations", 
            "text": "To use Bulk operation you pass the operation as a ScimBulkOperation object into \u201cbulkOperation\u201d method or as a JSON/XML string into \u201cbulkOperationString\u201d method and without forgetting to specify the desired media type.  ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.bulkOperationString(String operation, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body   ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.bulkOperation(String operation, ScimBulkOperation operation, MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body", 
            "title": "Bulk operations"
        }, 
        {
            "location": "/reference/lib/scim/#oxauth-client-creation", 
            "text": "It\u2019s possible to create an oxAuth client dynamically using SCIM-Client , this option is available using the static method \u201ccreate\u201d method of the class  OxAuthClientCreator , where  applicationName  is the name of the desired client,  registerUrl  is the client registration url example :  http://localhost:8080/oxauth/seam/resource/restv1/oxauth/register \nand  redirectUris  is a space separated String containing the desired redirect urls.  CreationResult response = OxAuthClientCreator.create( applicationName, registerUrl, redirectUris);\nresponse.getStatus(); // the status of the request 200 if successful\nresponse.getClientId(); // the generated clientID\nresponse.getClientSecret(); // the generated clientSecret\nresponse.getExpiresAt(); // the expiration date of the client", 
            "title": "oxAuth Client Creation"
        }, 
        {
            "location": "/reference/lib/scim/#bulk-requests-from-excel-files", 
            "text": "Excel spreadsheets are widely used by individuals and companies of different backgrounds , we at Gluu ,we thought about that , so we\u2019ve embedded SCIM-client with methods that can help you turn an Excel file into a ScimBulkOperation object .\nFor that reason we made two methods available , one for generation bulk users request \u201c mapUsers\u201d method and the other for generating bulk group requests \u201cmapGroups\u201d method , both methods takes the path to the \u201cXLS\u201d file as a parameter, methods are available at \u201cExcelMapper\u201d class;  ScimBulkOperation usersOperation = ExcelMapper.mapUsers(excelFileLocationUsers);\nScimBulkOperation groupsOperation = ExcelMapper.mapGroups(excelFileLocationGroups);  You can download the Excel file models from here : https://github.com/GluuFederation/SCIM-Client/tree/master/doc/SampleXLS  Excel files must follow the exact structure, the \u201cOperation\u201d cell defines the type of the operation \u201dAdd,Update,delete\u201d .\nFor groups you can always add more groups to the spreadsheet following the same structure.", 
            "title": "Bulk requests from Excel files"
        }, 
        {
            "location": "/reference/lib/scim/#scim-dynamic-custom-attributes", 
            "text": "SCIM supports only a specific set of attributes and if we want to add any custom ones we would have to refactor the code every time we have a requirement for a new attribute, at Gluu, we thought of that and we came up the a dynamic way to add custom attributes to the person\u2019s representation.\nAll you have to do is to add this portion to your person\u2019s representation :\nXML Example:  code XML customAttributes  name oxTrustCustAttrA /name  values  value some random value1 /value  value some random value2 /value  /values  /customAttributes  /code   JSON Example:  customAttributes :[{ name : oxTrustCustAttrA , values :[ some random value1 , some random value2 ]}]  Where \u201cname\u201d is the name of the LDAP attribute and \u201cvalues\u201d is its values , both single and multivalued attributes are supported , and custom attribute must be under \u201coxCustomAttributes\u201d objectClass or they may be under the gluuPerson one , also in the \u201cAttributes\u201d LDAP node you will need to add an entry representation for the attribute , when\u201coxSCIMCustomAttribute\u201d is set to true SCIM will look for that attribute in the person entry and if it has a value it will appear in the final result, when the attribute \u201coxMultivaluedAttribute\u201d is set to true SCIM will know that this attribute is Multivalued , example:  dn: inum=@!1111!0005!8E7F,ou=attributes,o=@!1111,o=gluu\ndescription: Sample custom attribute.\ndisplayName: oxTrust Custom Attribute A\ngluuAttributeEditType: admin\ngluuAttributeName: oxTrustCustAttrA\ngluuAttributeOrigin: oxCustomAttributes\ngluuAttributePrivacyLevel: level3\ngluuAttributeType: string\ngluuAttributeViewType: admin\ngluuStatus: active\ninum: @!1111!0005!8E7F\nobjectClass: gluuAttribute\nobjectClass: top\noxMultivaluedAttribute: true\noxSCIMCustomAttribute: true", 
            "title": "SCIM Dynamic Custom Attributes"
        }, 
        {
            "location": "/reference/lib/scim/#user-search-service", 
            "text": "This service is used to lockup a person/user by a specific attribute search pattern , for example if you want to look for a person with the email ID reda@gluu.org all you will have to do is to provide the service with the exact LDAP attribute name and the value you wish to look for as a content, and the service will return the person in question.  JSON Example:  POST https://localhost:8080/oxTrust/seam/resource/restv1/Users/Search \nAccept: application/json \nAuthorization: Basic bWlrZTpzZWNyZXQ=  Content :  { attribute : oxTrustCustAttrA , value : some random value1 }  XML example  POST https://localhost:8080/oxTrust/seam/resource/restv1/Users/Search \nAccept: application/xml \nAuthorization: Basic bWlrZTpzZWNyZXQ=  Content:  ?xml version= 1.0  encoding= UTF-8  standalone= yes ? SearchService xmlns= urn:scim:schemas:core:1.0 attribute oxTrustCustAttrA /attribute value some random value1 /value /SearchService   The result will be returned as a JSON or XML person as it would for a regular GET person operation.   You can use the SCIM-Client library as follows:  ScimClient client = ScimClient.oAuthInstance(userName, passWord, clientID,clientSecret, domainURL, oxAuthDomain);\nScimResponse response = client.personSearch(attribute,value MediaType.APPLICATION_JSON);\nresponse.getStatusCode() // this will give you the Status code\nString result = response.getResponseBodyString(); // this will give you Response body   Where attribute is the attribute name, and value is the value you\u2019re looking for.", 
            "title": "User search service"
        }, 
        {
            "location": "/reference/lib/uma/", 
            "text": "UMA\n\n\nGluu Server has complete implementation of UMA protocol and in addition provides flexible authorization scripts.\n\n\nReference\n\n\nUMA Client\n\n\n\n\nUMA Client on Maven repo: http://ox.gluu.org/maven/org/xdi/oxauth-client/1.3.2.Final/oxauth-client-1.3.2.Final.jar\n\n\nUMA Client sources: https://svn.gluu.info/repository/openxdi/oxAuth/trunk/Client/src/main/java/org/xdi/oxauth/client/uma/\n\n\nUMA Client test sources: https://svn.gluu.info/repository/openxdi/oxAuth/trunk/Client/src/test/java/org/xdi/oxauth/ws/rs/uma/\n\n\n\n\nIf you use maven you can use Gluu Maven public repository:\n\n\nRepo url:\n\n\nhttp://ox.gluu.org/maven/\n\n\n\n\nDependency:\n\n\n   \ngroupId\norg.xdi\n/groupId\n\n   \nartifactId\noxauth-client\n/artifactId\n\n   \nversion\n1.3.2.Final\n/version\n\n\n\n\n\nUMA Server\n\n\nUMA Server is part of Gluu Server. To pick it up please refer to Gluu Server (oxAuth) documentation.\n\n\nUMA Server source code:\n\n\nhttps://svn.gluu.info/repository/openxdi/oxAuth/trunk/Server/src/main/java/org/xdi/oxauth/uma/ws/rs/\nhttps://svn.gluu.info/repository/openxdi/oxAuth/trunk/Server/src/main/java/org/xdi/oxauth/service/uma/\n\n\n\n\nSample of Gluu Server in Action\n\n\nIt may be not as obvious how to make whole UMA scenario work between different parties : Resource Server, Relying Party and Authorization Server. For this reason Gluu prepares :\n\n\n\n\nGluu Server - Authorization Server\n\n\noxuma-rp\n - sample Relying Party\n\n\noxuma-rs\n - sample Resource Server\n\n\n\n\nReferences\n\n\n\n\nUMA Specifications\n\n\nUMA Requestion Party Sample implementation\n\n\nUMA Resource Server Sample implementation\n\n\nGluu Server\n\n\nJuju Application Security Framework (JASF) Overview", 
            "title": "Uma"
        }, 
        {
            "location": "/reference/lib/uma/#uma", 
            "text": "Gluu Server has complete implementation of UMA protocol and in addition provides flexible authorization scripts.", 
            "title": "UMA"
        }, 
        {
            "location": "/reference/lib/uma/#reference", 
            "text": "UMA Client   UMA Client on Maven repo: http://ox.gluu.org/maven/org/xdi/oxauth-client/1.3.2.Final/oxauth-client-1.3.2.Final.jar  UMA Client sources: https://svn.gluu.info/repository/openxdi/oxAuth/trunk/Client/src/main/java/org/xdi/oxauth/client/uma/  UMA Client test sources: https://svn.gluu.info/repository/openxdi/oxAuth/trunk/Client/src/test/java/org/xdi/oxauth/ws/rs/uma/   If you use maven you can use Gluu Maven public repository:  Repo url:  http://ox.gluu.org/maven/  Dependency:      groupId org.xdi /groupId \n    artifactId oxauth-client /artifactId \n    version 1.3.2.Final /version   UMA Server  UMA Server is part of Gluu Server. To pick it up please refer to Gluu Server (oxAuth) documentation.  UMA Server source code:  https://svn.gluu.info/repository/openxdi/oxAuth/trunk/Server/src/main/java/org/xdi/oxauth/uma/ws/rs/\nhttps://svn.gluu.info/repository/openxdi/oxAuth/trunk/Server/src/main/java/org/xdi/oxauth/service/uma/", 
            "title": "Reference"
        }, 
        {
            "location": "/reference/lib/uma/#sample-of-gluu-server-in-action", 
            "text": "It may be not as obvious how to make whole UMA scenario work between different parties : Resource Server, Relying Party and Authorization Server. For this reason Gluu prepares :   Gluu Server - Authorization Server  oxuma-rp  - sample Relying Party  oxuma-rs  - sample Resource Server", 
            "title": "Sample of Gluu Server in Action"
        }, 
        {
            "location": "/reference/lib/uma/#references", 
            "text": "UMA Specifications  UMA Requestion Party Sample implementation  UMA Resource Server Sample implementation  Gluu Server  Juju Application Security Framework (JASF) Overview", 
            "title": "References"
        }, 
        {
            "location": "/articles/mod-auth-oidc/ubuntu-installation/", 
            "text": "Table of Contents\n \n\n\n\n\nSetUp Apache2\n\n\nClient Registration\n\n\nDynamic Client Registration\n\n\nManual Client Registration\n\n\n\n\n\n\nGetting DN from Client ID\n\n\n\n\nmod_auth_oidc Installation Guide\n\n\nSetUp Apache2\n\n\nWe're assuming that all the hostnames will be dns resolvable. If not, then you should consider making entries in \n/etc/hosts.\n Install apache2 and enable module ssl by running following commands: \n\n\n\n\nsudo apt-get install apache2\n\n\nsudo a2enmod ssl\n\n\nservice apache2 restart\n\n\n\n\nIf you are encountered with a problem saying:\n\n\n * Restarting web server apache2                                               [fail]\n\n\n\n\nThen you need to enter following commands (These commands will solve the issues regarding pre-occupied Port), if there is no error, then continue to the procedure about downloading mod_auth_openidc deb files.\n\n\n\n\nsudo /etc/init.d/apache2 stop\n\n\nsudo killall apache2\n\n\nsudo netstat -l|grep www\n\n\nsudo /etc/init.d/apache2 restart\n\n\n\n\nDownload \nmod_auth_openidc\n deb file as below. If the binary is not available, refer to \nthis page\n. Then, use \ndpkg\n to install the binary.\n\n\n\n\nsudo wget http://ftp.us.debian.org/debian/pool/main/liba/libapache2-mod-auth-openidc/libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n\n\ndpkg -i libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n\n\n\n\nHere, for some machines, you need to have following packages installed:\n\n\n\n\nlibhiredis0.10\n\n\nlibpcre3\n\n\nlibjansson4\n\n\n\n\nThese packages can be installed using command:\n\n\n\n\nsudo apt-get install \npackage-name\n\n\n\n\nIf you are encountered with errors having \"Unmet dependency\", then you can use following command:\n\n\n\n\nsudo apt-get -f install\n\n\n\n\nNow, enable the mod as shown below, and restart the server:\n\n\n\n\na2enmod auth_openidc\n\n\nservice apache2 restart\n\n\n\n\nNow, since we want to run this apache at port \n44443\n ssl and \n8000\n for non-ssl, we need to edit three files. The changes are done to avoid conflict with the gluu-server's apache ports. But, if the gluu-server server and apache servers are different, no need to change the ports. Change port numbers in the file: \n\n\n\n\n/etc/apache2/ports.conf \n\n\n/etc/apache2/sites-available/000-default.conf\n\n\n/etc/apache2/sites-available/default-ssl.conf\n\n\n\n\nAnd, restart apache2 service as mentioned above (last command). \n\n\nClient Registration\n\n\nThere are two methods for client registration:\n\n\n\n\nDynamic Client Registration\n\n\nManual Cient Registration\n\n\n\n\nYou can use any of the methods to register the client.\n\n\nDynamic Client Registration\n\n\nFor dynamic client registration, we'll name the server: \ndynamic.gluu.org.\n\n\nCreate a directory \ndynamic\n inside \n/var/www/html\n, that is:\n\n\n\n\nmkdir /var/www/html/dynamcic\n\n\n\n\nNow, create a file named \nindex.html\n, and all following content:\n\n\n\n\nhtml\n\n    \ntitle\n\n        Protected URL\n    \n/title\n\n    \nbody\n\n        Nice to see the protected url via Dynamic Registration\n    \n/body\n\n\n/html\n\n\n\n\n\n\nCreate another directory \nmetadeta\n inside above directory to hold metadata.\n\n\nNow, change the ownership of directory, so that apache can write metadata inside the directory.\n\n\n\n\nchown -R www-data:www-data /var/www/html\n\n\n\n\nLet's create the apache config file now. Create a file named \n/etc/apache2/sites-available/dynamic.conf\n  with the contents as below :\n\n\n\n\nVirtualHost *:44443\n\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n    \nLocation /dynamic/\n\n        AuthType openid-connect\n        Require valid-user\n    \n/Location\n\n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n\n/VirtualHost\n\n\n\n\n\n\nHere, cert and key files are pre-existing on the server. You can use your own too.\n\n\nEnable the site by running this command:\n\n\n\n\na2ensite  dynamic.conf\n\n\n\n\nNow, restart the apache service as:\n\n\n\n\nservice httpd restart\n\n\n\n\nNow, try to access \nthis page\n, and You'll be presented with a discovery page, enter \nadmin@ce.gluu.org\n\n\n\n\nThe usual choice as per present used urls is: \nadmin@ce.gluu.org\n. But you must use the existing user at the gluuCE along with existing url i.e \nexisting_user\n@your.gluu.ce.server\n\n\nAfter this we are presented with the \noxAuth\n page from gluuCE where we enter the credentials for authentication. \n\n\n\n\nManual Client Registration\n\n\nConsidering \nmanual client registration\n case, we'll name the server: \nstatic.gluu.org.\n\n\nCreate a directory named \nstatic\n inside /var/www/html, i. e.\n\n\n\n\nmkdir /var/www/html/static \n\n\n\n\nNow, let's create another file named \nindex.html\n with content:\n\n\n\n\nhtml\n\n    \ntitle\n\n        Protected URL\n    \n/title\n\n    \nbody\n\n        Nice to see the protected url via Manual registration\n    \n/body\n\n\n/html\n\n\n\n\n\n\nNow, change the ownerships by using this command:\n\n\n\n\nchown -R www-data:www-data /var/www/html\n\n\n\n\nLet's create the apache config file now. Create a file named \n/etc/apache2/sites-available/static.conf\n with the contents as below: \n\n\n\n\nVirtualHost *:44443\n\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n    \nLocation /static/\n\n        AuthType openid-connect\n        Require valid-user\n    \n/Location\n\n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n\n/VirtualHost\n\n\n\n\n\n\nInstead of pre-existing cert and key files, feel free to use your own.\n\n\nEnable the site by running this command:\n\n\n\n\na2ensite  dynamic.conf\n\n\n\n\nNow, restart the apache service as below:\n\n\n\n\nservice httpd restart\n\n\n\n\nNow, try to access \nthis page\n, and you should see the oxAuth page from gluuCE where we enter the credentials for authentication. \n\n\n\n\nChances are there that you'll see the below error after logging in: \n\n\n\nError:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.\n\n\n\n\n\nAnd that, the apache log at the client side as below:\n\n\n\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \nsub\n string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n\n\n\n\n\nTo solve this problem, log into the gluuCE server by running following command:\n\n\n\n\nservice gluu-server login\n\n\n\n\nGetting DN from Client ID\n\n\nWe get the client id from the search performed in gluu-server's Web UI. So, to get the DN part we perform the below command. The ldap password can be stored in /root/.pw or at any convenient location. In our case the command was:  \n\n\n\n\n/opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C'\n\n\n\n\nCreate a file named \nmod.ldif\n with the contents given below. Here, \noxAuthSubjectIdentifier\n is same as the client id. Since it's missing initially when we register the client manually, so we have to add it later. The DN part to be used in \nmod.ldif\n is obtained from above command's output.\n\n\ndn: inum=@!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C\n\n\n\n\nThen run the \nldapmodify\n command to insert the \noxAuthSubjectIdentifier\n as below:\n\n\n\n\n/opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif\n\n\n\n\nThe command may vary depending upon your using.\n\n\nThen again access \nthis page\n and you should see the success message.", 
            "title": "Ubuntu installation"
        }, 
        {
            "location": "/articles/mod-auth-oidc/ubuntu-installation/#mod_auth_oidc-installation-guide", 
            "text": "SetUp Apache2  We're assuming that all the hostnames will be dns resolvable. If not, then you should consider making entries in  /etc/hosts.  Install apache2 and enable module ssl by running following commands:    sudo apt-get install apache2  sudo a2enmod ssl  service apache2 restart   If you are encountered with a problem saying:   * Restarting web server apache2                                               [fail]  Then you need to enter following commands (These commands will solve the issues regarding pre-occupied Port), if there is no error, then continue to the procedure about downloading mod_auth_openidc deb files.   sudo /etc/init.d/apache2 stop  sudo killall apache2  sudo netstat -l|grep www  sudo /etc/init.d/apache2 restart   Download  mod_auth_openidc  deb file as below. If the binary is not available, refer to  this page . Then, use  dpkg  to install the binary.   sudo wget http://ftp.us.debian.org/debian/pool/main/liba/libapache2-mod-auth-openidc/libapache2-mod-auth-openidc_1.6.0-1_amd64.deb  dpkg -i libapache2-mod-auth-openidc_1.6.0-1_amd64.deb   Here, for some machines, you need to have following packages installed:   libhiredis0.10  libpcre3  libjansson4   These packages can be installed using command:   sudo apt-get install  package-name   If you are encountered with errors having \"Unmet dependency\", then you can use following command:   sudo apt-get -f install   Now, enable the mod as shown below, and restart the server:   a2enmod auth_openidc  service apache2 restart   Now, since we want to run this apache at port  44443  ssl and  8000  for non-ssl, we need to edit three files. The changes are done to avoid conflict with the gluu-server's apache ports. But, if the gluu-server server and apache servers are different, no need to change the ports. Change port numbers in the file:    /etc/apache2/ports.conf   /etc/apache2/sites-available/000-default.conf  /etc/apache2/sites-available/default-ssl.conf   And, restart apache2 service as mentioned above (last command).   Client Registration  There are two methods for client registration:   Dynamic Client Registration  Manual Cient Registration   You can use any of the methods to register the client.  Dynamic Client Registration  For dynamic client registration, we'll name the server:  dynamic.gluu.org.  Create a directory  dynamic  inside  /var/www/html , that is:   mkdir /var/www/html/dynamcic   Now, create a file named  index.html , and all following content:   html \n     title \n        Protected URL\n     /title \n     body \n        Nice to see the protected url via Dynamic Registration\n     /body  /html   Create another directory  metadeta  inside above directory to hold metadata.  Now, change the ownership of directory, so that apache can write metadata inside the directory.   chown -R www-data:www-data /var/www/html   Let's create the apache config file now. Create a file named  /etc/apache2/sites-available/dynamic.conf   with the contents as below :   VirtualHost *:44443 \n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n     Location /dynamic/ \n        AuthType openid-connect\n        Require valid-user\n     /Location \n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key /VirtualHost   Here, cert and key files are pre-existing on the server. You can use your own too.  Enable the site by running this command:   a2ensite  dynamic.conf   Now, restart the apache service as:   service httpd restart   Now, try to access  this page , and You'll be presented with a discovery page, enter  admin@ce.gluu.org   The usual choice as per present used urls is:  admin@ce.gluu.org . But you must use the existing user at the gluuCE along with existing url i.e  existing_user @your.gluu.ce.server  After this we are presented with the  oxAuth  page from gluuCE where we enter the credentials for authentication.    Manual Client Registration  Considering  manual client registration  case, we'll name the server:  static.gluu.org.  Create a directory named  static  inside /var/www/html, i. e.   mkdir /var/www/html/static    Now, let's create another file named  index.html  with content:   html \n     title \n        Protected URL\n     /title \n     body \n        Nice to see the protected url via Manual registration\n     /body  /html   Now, change the ownerships by using this command:   chown -R www-data:www-data /var/www/html   Let's create the apache config file now. Create a file named  /etc/apache2/sites-available/static.conf  with the contents as below:    VirtualHost *:44443 \n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n     Location /static/ \n        AuthType openid-connect\n        Require valid-user\n     /Location \n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key /VirtualHost   Instead of pre-existing cert and key files, feel free to use your own.  Enable the site by running this command:   a2ensite  dynamic.conf   Now, restart the apache service as below:   service httpd restart   Now, try to access  this page , and you should see the oxAuth page from gluuCE where we enter the credentials for authentication.    Chances are there that you'll see the below error after logging in:   \nError:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.  And that, the apache log at the client side as below:  \n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec  sub  string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri  To solve this problem, log into the gluuCE server by running following command:   service gluu-server login   Getting DN from Client ID  We get the client id from the search performed in gluu-server's Web UI. So, to get the DN part we perform the below command. The ldap password can be stored in /root/.pw or at any convenient location. In our case the command was:     /opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C'   Create a file named  mod.ldif  with the contents given below. Here,  oxAuthSubjectIdentifier  is same as the client id. Since it's missing initially when we register the client manually, so we have to add it later. The DN part to be used in  mod.ldif  is obtained from above command's output.  dn: inum=@!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C  Then run the  ldapmodify  command to insert the  oxAuthSubjectIdentifier  as below:   /opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif   The command may vary depending upon your using.  Then again access  this page  and you should see the success message.", 
            "title": "mod_auth_oidc Installation Guide"
        }, 
        {
            "location": "/articles/mod-auth-oidc/centos-installation/", 
            "text": "Table of Contents\n \n\n\n\n\nSetUp Apache2\n\n\nAdd EPEL Repo\n\n\nSetup Apache2 SSL\n\n\n\n\n\n\nClient Registration\n\n\nDynamic Client Registration\n\n\nManual Client Registration\n\n\n\n\n\n\nGetting DN from Client ID\n\n\n\n\nmod_auth_oidc Installation Guide\n\n\nSetUp Apache2\n\n\nWe're assuming that all the hostnames will be dns resolvable. If not, then you should consider making entries in \n/etc/hosts.\n\n\nAdd EPEL Repo\n\n\nRun the following command to \nAdd EPEL Repo\n.\n\n\n\n\nrpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n\n\n\n\nSetup Apache2 SSL\n\n\nNow, to setup \nApache2 SSL\n, run the following commands:\n\n\n\n\nyum install httpd mod_ssl\n\n\nyum install curl hiredis jansson\n\n\nrpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm\n\n\n\n\nNote: In case of having difficulties in installing hiredis and jansson, try to update system using:\n\n\n\n\nyum upgrade\n\n\n\n\nConfirm presence of the the mod file as below:\n\n\n\n\nls -l /usr/lib64/httpd/modules/mod_auth_openidc.so \n\n\n\n\nNext, create an \napache \nconf\n file for loading this module, and start the apache service (running gluuCE at \nce.gluu.org\n).\n\n\n\n\ncat \"LoadModule auth_openidc_module modules/mod_auth_openidc.so\" \n /etc/httpd/conf.d/mod_auth_openidc.conf\n\n\nservice httpd start\n\n\n\n\nApache mod should be using port \n44443\n.\n\n\nClient Registration\n\n\nThere are two methods for client registration:\n\n\n\n\nDynamic Client Registration\n\n\nManual Cient Registration\n\n\n\n\nYou can use any of the methods to register the client.\n\n\nDynamic Client Registration\n\n\nFor dynamic client registration, we'll name the server: \ndynamic.gluu.org.\n\n\nCreate a directory \ndynamic\n inside \n/var/www/html\n, that is:\n\n\n\n\nmkdir /var/www/html/dynamcic\n\n\n\n\nNow, create a file named \nindex.html\n, and add following content:\n\n\n\n\nhtml\n\n    \ntitle\n\n        Protected URL\n    \n/title\n\n    \nbody\n\n        Nice to see the protected url via Dynamic Registration\n    \n/body\n\n\n/html\n\n\n\n\n\n\nCreate another directory \nmetadeta\n inside above directory to hold metadata.\n\n\nNow, change the ownership of directory using:\n\n\n\n\nchown -R apache:apache /var/www/html\n\n\n\n\nLet's create the apache config file now. Create a file named \n/etc/httpd/conf.d/dynamic.conf\n with the contents as below:\n\n\n\n\nVirtualHost *:44443\n\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n    \nLocation /dynamic/\n\n        AuthType openid-connect\n        Require valid-user\n    \n/Location\n\n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n\n/VirtualHost\n\n\n\n\n\n\nHere, cert and key files are pre-existing on the server. You can use your own too.\n\n\nNow, restart the apache service as:\n\n\n\n\nservice httpd restart\n\n\n\n\nNow, try to access \nthis page\n, and You'll be presented with a discovery page, enter \nadmin@ce.gluu.org\n\n\n\n\nThe usual choice as per present used urls is: \nadmin@ce.gluu.org\n. But you must use the existing user at the gluuCE along with existing url i.e \nexisting_user\n@your.gluu.ce.server\n\n\nAfter this we are presented with the \noxAuth\n page from gluuCE where we enter the credentials for authentication. \n\n\n\n\nManual Client Registration\n\n\nConsidering \nmanual client registration\n case, we'll name the server: \nstatic.gluu.org.\n\n\nCreate a directory named \nstatic\n inside /var/www/html, i. e.\n\n\n\n\nmkdir /var/www/html/static \n\n\n\n\nNow, let's create another file named \nindex.html\n with content:\n\n\n\n\nhtml\n\n    \ntitle\n\n        Protected URL\n    \n/title\n\n    \nbody\n\n        Nice to see the protected url via Manual registration\n    \n/body\n\n\n/html\n\n\n\n\n\n\nNow, change the ownerships by using this command:\n\n\n\n\nchown -R apache:apache /var/www/html\n\n\n\n\nCreate a file named \n/etc/httpd/conf.d/static.conf\n with the contents as below: \n\n\n\n\nVirtualHost *:44443\n\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n    \nLocation /static/\n\n        AuthType openid-connect\n        Require valid-user\n    \n/Location\n\n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n\n/VirtualHost\n\n\n\n\n\n\nInstead of pre-existing cert and key files, feel free to use your own.\n\n\nNow, restart the apache service as below:\n\n\n\n\nservice httpd restart\n\n\n\n\nNow, try to access \nthis page\n, and you should see the oxAuth page from gluuCE where we enter the credentials for authentication. \n\n\n\n\nChances are there that you'll see the below error after logging in: \n\n\n\nError:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.\n\n\n\n\n\nAnd that, the apache log at the client side as below:\n\n\n\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \nsub\n string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n\n\n\n\n\nTo solve this problem, log into the gluuCE server by running following command:\n\n\n\n\nservice gluu-server login\n\n\n\n\nGetting DN from Client ID\n\n\nWe get the client id from the search performed in gluu-server's Web UI. So, to get the DN part we perform the below command. The ldap password can be stored in /root/.pw or at any convenient location. In our case the command was:\n\n\n\n\n/opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650' \n\n\n\n\nCreate a file named \nmod.ldif\n with the contents given below. The DN part to be used in \nmod.ldif\n is obtained from above command's output.\n\n\n\ndn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n\n\n\n\n\nThen run the \nldapmodify\n command to insert the \noxAuthSubjectIdentifier\n as below:\n\n\n\n\n/opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif\n\n\n\n\nThe command may vary depending upon your using.\n\n\nThen again access \nthis page\n and you should see the success message.", 
            "title": "Centos installation"
        }, 
        {
            "location": "/articles/mod-auth-oidc/centos-installation/#mod_auth_oidc-installation-guide", 
            "text": "SetUp Apache2  We're assuming that all the hostnames will be dns resolvable. If not, then you should consider making entries in  /etc/hosts.  Add EPEL Repo  Run the following command to  Add EPEL Repo .   rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm   Setup Apache2 SSL  Now, to setup  Apache2 SSL , run the following commands:   yum install httpd mod_ssl  yum install curl hiredis jansson  rpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm   Note: In case of having difficulties in installing hiredis and jansson, try to update system using:   yum upgrade   Confirm presence of the the mod file as below:   ls -l /usr/lib64/httpd/modules/mod_auth_openidc.so    Next, create an  apache  conf  file for loading this module, and start the apache service (running gluuCE at  ce.gluu.org ).   cat \"LoadModule auth_openidc_module modules/mod_auth_openidc.so\"   /etc/httpd/conf.d/mod_auth_openidc.conf  service httpd start   Apache mod should be using port  44443 .  Client Registration  There are two methods for client registration:   Dynamic Client Registration  Manual Cient Registration   You can use any of the methods to register the client.  Dynamic Client Registration  For dynamic client registration, we'll name the server:  dynamic.gluu.org.  Create a directory  dynamic  inside  /var/www/html , that is:   mkdir /var/www/html/dynamcic   Now, create a file named  index.html , and add following content:   html \n     title \n        Protected URL\n     /title \n     body \n        Nice to see the protected url via Dynamic Registration\n     /body  /html   Create another directory  metadeta  inside above directory to hold metadata.  Now, change the ownership of directory using:   chown -R apache:apache /var/www/html   Let's create the apache config file now. Create a file named  /etc/httpd/conf.d/dynamic.conf  with the contents as below:   VirtualHost *:44443 \n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n     Location /dynamic/ \n        AuthType openid-connect\n        Require valid-user\n     /Location \n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key /VirtualHost   Here, cert and key files are pre-existing on the server. You can use your own too.  Now, restart the apache service as:   service httpd restart   Now, try to access  this page , and You'll be presented with a discovery page, enter  admin@ce.gluu.org   The usual choice as per present used urls is:  admin@ce.gluu.org . But you must use the existing user at the gluuCE along with existing url i.e  existing_user @your.gluu.ce.server  After this we are presented with the  oxAuth  page from gluuCE where we enter the credentials for authentication.    Manual Client Registration  Considering  manual client registration  case, we'll name the server:  static.gluu.org.  Create a directory named  static  inside /var/www/html, i. e.   mkdir /var/www/html/static    Now, let's create another file named  index.html  with content:   html \n     title \n        Protected URL\n     /title \n     body \n        Nice to see the protected url via Manual registration\n     /body  /html   Now, change the ownerships by using this command:   chown -R apache:apache /var/www/html   Create a file named  /etc/httpd/conf.d/static.conf  with the contents as below:    VirtualHost *:44443 \n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n     Location /static/ \n        AuthType openid-connect\n        Require valid-user\n     /Location \n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key /VirtualHost   Instead of pre-existing cert and key files, feel free to use your own.  Now, restart the apache service as below:   service httpd restart   Now, try to access  this page , and you should see the oxAuth page from gluuCE where we enter the credentials for authentication.    Chances are there that you'll see the below error after logging in:   \nError:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.  And that, the apache log at the client side as below:  \n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec  sub  string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri  To solve this problem, log into the gluuCE server by running following command:   service gluu-server login   Getting DN from Client ID  We get the client id from the search performed in gluu-server's Web UI. So, to get the DN part we perform the below command. The ldap password can be stored in /root/.pw or at any convenient location. In our case the command was:   /opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'    Create a file named  mod.ldif  with the contents given below. The DN part to be used in  mod.ldif  is obtained from above command's output.  \ndn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650  Then run the  ldapmodify  command to insert the  oxAuthSubjectIdentifier  as below:   /opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif   The command may vary depending upon your using.  Then again access  this page  and you should see the success message.", 
            "title": "mod_auth_oidc Installation Guide"
        }, 
        {
            "location": "/reference/mod_auth_oidc/ubuntu-installation/", 
            "text": "Installing mod_auth_oidc on Gluu Server on Ubuntu 14.04\n\n\nInstall Apache2 and enable module ssl as below:\n\n\n# sudo apt-get install apache2\n# sudo a2enmod ssl\n# service apache2 restart\n\n\n\nDownload mod_auth_openidc deb file as below.\nIf the binary is not available, then refer to https://github.com/pingidentity/mod_auth_openidc/wiki.\nThen install the binary with dpkg and at the end enable the mod as shown below.\n\n\n# wget http://ftp.us.debian.org/debian/pool/main/liba/libapache2-mod-auth-openidc/libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n# dpkg -i libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n# a2enmod auth_openidc\n# service apache2 restart\n\n\n\nNow, since we want to run this apache at \nport 44443\n for ssl and \nport 8000\n for non-ssl, we need to edit three files. The changes are done to avoid conflict with the Gluu Server's Apache ports. But, if the Gluu Server and Apache servers are different, no need to change the ports. Change port numbers in the file: \n/etc/apache2/ports.conf\n, \n/etc/apache2/sites-available/000-default.conf\n and \n/etc/apache2/sites-available/default-ssl.conf\n and restart apache2 service as mentioned above.\n\n\nDynamic Client Registration\n\n\nLet's consider the case of dynamic client registration first.\n\n\nFor this purpose we'll name the server: \ndynamic.gluu.org\n.\n\n\nLet's prepare the server for serving the content protected by gluuCE.\n\n\nCreate a directory named as: \ndynamic\n inside \n/var/www/html\n\n\n# mkdir /var/www/html/dynamic\n\n\n\nNow, let's create a file named \nindex.html\n inside above directory with the following content:\n\n\nhtml\n\n    \ntitle\n\n        Protected URL\n    \n/title\n\n    \nbody\n\n        Nice to see the protected url via Dynamic Registration\n    \n/body\n\n\n/html\n\n\n\n\nCreate another directory named \nmetadata\n in \n/var/www/html\n which will hold the metadata.\n\n\n# mkdir /var/www/html/metadata\n\n\n\nNow, change the ownerships. This is \nextremely critical\n because without this apache won't be able to write the metadata inside the directory.\n\n\n# chown -R www-data:www-data /var/www/html\n\n\n\nLet's create the apache config file now.\n\n\nCreate a file named \n/etc/apache2/sites-available/dynamic.conf\n with the contents as below:\n\n\nVirtualHost *:44443\n\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n    \nLocation /dynamic/\n\n        AuthType openid-connect\n        Require valid-user\n    \n/Location\n\n\n    SSLEngine On\n    SSLCertificateFile      /etc/ssl/certs/ssl-cert-snakeoil.pem\n    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n\n/VirtualHost\n\n\n\n\nAbove, I've taken the cert and key files which are pre-existing at the server. Feel free to use your own.\n\n\nNow, enable the site and restart the apache service as below:\n\n\n# a2ensite  dynamic.conf\n# service apache2 restart\n\n\n\nNow, try to access the page: \nhttps://dynamic.gluu.org:44443/dynamic\n and you should see the discovery page as below. \n\n\nWhen presented with the discovery page, enter \nadmin@ce.gluu.org\n\n\n\n\nThe usual choice as per present used urls is: \nadmin@ce.gluu.org\n. But you must use the existing user at the gluuCE along with existing url i.e \nexisting_user@your.gluu.ce.server\n\n\nAfter this we are presented with the oxAuth page from gluuCE where we enter the credentials for authentication.\n\n\n\n\nManual Client Registration\n\n\nLet's consider the case of \nmanual client registration\n now if you don't wish to use dynamic client registration.\n\n\nFor this purpose we'll name the server: \nstatic.gluu.org\n.\n\n\nLet's prepare the server for serving the content protected by gluuCE.\n\n\nCreate a directory named as: \nstatic\n inside \n/var/www/html\n\n\n# mkdir /var/www/html/static\n\n\n\nNow, let's create a file named \nindex.html\n inside above created directory with the following content:\n\n\nhtml\n\n\ntitle\n\n    Protected URL\n\n/title\n\n\nbody\n\n    Nice to see the protected url via Manual registration\n\n/body\n\n\n/html\n\n\n\n\nNow, change the ownerships.\n\n\n# chown -R www-data:www-data /var/www/html\n\n\n\nLet's create the apache config file now.\n\n\nCreate a file named \n/etc/apache2/sites-available/static.conf\n with the contents as below:\n\n\nVirtualHost *:44443\n\nServerName static.gluu.org\nDocumentRoot /var/www/html\n\nOIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\nOIDCCryptoPassphrase newsecret\n\nOIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\nOIDCClientID @!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C\nOIDCClientSecret newsecret\nOIDCResponseType id_token\nOIDCProviderTokenEndpointAuth client_secret_basic\n\nOIDCProviderIssuer  https://ce.gluu.org\nOIDCSSLValidateServer Off\n\n\nLocation /static/\n\n    AuthType openid-connect\n    Require valid-user\n\n/Location\n\n\nSSLEngine On\n    SSLCertificateFile      /etc/ssl/certs/ssl-cert-snakeoil.pem\n    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n\n/VirtualHost\n\n\n\n\nAbove, I've taken the cert and key files which are pre-existing at the server. Feel free to use your own.\n\n\nNow, restart the apache service as below:\n\n\n# a2ensite static.conf\n# service apache2 restart\n\n\n\nNow, try to access the page: \nhttps://static.gluu.org:44443/static\n and you should see the oxAuth page from gluuCE where we enter the credentials for authentication.\n\n\n\n\nChances are there that you'll see the below error after logging in: \n\n\nError:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.\n\n\n\nAnd that, the apache log at the client side shows as below:\n\n\n[Mon Jun 08 12:58:59.946860 2015] [auth_openidc:error] [pid 15877:tid 139878178371328] [client 124.253.174.54:42385]         oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \"sub\" string value, referer:         https://static.gluu.org:44443/static/fake_redirect_uri\n[Mon Jun 08 12:58:59.946916 2015] [auth_openidc:error] [pid 15877:tid 139878178371328] [client 124.253.174.54:42385]         oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer:                        https://static.gluu.org:44443/static/fake_redirect_uri\n\n\n\nThe screenshots and logs have been captured while writing the doc.\n\n\nTo solve this problem, log into the gluuCE server as:\n\n\n# service gluu-server login\n\n\n\nGetting DN from Client ID\n\n\nWe get the client id from the search performed in gluu-server's Web UI. So, to get the DN part we perform the below command. The ldap password can be stored in \n/root/.pw\n or at any convenient location. In our case the command was:\n\n\n# /opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C'\n\n\n\nCreate a file named \nmod.ldif\n with the following contents. The \noxAuthSubjectIdentifier\n is same as the client id. Since it's missing initially when we register the client manually, so we have to add it later. The DN part to be used in \nmod.ldif\n is obtained from above command's output. \n\n\ndn: inum=@!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C\n\n\n\nThen run the \nldapmodify\n command to insert the \noxAuthSubjectIdentifier\n as below:\n\n\n/opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif\n\n\n\nThe command may vary depending upon how you are using.\n\n\nThen again access the page: \nhttps://static.gluu.org:44443/static\n and very good chances are there that you'll see the success message.", 
            "title": "Ubuntu installation"
        }, 
        {
            "location": "/reference/mod_auth_oidc/ubuntu-installation/#installing-mod_auth_oidc-on-gluu-server-on-ubuntu-1404", 
            "text": "Install Apache2 and enable module ssl as below:  # sudo apt-get install apache2\n# sudo a2enmod ssl\n# service apache2 restart  Download mod_auth_openidc deb file as below.\nIf the binary is not available, then refer to https://github.com/pingidentity/mod_auth_openidc/wiki.\nThen install the binary with dpkg and at the end enable the mod as shown below.  # wget http://ftp.us.debian.org/debian/pool/main/liba/libapache2-mod-auth-openidc/libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n# dpkg -i libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n# a2enmod auth_openidc\n# service apache2 restart  Now, since we want to run this apache at  port 44443  for ssl and  port 8000  for non-ssl, we need to edit three files. The changes are done to avoid conflict with the Gluu Server's Apache ports. But, if the Gluu Server and Apache servers are different, no need to change the ports. Change port numbers in the file:  /etc/apache2/ports.conf ,  /etc/apache2/sites-available/000-default.conf  and  /etc/apache2/sites-available/default-ssl.conf  and restart apache2 service as mentioned above.  Dynamic Client Registration  Let's consider the case of dynamic client registration first.  For this purpose we'll name the server:  dynamic.gluu.org .  Let's prepare the server for serving the content protected by gluuCE.  Create a directory named as:  dynamic  inside  /var/www/html  # mkdir /var/www/html/dynamic  Now, let's create a file named  index.html  inside above directory with the following content:  html \n     title \n        Protected URL\n     /title \n     body \n        Nice to see the protected url via Dynamic Registration\n     /body  /html   Create another directory named  metadata  in  /var/www/html  which will hold the metadata.  # mkdir /var/www/html/metadata  Now, change the ownerships. This is  extremely critical  because without this apache won't be able to write the metadata inside the directory.  # chown -R www-data:www-data /var/www/html  Let's create the apache config file now.  Create a file named  /etc/apache2/sites-available/dynamic.conf  with the contents as below:  VirtualHost *:44443 \n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n     Location /dynamic/ \n        AuthType openid-connect\n        Require valid-user\n     /Location \n\n    SSLEngine On\n    SSLCertificateFile      /etc/ssl/certs/ssl-cert-snakeoil.pem\n    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key /VirtualHost   Above, I've taken the cert and key files which are pre-existing at the server. Feel free to use your own.  Now, enable the site and restart the apache service as below:  # a2ensite  dynamic.conf\n# service apache2 restart  Now, try to access the page:  https://dynamic.gluu.org:44443/dynamic  and you should see the discovery page as below.   When presented with the discovery page, enter  admin@ce.gluu.org   The usual choice as per present used urls is:  admin@ce.gluu.org . But you must use the existing user at the gluuCE along with existing url i.e  existing_user@your.gluu.ce.server  After this we are presented with the oxAuth page from gluuCE where we enter the credentials for authentication.   Manual Client Registration  Let's consider the case of  manual client registration  now if you don't wish to use dynamic client registration.  For this purpose we'll name the server:  static.gluu.org .  Let's prepare the server for serving the content protected by gluuCE.  Create a directory named as:  static  inside  /var/www/html  # mkdir /var/www/html/static  Now, let's create a file named  index.html  inside above created directory with the following content:  html  title \n    Protected URL /title  body \n    Nice to see the protected url via Manual registration /body  /html   Now, change the ownerships.  # chown -R www-data:www-data /var/www/html  Let's create the apache config file now.  Create a file named  /etc/apache2/sites-available/static.conf  with the contents as below:  VirtualHost *:44443 \nServerName static.gluu.org\nDocumentRoot /var/www/html\n\nOIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\nOIDCCryptoPassphrase newsecret\n\nOIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\nOIDCClientID @!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C\nOIDCClientSecret newsecret\nOIDCResponseType id_token\nOIDCProviderTokenEndpointAuth client_secret_basic\n\nOIDCProviderIssuer  https://ce.gluu.org\nOIDCSSLValidateServer Off Location /static/ \n    AuthType openid-connect\n    Require valid-user /Location \n\nSSLEngine On\n    SSLCertificateFile      /etc/ssl/certs/ssl-cert-snakeoil.pem\n    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key /VirtualHost   Above, I've taken the cert and key files which are pre-existing at the server. Feel free to use your own.  Now, restart the apache service as below:  # a2ensite static.conf\n# service apache2 restart  Now, try to access the page:  https://static.gluu.org:44443/static  and you should see the oxAuth page from gluuCE where we enter the credentials for authentication.   Chances are there that you'll see the below error after logging in:   Error:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.  And that, the apache log at the client side shows as below:  [Mon Jun 08 12:58:59.946860 2015] [auth_openidc:error] [pid 15877:tid 139878178371328] [client 124.253.174.54:42385]         oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \"sub\" string value, referer:         https://static.gluu.org:44443/static/fake_redirect_uri\n[Mon Jun 08 12:58:59.946916 2015] [auth_openidc:error] [pid 15877:tid 139878178371328] [client 124.253.174.54:42385]         oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer:                        https://static.gluu.org:44443/static/fake_redirect_uri  The screenshots and logs have been captured while writing the doc.  To solve this problem, log into the gluuCE server as:  # service gluu-server login  Getting DN from Client ID  We get the client id from the search performed in gluu-server's Web UI. So, to get the DN part we perform the below command. The ldap password can be stored in  /root/.pw  or at any convenient location. In our case the command was:  # /opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C'  Create a file named  mod.ldif  with the following contents. The  oxAuthSubjectIdentifier  is same as the client id. Since it's missing initially when we register the client manually, so we have to add it later. The DN part to be used in  mod.ldif  is obtained from above command's output.   dn: inum=@!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!1962.E949.50EE.BCB7!0001!B312.DB22!0008!24F8.303C  Then run the  ldapmodify  command to insert the  oxAuthSubjectIdentifier  as below:  /opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif  The command may vary depending upon how you are using.  Then again access the page:  https://static.gluu.org:44443/static  and very good chances are there that you'll see the success message.", 
            "title": "Installing mod_auth_oidc on Gluu Server on Ubuntu 14.04"
        }, 
        {
            "location": "/reference/mod_auth_oidc/centos-installation/", 
            "text": "Installing mod_auth_oidc on Gluu Server on CentOS 6.x\n\n\nAdd EPEL Repo\n\n\nrpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n\n\nSetup Apache2 SSL\n\n\n# yum install httpd mod_ssl\n# yum install curl hiredis jansson\n# rpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm\n\n\n\nConfirm presence of the the mod file as below:\n    # ls -l /usr/lib64/httpd/modules/mod_auth_openidc.so \n\n\nNext, create an apache conf file for loading this module. After that start the apache service.\n\n\n# cat \"LoadModule auth_openidc_module modules/mod_auth_openidc.so\" \n /etc/httpd/conf.d/mod_auth_openidc.conf\n# service httpd start\n\n\n\nFor our demonstration, we are running gluuCE at \nce.gluu.org\n.\n\n\nApache mod is being run at the same server but at the \nport 44443\n.\nYou may choose your own and make appropriate changes.\n\n\nDynamic Client Registration\n\n\nLet's consider the case of dynamic client registration first.\n\n\nFor this purpose we'll name the server: \ndynamic.gluu.org\n.\n\n\nLet's prepare the server for serving the content protected by gluuCE.\n\n\nCreate a directory named as: \ndynamic\n inside \n/var/www/html\n\n\n# mkdir /var/www/html/dynamic\n\n\n\nNow, let's create a file named \nindex.html\n inside above directory with the following content:\n\n\nhtml\n\n      \ntitle\n\n        Protected URL\n      \n/title\n\n     \nbody\n\n      Nice to see the protected url via Dynamic Registration\n     \n/body\n\n\n/html\n\n\n\n\nCreate another directory named \nmetadata\n in \n/var/www/html\n which will hold the metadata.\n\n\n# mkdir /var/www/html/metadata\n\n\n\nNow, change the ownerships. This is \nextremely critical\n, because without this apache won't be able to write the metadata inside the directory.\n\n\n# chown -R apache:apache /var/www/html\n\n\n\nLet's create the apache config file now.\nCreate a file named \n/etc/httpd/conf.d/dynamic.conf\n with the contents as below:\n\n\nVirtualHost *:44443\n\n      ServerName dynamic.gluu.org\n      DocumentRoot /var/www/html\n\n      OIDCMetadataDir   /var/www/html/metadata\n      OIDCClientSecret secret\n\n      OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n      OIDCCryptoPassphrase secret\n      OIDCSSLValidateServer Off\n\n      \nLocation /dynamic/\n\n      AuthType openid-connect\n      Require valid-user\n      \n/Location\n\n\n      SSLEngine On\n      SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n      SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n\n/VirtualHost\n\n\n\n\nAbove, I've taken the cert and key files which are pre-existing at the server.\nFeel free to use your own.\n\n\nNow, restart the apache service as below:\n\n\n# service httpd restart\n\n\n\nNow, try to access the page: \nhttps://dynamic.gluu.org:44443/dynamic\n and you should see the discovery page as below: You'll be presented with a discovery page, enter \nadmin@ce.gluu.org\n\n\n\n\nThe usual choice as per present used urls is: \nadmin@ce.gluu.org\n. But you must use the existing user at the gluuCE along with existing url i.e \nexisting_user@your.gluu.ce.server\n\n\nAfter this we are presented with the oxAuth page from gluuCE where we enter the credentials for authentication.\n\n\n\n\nManual Client Registration\n\n\nLet's consider the case of \nmanual client registration\n now if you don't wish to use dynamic client registration.\n\n\nFor this purpose we'll name the server: \nstatic.gluu.org\n.\n\n\nLet's prepare the server for serving the content protected by gluuCE.\n\n\nCreate a directory named as: \nstatic\n inside \n/var/www/html\n\n\n# mkdir /var/www/html/static\n\n\n\nNow, let's create a file named \nindex.html\n inside above created directory with the following content:\n\n\nhtml\n\n\ntitle\n\n    Protected URL\n\n/title\n\n\nbody\n\n    Nice to see the protected url via Manual registration\n\n/body\n\n\n/html\n\n\n\n\nNow, change the ownerships.\n\n\n# chown -R apache:apache /var/www/html\n\n\n\nLet's create the apache config file now.\nCreate a file named \n/etc/httpd/conf.d/static.conf\n with the contents as below:\n\n\nVirtualHost *:44443\n\nServerName static.gluu.org\nDocumentRoot /var/www/html\n\nOIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\nOIDCCryptoPassphrase newsecret\n\nOIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\nOIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\nOIDCClientSecret newsecret\nOIDCResponseType id_token\nOIDCProviderTokenEndpointAuth client_secret_basic\n\nOIDCProviderIssuer  https://ce.gluu.org\nOIDCSSLValidateServer Off\n\n\nLocation /static/\n\n    AuthType openid-connect\n    Require valid-user\n\n/Location\n\n\nSSLEngine On\nSSLCertificateFile /etc/pki/tls/certs/localhost.crt\nSSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n\n/VirtualHost\n\n\n\n\nAbove, I've taken the cert and key files which are pre-existing at the server. Feel free to use your own.\n\n\nNow, restart the apache service as below:\n\n\n# service httpd restart\n\n\n\nNow, try to access the page: \nhttps://static.gluu.org:44443/static\n and you should see the oxAuth page from gluuCE where we enter the credentials for authentication.\n\n\n\n\nChances are there that you'll see the below error after logging in: \n\n\nError:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.\n\n\n\nAnd that, the apache log at the client side shows as below:\n\n\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not        contain the required-by-spec \"sub\" string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be           validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n\n\n\nThe screenshots and logs have been captured while writing the doc.\n\n\nTo solve this problem, log into the gluuCE server as:\n\n\n# service gluu-server login\n\n\n\nGetting DN from Client ID\n\n\nWe get the client id from the search performed in gluu-server's Web UI. So, to get the DN part we perform the below command. The ldap password can be stored in /root/.pw or at any convenient location. In our case the command was:\n\n\n# /opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'\n\n\nCreate a file named \nmod.ldif\n with the following contents. The \noxAuthSubjectIdentifier\n is same as the client id. Since it's missing initially when we register the client manually, so we have to add it later. The DN part to be used in \nmod.ldif\n is obtained from above command's output. \n\n\ndn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n\n\n\nThen run the \nldapmodify\n command to insert the \noxAuthSubjectIdentifier\n as below:\n\n\n/opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif\n\n\n\nThe command may vary depending upon how you are using.\n\n\nThen again access the page: \n`https://static.gluu.org:44443/static\n and very good chances are there that you'll see the success message.", 
            "title": "Centos installation"
        }, 
        {
            "location": "/reference/mod_auth_oidc/centos-installation/#installing-mod_auth_oidc-on-gluu-server-on-centos-6x", 
            "text": "Add EPEL Repo  rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm  Setup Apache2 SSL  # yum install httpd mod_ssl\n# yum install curl hiredis jansson\n# rpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm  Confirm presence of the the mod file as below:\n    # ls -l /usr/lib64/httpd/modules/mod_auth_openidc.so   Next, create an apache conf file for loading this module. After that start the apache service.  # cat \"LoadModule auth_openidc_module modules/mod_auth_openidc.so\"   /etc/httpd/conf.d/mod_auth_openidc.conf\n# service httpd start  For our demonstration, we are running gluuCE at  ce.gluu.org .  Apache mod is being run at the same server but at the  port 44443 .\nYou may choose your own and make appropriate changes.  Dynamic Client Registration  Let's consider the case of dynamic client registration first.  For this purpose we'll name the server:  dynamic.gluu.org .  Let's prepare the server for serving the content protected by gluuCE.  Create a directory named as:  dynamic  inside  /var/www/html  # mkdir /var/www/html/dynamic  Now, let's create a file named  index.html  inside above directory with the following content:  html \n       title \n        Protected URL\n       /title \n      body \n      Nice to see the protected url via Dynamic Registration\n      /body  /html   Create another directory named  metadata  in  /var/www/html  which will hold the metadata.  # mkdir /var/www/html/metadata  Now, change the ownerships. This is  extremely critical , because without this apache won't be able to write the metadata inside the directory.  # chown -R apache:apache /var/www/html  Let's create the apache config file now.\nCreate a file named  /etc/httpd/conf.d/dynamic.conf  with the contents as below:  VirtualHost *:44443 \n      ServerName dynamic.gluu.org\n      DocumentRoot /var/www/html\n\n      OIDCMetadataDir   /var/www/html/metadata\n      OIDCClientSecret secret\n\n      OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n      OIDCCryptoPassphrase secret\n      OIDCSSLValidateServer Off\n\n       Location /dynamic/ \n      AuthType openid-connect\n      Require valid-user\n       /Location \n\n      SSLEngine On\n      SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n      SSLCertificateKeyFile /etc/pki/tls/private/localhost.key /VirtualHost   Above, I've taken the cert and key files which are pre-existing at the server.\nFeel free to use your own.  Now, restart the apache service as below:  # service httpd restart  Now, try to access the page:  https://dynamic.gluu.org:44443/dynamic  and you should see the discovery page as below: You'll be presented with a discovery page, enter  admin@ce.gluu.org   The usual choice as per present used urls is:  admin@ce.gluu.org . But you must use the existing user at the gluuCE along with existing url i.e  existing_user@your.gluu.ce.server  After this we are presented with the oxAuth page from gluuCE where we enter the credentials for authentication.   Manual Client Registration  Let's consider the case of  manual client registration  now if you don't wish to use dynamic client registration.  For this purpose we'll name the server:  static.gluu.org .  Let's prepare the server for serving the content protected by gluuCE.  Create a directory named as:  static  inside  /var/www/html  # mkdir /var/www/html/static  Now, let's create a file named  index.html  inside above created directory with the following content:  html  title \n    Protected URL /title  body \n    Nice to see the protected url via Manual registration /body  /html   Now, change the ownerships.  # chown -R apache:apache /var/www/html  Let's create the apache config file now.\nCreate a file named  /etc/httpd/conf.d/static.conf  with the contents as below:  VirtualHost *:44443 \nServerName static.gluu.org\nDocumentRoot /var/www/html\n\nOIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\nOIDCCryptoPassphrase newsecret\n\nOIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\nOIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\nOIDCClientSecret newsecret\nOIDCResponseType id_token\nOIDCProviderTokenEndpointAuth client_secret_basic\n\nOIDCProviderIssuer  https://ce.gluu.org\nOIDCSSLValidateServer Off Location /static/ \n    AuthType openid-connect\n    Require valid-user /Location \n\nSSLEngine On\nSSLCertificateFile /etc/pki/tls/certs/localhost.crt\nSSLCertificateKeyFile /etc/pki/tls/private/localhost.key /VirtualHost   Above, I've taken the cert and key files which are pre-existing at the server. Feel free to use your own.  Now, restart the apache service as below:  # service httpd restart  Now, try to access the page:  https://static.gluu.org:44443/static  and you should see the oxAuth page from gluuCE where we enter the credentials for authentication.   Chances are there that you'll see the below error after logging in:   Error:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.  And that, the apache log at the client side shows as below:  [Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not        contain the required-by-spec \"sub\" string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be           validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri  The screenshots and logs have been captured while writing the doc.  To solve this problem, log into the gluuCE server as:  # service gluu-server login  Getting DN from Client ID  We get the client id from the search performed in gluu-server's Web UI. So, to get the DN part we perform the below command. The ldap password can be stored in /root/.pw or at any convenient location. In our case the command was:  # /opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'  Create a file named  mod.ldif  with the following contents. The  oxAuthSubjectIdentifier  is same as the client id. Since it's missing initially when we register the client manually, so we have to add it later. The DN part to be used in  mod.ldif  is obtained from above command's output.   dn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650  Then run the  ldapmodify  command to insert the  oxAuthSubjectIdentifier  as below:  /opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif  The command may vary depending upon how you are using.  Then again access the page:  `https://static.gluu.org:44443/static  and very good chances are there that you'll see the success message.", 
            "title": "Installing mod_auth_oidc on Gluu Server on CentOS 6.x"
        }
    ]
}